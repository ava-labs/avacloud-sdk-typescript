openapi: "3.0.0"
info:
    title: "Popsicle API"
    description: "The Popsicle API provides metrics and analytics of on-chain activity. The API is in Beta and may be subject to change.</br></br>If you have  feedback or feature requests for the API, please submit them <a href=\"https://portal.productboard.com/dndv9ahlkdfye4opdm8ksafi/tabs/4-glacier-api\">here</a>. Bug reports can be submitted <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeJQrcp7QoNiqozMDKrVJGX5wpU827d3cVTgF8qa7t_J1Pb-g/viewform\">here</a>, and any potential security issues can be reported <a href=\"https://hackenproof.com/avalanche\">here</a>."
    contact: {}
    version: "Beta"
paths:
    "/v1/health-check":
        get:
            tags:
                - "Health Check"
            summary: "Get the health of the service"
            operationId: "health-check-v1"
            responses:
                "200":
                    description: "The Health Check is successful"
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "status":
                                        type: "string"
                                        example: "ok"
                                    "info":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                        example: {"database": {"status": "up"}}
                                    "error":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                        example: {}
                                    "details":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        example: {"database": {"status": "up"}}
                "503":
                    description: "The Health Check is not successful"
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "status":
                                        type: "string"
                                        example: "error"
                                    "info":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                        example: {"database": {"status": "up"}}
                                    "error":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                        example: {"redis": {"status": "down", "message": "Could not connect"}}
                                    "details":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        example: {"database": {"status": "up"}, "redis": {"status": "down", "message": "Could not connect"}}
            x-speakeasy-group: "metrics.healthCheck"
            servers:
                - url: "http://localhost:3001"
    "/v1/chains/{chainId}/nfts/collections/{address}/tokens/{tokenId}:reindex":
        post:
            tags:
                - "NFTs"
            summary: "Reindex NFT metadata"
            description: "Triggers reindexing of token metadata for an NFT token. Reindexing can only be called once per hour for each NFT token."
            operationId: "reindexNft"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "Contract address on the relevant chain."
                  required: true
                  schema:
                    type: "string"
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
                - name: "tokenId"
                  in: "path"
                  description: "TokenId on the contract"
                  required: true
                  schema:
                    type: "string"
                  example: "145"
            responses:
                "200": {}
            x-speakeasy-group: "glacier.nfts"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/nfts/collections/{address}/tokens":
        get:
            tags:
                - "NFTs"
            summary: "List tokens"
            description: "Lists tokens for an NFT contract."
            operationId: "listTokens"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "Contract address on the relevant chain."
                  required: true
                  schema:
                    type: "string"
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListNftTokens"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.nfts"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/nfts/collections/{address}/tokens/{tokenId}":
        get:
            tags:
                - "NFTs"
            summary: "Get token details"
            description: "Gets token details for a specific token of an NFT contract."
            operationId: "getTokenDetails"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "Contract address on the relevant chain."
                  required: true
                  schema:
                    type: "string"
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
                - name: "tokenId"
                  in: "path"
                  description: "TokenId on the contract"
                  required: true
                  schema:
                    type: "string"
                  example: "145"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/Erc721Token"}
                                    - {"$ref": "#/components/schemas/Erc1155Token"}
                                discriminator:
                                    propertyName: "ercType"
                                    mapping:
                                        "ERC-721": "#/components/schemas/Erc721Token"
                                        "ERC-1155": "#/components/schemas/Erc1155Token"
            x-speakeasy-group: "glacier.nfts"
            servers:
                - url: "http://localhost:3000"
    "/v1/operations/{operationId}":
        get:
            tags:
                - "Operations"
            summary: "Get operation"
            description: "Gets operation details for the given operation id."
            operationId: "getOperationResult"
            parameters:
                - name: "operationId"
                  in: "path"
                  description: "UUID of given operation"
                  required: true
                  schema:
                    type: "string"
                  example: "aa22054a-cb7c-4a4e-9b83-59f2ede74138"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/OperationStatusResponse"}
            x-speakeasy-group: "glacier.operations"
            servers:
                - url: "http://localhost:3000"
    "/v1/operations/transactions:export":
        post:
            tags:
                - "Operations"
            summary: "Create transaction export operation"
            description: "Trigger a transaction export operation with given parameters.\n\nThe transaction export operation runs asynchronously in the background. The status of the job can be retrieved from the `/v1/operations/:operationId` endpoint using the `operationId` returned from this endpoint."
            operationId: "postTransactionExportJob"
            requestBody:
                content:
                    "application/json":
                        schema:
                            oneOf:
                                - {"$ref": "#/components/schemas/CreateEvmTransactionExportRequest"}
                                - {"$ref": "#/components/schemas/CreatePrimaryNetworkTransactionExportRequest"}
                required: true
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/OperationStatusResponse"}
            x-speakeasy-group: "glacier.operations"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions/{txHash}":
        get:
            tags:
                - "Primary Network Transactions"
            summary: "Get transaction"
            description: "Gets the details of a single transaction on one of the Primary Network chains."
            operationId: "getTxByHash"
            parameters:
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                  example: "p-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "txHash"
                  in: "path"
                  description: "A primary network (P or X chain) transaction hash."
                  required: true
                  schema:
                    type: "string"
                  example: "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/PChainTransaction"}
                                    - {"$ref": "#/components/schemas/XChainNonLinearTransaction"}
                                    - {"$ref": "#/components/schemas/XChainLinearTransaction"}
                                    - {"$ref": "#/components/schemas/CChainExportTransaction"}
                                    - {"$ref": "#/components/schemas/CChainImportTransaction"}
            x-speakeasy-group: "glacier.primaryNetwork.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions":
        get:
            tags:
                - "Primary Network Transactions"
            summary: "List latest transactions"
            description: "Lists the latest transactions on one of the Primary Network chains.\n\nTransactions are filterable by addresses, txTypes, and timestamps. When querying for latest transactions without an address parameter, filtering by txTypes and timestamps is not supported. An address filter must be provided to utilize txTypes and timestamp filters.\n\nGiven that each transaction may return a large number of UTXO objects, bounded only by the maximum transaction size, the query may return less transactions than the provided page size. The result will contain less results than the page size if the number of utxos contained in the resulting transactions reach a performance threshold."
            operationId: "listLatestPrimaryNetworkTransactions"
            parameters:
                - name: "addresses"
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\"."
                  required: false
                  schema:
                    type: "string"
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                - name: "txTypes"
                  in: "query"
                  description: "Query param for filtering items based on transaction types."
                  required: false
                  schema:
                    type: "array"
                    items: {"$ref": "#/components/schemas/PrimaryNetworkTxType"}
                  example: ["AddValidatorTx"]
                - name: "startTimestamp"
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689541049
                - name: "endTimestamp"
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689800249
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                  example: "p-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/ListPChainTransactionsResponse"}
                                    - {"$ref": "#/components/schemas/ListXChainTransactionsResponse"}
                                    - {"$ref": "#/components/schemas/ListCChainAtomicTransactionsResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.transactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/transactions:listStaking":
        get:
            tags:
                - "Primary Network Transactions"
            summary: "List staking transactions"
            description: "Lists active staking transactions on the P-Chain for the supplied addresses."
            operationId: "listActivePrimaryNetworkStakingTransactions"
            parameters:
                - name: "addresses"
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\"."
                  required: false
                  schema:
                    type: "string"
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                - name: "txTypes"
                  in: "query"
                  description: "Query param for filtering items based on transaction types."
                  required: false
                  schema:
                    type: "array"
                    items: {"$ref": "#/components/schemas/PrimaryNetworkTxType"}
                  example: ["AddValidatorTx"]
                - name: "startTimestamp"
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689541049
                - name: "endTimestamp"
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689800249
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/PChainId"}
                  example: "p-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListPChainTransactionsResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.transactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/rewards:listPending":
        get:
            tags:
                - "Primary Network Rewards"
            summary: "List pending rewards"
            description: "Lists pending rewards on the Primary Network for the supplied addresses."
            operationId: "listPendingPrimaryNetworkRewards"
            parameters:
                - name: "addresses"
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\". One of addresses or nodeIds is required."
                  required: false
                  schema:
                    type: "string"
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "nodeIds"
                  in: "query"
                  description: "A comma separated list of node ids to filter by. One of addresses or nodeIds is required."
                  required: false
                  schema:
                    type: "string"
                  example: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListPendingRewardsResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.rewards"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/rewards":
        get:
            tags:
                - "Primary Network Rewards"
            summary: "List historical rewards"
            description: "Lists historical rewards on the Primary Network for the supplied addresses."
            operationId: "listHistoricalPrimaryNetworkRewards"
            parameters:
                - name: "addresses"
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\". Optional, but at least one of addresses or nodeIds is required."
                  required: false
                  schema:
                    type: "string"
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "nodeIds"
                  in: "query"
                  description: "A comma separated list of node ids to filter by. Optional, but at least one of addresses or nodeIds is required."
                  required: false
                  schema:
                    type: "string"
                  example: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
                - name: "currency"
                  in: "query"
                  description: "The currency that return values should use. Defaults to USD."
                  required: false
                  schema: {"$ref": "#/components/schemas/CurrencyCode"}
                  example: "usd"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListHistoricalRewardsResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.rewards"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/utxos":
        get:
            tags:
                - "Primary Network UTXOs"
            summary: "List UTXOs"
            description: "Lists UTXOs on one of the Primary Network chains for the supplied addresses."
            operationId: "getUtxosByAddresses"
            parameters:
                - name: "addresses"
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\"."
                  required: false
                  schema:
                    type: "string"
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                  example: "p-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "assetId"
                  in: "query"
                  description: "Asset ID for any asset (only applicable X-Chain)"
                  required: false
                  schema:
                    type: "string"
                - name: "includeSpent"
                  in: "query"
                  description: "Boolean filter to include spent UTXOs."
                  required: false
                  schema:
                    type: "boolean"
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/ListPChainUtxosResponse"}
                                    - {"$ref": "#/components/schemas/ListUtxosResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.utxos"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/balances":
        get:
            tags:
                - "Primary Network Balances"
            summary: "Get balances"
            description: "Gets primary network balances for one of the Primary Network chains for the supplied addresses.\n\nC-Chain balances returned are only the shared atomic memory balance. For EVM balance, use the `/v1/chains/:chainId/addresses/:addressId/balances:getNative` endpoint."
            operationId: "getBalancesByAddresses"
            parameters:
                - name: "blockTimestamp"
                  in: "query"
                  description: "An epoch timestamp in seconds. Balance will be calculated at this timestamp."
                  required: false
                  schema:
                    type: "integer"
                  example: "1599696000"
                - name: "addresses"
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\"."
                  required: false
                  schema:
                    type: "string"
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                  example: "p-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/ListPChainBalancesResponse"}
                                    - {"$ref": "#/components/schemas/ListXChainBalancesResponse"}
                                    - {"$ref": "#/components/schemas/ListCChainAtomicBalancesResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.balances"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/blocks/{blockId}":
        get:
            tags:
                - "Primary Network Blocks"
            summary: "Get block"
            description: "Gets a block by block height or block hash on one of the Primary Network chains."
            operationId: "getBlockById"
            parameters:
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                  example: "p-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "blockId"
                  in: "path"
                  description: "A block identifier which is either a block number or the block hash."
                  required: true
                  schema:
                    type: "string"
                  example: "5615di9ytxujackzaXNrVuWQy5y8Yrt8chPCscMr5Ku9YxJ1S"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetPrimaryNetworkBlockResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.blocks"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/nodes/{nodeId}/blocks":
        get:
            tags:
                - "Primary Network Blocks"
            summary: "List blocks proposed by node"
            description: "Lists the latest blocks proposed by a given NodeID on one of the Primary Network chains."
            operationId: "listPrimaryNetworkBlocksByNodeId"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                  example: "p-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "nodeId"
                  in: "path"
                  description: "A primary network (P or X chain) nodeId."
                  required: true
                  schema:
                    type: "string"
                  example: "NodeID-111111111111111111116DBWJs"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListPrimaryNetworkBlocksResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.blocks"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/blocks":
        get:
            tags:
                - "Primary Network Blocks"
            summary: "List latest blocks"
            description: "Lists latest blocks on one of the Primary Network chains."
            operationId: "listLatestPrimaryNetworkBlocks"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/BlockchainId"}
                  example: "p-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListPrimaryNetworkBlocksResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.blocks"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices":
        get:
            tags:
                - "Primary Network Vertices"
            summary: "List vertices"
            description: "Lists latest vertices on the X-Chain."
            operationId: "listLatestXChainVertices"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/XChainId"}
                  example: "x-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListXChainVerticesResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.vertices"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices/{vertexHash}":
        get:
            tags:
                - "Primary Network Vertices"
            summary: "Get vertex"
            description: "Gets a single vertex on the X-Chain."
            operationId: "getVertexByHash"
            parameters:
                - name: "vertexHash"
                  in: "path"
                  description: "A vertex hash string."
                  required: true
                  schema:
                    type: "string"
                  example: "haP1CW56cspZY7aEuqHNrtpvhqCaMTxQaYe6j5u2Mbn4L2Gqr"
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/XChainId"}
                  example: "x-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/XChainVertex"}
            x-speakeasy-group: "glacier.primaryNetwork.vertices"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/vertices:listByHeight":
        get:
            tags:
                - "Primary Network Vertices"
            summary: "List vertices by height"
            description: "Lists vertices at the given vertex height on the X-Chain."
            operationId: "getVertexByHeight"
            parameters:
                - name: "vertexHeight"
                  in: "query"
                  description: "The height of a vertex."
                  required: true
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 123
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/XChainId"}
                  example: "x-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListXChainVerticesResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.vertices"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}":
        get:
            tags:
                - "Primary Network"
            summary: "Get asset details"
            description: "Gets asset details corresponding to the given asset id on the X-Chain."
            operationId: "getAssetDetails"
            parameters:
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/XChainId"}
                  example: "x-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "assetId"
                  in: "path"
                  description: "Asset ID for any asset on X-Chain"
                  required: true
                  schema:
                    type: "string"
                  example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/XChainAssetDetails"}
            x-speakeasy-group: "glacier.primaryNetwork"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}/transactions":
        get:
            tags:
                - "Primary Network Transactions"
            summary: "List asset transactions"
            description: "Lists asset transactions corresponding to the given asset id on the X-Chain."
            operationId: "listAssetTransactions"
            parameters:
                - name: "txTypes"
                  in: "query"
                  description: "Query param for filtering items based on transaction types."
                  required: false
                  schema:
                    type: "array"
                    items: {"$ref": "#/components/schemas/PrimaryNetworkTxType"}
                  example: ["AddValidatorTx"]
                - name: "startTimestamp"
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689541049
                - name: "endTimestamp"
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689800249
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "blockchainId"
                  in: "path"
                  description: "A primary network blockchain id or alias."
                  required: true
                  schema: {"$ref": "#/components/schemas/XChainId"}
                  example: "x-chain"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "assetId"
                  in: "path"
                  description: "Asset ID for any asset on X-Chain"
                  required: true
                  schema:
                    type: "string"
                  example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListXChainTransactionsResponse"}
            x-speakeasy-group: "glacier.primaryNetwork.transactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/addresses:listChainIds":
        get:
            tags:
                - "Primary Network"
            summary: "Get chain interactions for addresses"
            description: "Returns Primary Network chains that each address has touched in the form of an address mapped array. If an address has had any on-chain interaction for a chain, that chain's chain id will be returned."
            operationId: "getChainIdsForAddresses"
            parameters:
                - name: "addresses"
                  in: "query"
                  description: "A comma separated list of X-Chain or P-Chain wallet addresses, starting with \"avax\"/\"fuji\", \"P-avax\"/\"P-fuji\" or \"X-avax\"/\"X-fuji\"."
                  required: true
                  schema:
                    type: "string"
                  example: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ChainAddressChainIdMapListResponse"}
            x-speakeasy-group: "glacier.primaryNetwork"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}":
        get:
            tags:
                - "Primary Network"
            summary: "Get network details"
            description: "Gets network details such as validator and delegator stats."
            operationId: "getNetworkDetails"
            parameters:
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetNetworkDetailsResponse"}
            x-speakeasy-group: "glacier.primaryNetwork"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/blockchains":
        get:
            tags:
                - "Primary Network"
            summary: "List blockchains"
            description: "Lists all blockchains registered on the network."
            operationId: "listBlockchains"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListBlockchainsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.primaryNetwork"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/subnets":
        get:
            tags:
                - "Primary Network"
            summary: "List subnets"
            description: "Lists all subnets registered on the network."
            operationId: "listSubnets"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListSubnetsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.primaryNetwork"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/validators":
        get:
            tags:
                - "Primary Network"
            summary: "List validators"
            description: "Lists details for validators. By default, returns details for all validators. Filterable by validator node ids and minimum delegation capacity."
            operationId: "listValidators"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "nodeIds"
                  in: "query"
                  description: "A comma separated list of node ids to filter by."
                  required: false
                  schema:
                    type: "string"
                  example: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
                - name: "sortBy"
                  in: "query"
                  description: "Which property to sort by, in conjunction with sortOrder.\n\nNote: Delegation fee is only available for mainnet validators. Set `subnetId` to `11111111111111111111111111111111LpoYY`  to use this option."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortByOption"}
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
                - name: "validationStatus"
                  in: "query"
                  description: "Validation status of the node."
                  required: false
                  schema: {"$ref": "#/components/schemas/ValidationStatusType"}
                  example: "completed"
                - name: "minDelegationCapacity"
                  in: "query"
                  description: "The minimum delegation capacity, in nAVAX, used to filter the set of nodes being returned. Accepts values between 0 and 720,000,000,000,000,000"
                  required: false
                  schema:
                    type: "string"
                  example: "0"
                - name: "maxDelegationCapacity"
                  in: "query"
                  description: "The maximum delegation capacity, in nAVAX, used to filter the set of nodes being returned. Accepts values between 0 and 720,000,000,000,000,000."
                  required: false
                  schema:
                    type: "string"
                  example: "720000000000000000"
                - name: "minTimeRemaining"
                  in: "query"
                  description: "The minimum validation time remaining, in seconds, used to filter the set of nodes being returned."
                  required: false
                  schema:
                    type: "number"
                    maximum: 2147483647
                    minimum: 0
                  example: 0
                - name: "maxTimeRemaining"
                  in: "query"
                  description: "The maximum validation time remaining, in seconds, used to filter the set of nodes being returned."
                  required: false
                  schema:
                    type: "number"
                    maximum: 2147483647
                    minimum: 0
                  example: 2147483647
                - name: "minFeePercentage"
                  in: "query"
                  description: "The minimum fee percentage, used to filter the set of nodes being returned. If this field is populated no subnet validations will be returned, as their fee percentage is null, since subnet delegations are not supported. Default is 2.0, as per the Avalanche spec."
                  required: false
                  schema:
                    type: "number"
                    maximum: 100
                    minimum: 2
                  example: 2
                - name: "maxFeePercentage"
                  in: "query"
                  description: "The maximum fee percentage, used to filter the set of nodes being returned. If this field is populated no subnet validations will be returned, as their fee percentage is null, since subnet delegations are not supported. Default is 100.0."
                  required: false
                  schema:
                    type: "number"
                    maximum: 100
                    minimum: 2
                  example: 100
                - name: "minUptimePerformance"
                  in: "query"
                  description: "The minimum node uptime performance percentage, which represents node health, used to filter the set of nodes being returned Default is 90."
                  required: false
                  schema:
                    type: "number"
                    maximum: 100
                    minimum: 0
                  example: 90
                - name: "maxUptimePerformance"
                  in: "query"
                  description: "The maximum node uptime performance percentage, which represents node health, used to filter the set of nodes being returned. Default is 100."
                  required: false
                  schema:
                    type: "number"
                    maximum: 100
                    minimum: 0
                  example: 100
                - name: "subnetId"
                  in: "query"
                  description: "The subnet ID to filter by. If not provided, then all subnets will be returned."
                  required: false
                  schema: {}
                  example: "11111111111111111111111111111111LpoYY"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListValidatorDetailsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.primaryNetwork"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/validators/{nodeId}":
        get:
            tags:
                - "Primary Network"
            summary: "Get single validator details"
            description: "List validator details for a single validator.  Filterable by validation status."
            operationId: "getSingleValidatorDetails"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "nodeId"
                  in: "path"
                  description: "A primary network (P or X chain) nodeId."
                  required: true
                  schema:
                    type: "string"
                  example: "NodeID-111111111111111111116DBWJs"
                - name: "validationStatus"
                  in: "query"
                  description: "Validation status of the node."
                  required: false
                  schema: {"$ref": "#/components/schemas/ValidationStatusType"}
                  example: "completed"
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListValidatorDetailsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.primaryNetwork"
            servers:
                - url: "http://localhost:3000"
    "/v1/networks/{network}/delegators":
        get:
            tags:
                - "Primary Network"
            summary: "List delegators"
            description: "Lists details for delegators."
            operationId: "listDelegators"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "rewardAddresses"
                  in: "query"
                  description: "A comma separated list of reward addresses to filter by."
                  required: false
                  schema:
                    type: "string"
                  example: "P-avax1679zrp3z9mf7z4an42ddq47qzj36zv6ga20vwl,P-avax1s7kd0kfndlz6mh3l0etrrcmkg5y366k8e0s6cc"
                - name: "network"
                  in: "path"
                  description: "Either mainnet or a testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/Network"}
                  example: "mainnet"
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
                - name: "delegationStatus"
                  in: "query"
                  description: "Delegation status of the node."
                  required: false
                  schema: {"$ref": "#/components/schemas/DelegationStatusType"}
                  example: "completed"
                - name: "nodeIds"
                  in: "query"
                  description: "A comma separated list of node ids to filter by."
                  required: false
                  schema:
                    type: "string"
                  example: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListDelegatorDetailsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.primaryNetwork"
            servers:
                - url: "http://localhost:3000"
    "/v1/media/uploadImage":
        post:
            operationId: "MediaController_uploadImage"
            responses:
                "201": {}
            x-speakeasy-ignore: true
            servers:
                - url: "http://localhost:3000"
    "/v1/webhooks":
        get:
            tags:
                - "Webhooks"
            summary: "List webhooks"
            description: "Lists webhooks for the user."
            operationId: "listWebhooks"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "status"
                  in: "query"
                  description: "Status of the webhook. Use \"active\" to return only active webhooks, \"inactive\" to return only inactive webhooks. Else if no status is provided, all configured webhooks will be returned."
                  required: false
                  schema: {"$ref": "#/components/schemas/WebhookStatus"}
                  example: "active"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListWebhooksResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.webhooks"
            servers:
                - url: "http://localhost:3000"
        post:
            tags:
                - "Webhooks"
            summary: "Create a webhook"
            description: "Create a new webhook."
            operationId: "createWebhook"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/CreateWebhookRequest"}
                required: true
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
            x-speakeasy-group: "glacier.webhooks"
            servers:
                - url: "http://localhost:3000"
    "/v1/webhooks/{id}":
        get:
            tags:
                - "Webhooks"
            summary: "Get a webhook by ID"
            description: "Retrieves a webhook by ID."
            operationId: "getWebhook"
            parameters:
                - name: "id"
                  in: "path"
                  description: "The webhook identifier."
                  required: true
                  schema:
                    type: "string"
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
            x-speakeasy-group: "glacier.webhooks"
            servers:
                - url: "http://localhost:3000"
        delete:
            tags:
                - "Webhooks"
            summary: "Deactivate a webhook"
            description: "Deactivates a webhook by ID."
            operationId: "deactivateWebhook"
            parameters:
                - name: "id"
                  in: "path"
                  description: "The webhook identifier."
                  required: true
                  schema:
                    type: "string"
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
            x-speakeasy-group: "glacier.webhooks"
            servers:
                - url: "http://localhost:3000"
        patch:
            tags:
                - "Webhooks"
            summary: "Update a webhook"
            description: "Updates an existing webhook."
            operationId: "updateWebhook"
            parameters:
                - name: "id"
                  in: "path"
                  description: "The webhook identifier."
                  required: true
                  schema:
                    type: "string"
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/UpdateWebhookRequest"}
                required: true
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
            x-speakeasy-group: "glacier.webhooks"
            servers:
                - url: "http://localhost:3000"
    "/v1/webhooks:generateOrRotateSharedSecret":
        post:
            tags:
                - "Webhooks"
            summary: "Generate a shared secret"
            description: "Generates a new shared secret."
            operationId: "generateSharedSecret"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/SharedSecretsResponse"}
            x-speakeasy-group: "glacier.webhooks"
            servers:
                - url: "http://localhost:3000"
    "/v1/webhooks:getSharedSecret":
        get:
            tags:
                - "Webhooks"
            summary: "Get a shared secret"
            description: "Get a previously generated shared secret."
            operationId: "getSharedSecret"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/SharedSecretsResponse"}
            x-speakeasy-group: "glacier.webhooks"
            servers:
                - url: "http://localhost:3000"
    "/v1/webhooks/{id}/addresses":
        get:
            tags:
                - "Webhooks"
            summary: "List adresses by webhook"
            description: "List adresses by webhook."
            operationId: "getAddressesFromWebhook"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "id"
                  in: "path"
                  description: "The webhook identifier."
                  required: true
                  schema:
                    type: "string"
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListWebhookAddressesResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.webhooks"
            servers:
                - url: "http://localhost:3000"
        delete:
            tags:
                - "Webhooks"
            summary: "Remove addresses from webhook"
            description: "Remove addresses from webhook."
            operationId: "removeAddressesFromWebhook"
            parameters:
                - name: "id"
                  in: "path"
                  description: "The webhook identifier."
                  required: true
                  schema:
                    type: "string"
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/AddressesChangeRequest"}
                required: true
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
            x-speakeasy-group: "glacier.webhooks"
            servers:
                - url: "http://localhost:3000"
        patch:
            tags:
                - "Webhooks"
            summary: "Add addresses to webhook"
            description: "Add addresses to webhook."
            operationId: "addAddressesToWebhook"
            parameters:
                - name: "id"
                  in: "path"
                  description: "The webhook identifier."
                  required: true
                  schema:
                    type: "string"
                  example: "f33de69c-d13b-4691-908f-870d6e2e6b04"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/AddressesChangeRequest"}
                required: true
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/WebhookResponse"}
            x-speakeasy-group: "glacier.webhooks"
            servers:
                - url: "http://localhost:3000"
    "/v1/teleporter/messages/{messageId}":
        get:
            tags:
                - "Teleporter"
            summary: "Get a teleporter message"
            description: "Gets a teleporter message by message ID."
            operationId: "getTeleporterMessage"
            parameters:
                - name: "messageId"
                  in: "path"
                  description: "The message ID of the teleporter message."
                  required: true
                  schema:
                    type: "string"
                  example: "acf1c8b06f9aec48e9fcbefbbe576ae8a7ca3b327fcae111396e7cc99956674d"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/PendingTeleporterMessage"}
                                    - {"$ref": "#/components/schemas/DeliveredTeleporterMessage"}
                                    - {"$ref": "#/components/schemas/DeliveredSourceNotIndexedTeleporterMessage"}
                                discriminator:
                                    propertyName: "status"
                                    mapping:
                                        "pending": "#/components/schemas/PendingTeleporterMessage"
                                        "delivered": "#/components/schemas/DeliveredTeleporterMessage"
                                        "delivered_source_not_indexed": "#/components/schemas/DeliveredSourceNotIndexedTeleporterMessage"
            x-speakeasy-group: "glacier.teleporter"
            servers:
                - url: "http://localhost:3000"
    "/v1/teleporter/messages":
        get:
            tags:
                - "Teleporter"
            summary: "List teleporter messages"
            description: "Lists teleporter messages. Ordered by timestamp in descending order."
            operationId: "listTeleporterMessages"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "sourceBlockchainId"
                  in: "query"
                  description: "The base58 encoded blockchain ID or evm chain ID of the source chain that the teleporter message was sent from."
                  required: false
                  schema:
                    type: "string"
                  example: "2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY"
                - name: "destinationBlockchainId"
                  in: "query"
                  description: "The base58 encoded blockchain ID or evm chain ID of the destination chain that the teleporter message was sent to."
                  required: false
                  schema:
                    type: "string"
                  example: "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
                - name: "to"
                  in: "query"
                  description: "The address of the recipient of the teleporter message."
                  required: false
                  schema:
                    type: "string"
                  example: "0x664A4Be5Af2cFc824F9C0914CbAc4703396Da2DC"
                - name: "from"
                  in: "query"
                  description: "The address of the sender of the teleporter message."
                  required: false
                  schema:
                    type: "string"
                  example: "0x321eDA69247566D662178feE695C7026c604Cd94"
                - name: "network"
                  in: "query"
                  description: "mainnet or testnet."
                  required: false
                  schema: {"$ref": "#/components/schemas/NetworkType"}
                  example: "mainnet"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListTeleporterMessagesResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.teleporter"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}/balances:getNative":
        get:
            tags:
                - "EVM Balances"
            summary: "Get native token balance"
            description: "Gets native token balance of a wallet address.\n\nBalance at a given block can be retrieved with the `blockNumber` parameter."
            operationId: "getNativeBalance"
            parameters:
                - name: "blockNumber"
                  in: "query"
                  description: "The block number, if not defined the block number will be the latest block."
                  required: false
                  schema:
                    type: "string"
                  example: "6479329"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                - name: "currency"
                  in: "query"
                  description: "The currency that return values should use. Defaults to USD."
                  required: false
                  schema: {"$ref": "#/components/schemas/CurrencyCode"}
                  example: "usd"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetNativeBalanceResponse"}
            x-speakeasy-group: "glacier.evm.balances"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc20":
        get:
            tags:
                - "EVM Balances"
            summary: "List ERC-20 balances"
            description: "Lists ERC-20 token balances of a wallet address.\n\nBalance at a given block can be retrieved with the `blockNumber` parameter.\n\nBalance for specific contracts can be retrieved with the `contractAddresses` parameter."
            operationId: "listErc20Balances"
            parameters:
                - name: "blockNumber"
                  in: "query"
                  description: "The block number, if not defined the block number will be the latest block."
                  required: false
                  schema:
                    type: "string"
                  example: "6479329"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "filterSpamTokens"
                  in: "query"
                  description: "whether to filter out spam tokens from the response. Default is true."
                  required: false
                  schema:
                    type: "boolean"
                    default: true
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                - name: "contractAddresses"
                  in: "query"
                  description: "A comma separated list of contract addresses to filter by."
                  required: false
                  schema:
                    type: "string"
                  example: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7, 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB"
                - name: "currency"
                  in: "query"
                  description: "The currency that return values should use. Defaults to USD."
                  required: false
                  schema: {"$ref": "#/components/schemas/CurrencyCode"}
                  example: "usd"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc20BalancesResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.balances"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc721":
        get:
            tags:
                - "EVM Balances"
            summary: "List ERC-721 balances"
            description: "Lists ERC-721 token balances of a wallet address.\n\nBalance for a specific contract can be retrieved with the `contractAddress` parameter."
            operationId: "listErc721Balances"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                - name: "contractAddress"
                  in: "query"
                  description: "A contract addresses to filter by."
                  required: false
                  schema:
                    type: "string"
                  example: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc721BalancesResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.balances"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}/balances:listErc1155":
        get:
            tags:
                - "EVM Balances"
            summary: "List ERC-1155 balances"
            description: "Lists ERC-1155 token balances of a wallet address.\n\nBalance at a given block can be retrieved with the `blockNumber` parameter.\n\nBalance for a specific contract can be retrieved with the `contractAddress` parameter."
            operationId: "listErc1155Balances"
            parameters:
                - name: "blockNumber"
                  in: "query"
                  description: "The block number, if not defined the block number will be the latest block."
                  required: false
                  schema:
                    type: "string"
                  example: "6479329"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                - name: "contractAddress"
                  in: "query"
                  description: "A contract addresses to filter by."
                  required: false
                  schema:
                    type: "string"
                  example: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc1155BalancesResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.balances"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}/balances:listCollectibles":
        get:
            tags:
                - "EVM Balances"
            summary: "List collectible (ERC-721/ERC-1155) balances"
            description: "Lists ERC-721 and ERC-1155 token balances of a wallet address.\n\nBalance for a specific contract can be retrieved with the `contractAddress` parameter."
            operationId: "listCollectibleBalances"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                - name: "contractAddress"
                  in: "query"
                  description: "A contract addresses to filter by."
                  required: false
                  schema:
                    type: "string"
                  example: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListCollectibleBalancesResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.balances"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/blocks":
        get:
            tags:
                - "EVM Blocks"
            summary: "List latest blocks"
            description: "Lists the latest indexed blocks on the EVM-compatible chain sorted in descending order by block timestamp."
            operationId: "getLatestBlocks"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListEvmBlocksResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.blocks"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/blocks/{blockId}":
        get:
            tags:
                - "EVM Blocks"
            summary: "Get block"
            description: "Gets the details of an individual block on the EVM-compatible chain."
            operationId: "getBlock"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "blockId"
                  in: "path"
                  description: "A block identifier which is either a block number or the block hash."
                  required: true
                  schema:
                    type: "string"
                  example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetEvmBlockResponse"}
            x-speakeasy-group: "glacier.evm.blocks"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/contracts/{address}/transactions:getDeployment":
        get:
            tags:
                - "EVM Transactions"
            summary: "Get deployment transaction"
            description: "If the address is a smart contract, returns the transaction in which it was deployed."
            operationId: "getDeploymentTransaction"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "Contract address on the relevant chain."
                  required: true
                  schema:
                    type: "string"
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
                - name: "currency"
                  in: "query"
                  description: "The currency that return values should use. Defaults to USD."
                  required: false
                  schema: {"$ref": "#/components/schemas/CurrencyCode"}
                  example: "usd"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetTransactionResponse"}
            x-speakeasy-group: "glacier.evm.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/contracts/{address}/deployments":
        get:
            tags:
                - "EVM Transactions"
            summary: "List deployed contracts"
            description: "Lists all contracts deployed by the given address."
            operationId: "listContractDeployments"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListContractsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}":
        get:
            tags:
                - "EVM Contracts"
            summary: "Get contract metadata"
            description: "Gets metadata about the contract at the given address."
            operationId: "getContractMetadata"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "Contract address on the relevant chain."
                  required: true
                  schema:
                    type: "string"
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/Erc721Contract"}
                                    - {"$ref": "#/components/schemas/Erc1155Contract"}
                                    - {"$ref": "#/components/schemas/Erc20Contract"}
                                    - {"$ref": "#/components/schemas/UnknownContract"}
                                discriminator:
                                    propertyName: "ercType"
                                    mapping:
                                        "ERC-721": "#/components/schemas/Erc721Contract"
                                        "ERC-1155": "#/components/schemas/Erc1155Contract"
                                        "ERC-20": "#/components/schemas/Erc20Contract"
                                        "UNKNOWN": "#/components/schemas/UnknownContract"
            x-speakeasy-group: "glacier.evm.contracts"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/contracts/{address}":
        patch:
            tags:
                - "EVM Contracts"
            summary: "Update contract information"
            description: "Update contract information. Updates will be reviewed by the Ava Labs team before they are published."
            operationId: "updateContractInfo"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "Contract address on the relevant chain."
                  required: true
                  schema:
                    type: "string"
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/ContractSubmissionBody"}
                required: true
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/UpdateContractResponse"}
            x-speakeasy-ignore: true
            servers:
                - url: "http://localhost:3000"
    "/v1/chains":
        get:
            tags:
                - "EVM Chains"
            summary: "List chains"
            description: "Lists the supported EVM-compatible chains. Filterable by network."
            operationId: "supportedChains"
            parameters:
                - name: "network"
                  in: "query"
                  description: "mainnet or testnet."
                  required: false
                  schema: {"$ref": "#/components/schemas/NetworkType"}
                  example: "mainnet"
                - name: "feature"
                  in: "query"
                  description: "Filter by feature."
                  required: false
                  schema: {"$ref": "#/components/schemas/GlacierApiFeature"}
                  example: "nftIndexing"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListChainsResponse"}
            x-speakeasy-group: "glacier.evm.chains"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}":
        get:
            tags:
                - "EVM Chains"
            summary: "Get chain information"
            description: "Gets chain information for the EVM-compatible chain if supported by the api."
            operationId: "getChainInfo"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetChainResponse"}
            x-speakeasy-group: "glacier.evm.chains"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/tokens/{address}/transfers":
        get:
            tags:
                - "EVM Transactions"
            summary: "List ERC transfers"
            description: "Lists ERC transfers for an ERC-20, ERC-721, or ERC-1155 contract address."
            operationId: "listTransfers"
            parameters:
                - name: "startBlock"
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479329"
                - name: "endBlock"
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479330"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListTransfersResponse"}
            x-speakeasy-group: "glacier.evm.transactions"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}/transactions":
        get:
            tags:
                - "EVM Transactions"
            summary: "List transactions"
            description: "Returns a list of transactions where the given wallet address had an on-chain interaction for the given chain. The ERC-20 transfers, ERC-721 transfers, ERC-1155, and internal transactions returned are only those where the input address had an interaction. Specifically, those lists only inlcude entries where the input address was the sender (`from` field) or the receiver (`to` field) for the sub-transaction. Therefore the transactions returned from this list may not be complete representations of the on-chain data. For a complete view of a transaction use the `/chains/:chainId/transactions/:txHash` endpoint.\n\nFilterable by block ranges."
            operationId: "listTransactions"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "startBlock"
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479329"
                - name: "endBlock"
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479330"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                - name: "sortOrder"
                  in: "query"
                  description: "The order by which to sort results. Use \"asc\" for ascending order, \"desc\" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided."
                  required: false
                  schema: {"$ref": "#/components/schemas/SortOrder"}
                  example: "asc"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListTransactionDetailsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}/transactions:listNative":
        get:
            tags:
                - "EVM Transactions"
            summary: "List native transactions"
            description: "Lists native transactions for an address. Filterable by block range."
            operationId: "listNativeTransactions"
            parameters:
                - name: "startBlock"
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479329"
                - name: "endBlock"
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479330"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListNativeTransactionsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc20":
        get:
            tags:
                - "EVM Transactions"
            summary: "List ERC-20 transfers"
            description: "Lists ERC-20 transfers for an address. Filterable by block range."
            operationId: "listErc20Transactions"
            parameters:
                - name: "startBlock"
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479329"
                - name: "endBlock"
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479330"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc20TransactionsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc721":
        get:
            tags:
                - "EVM Transactions"
            summary: "List ERC-721 transfers"
            description: "Lists ERC-721 transfers for an address. Filterable by block range."
            operationId: "listErc721Transactions"
            parameters:
                - name: "startBlock"
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479329"
                - name: "endBlock"
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479330"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc721TransactionsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}/transactions:listErc1155":
        get:
            tags:
                - "EVM Transactions"
            summary: "List ERC-1155 transfers"
            description: "Lists ERC-1155 transfers for an address. Filterable by block range."
            operationId: "listErc1155Transactions"
            parameters:
                - name: "startBlock"
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479329"
                - name: "endBlock"
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479330"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListErc1155TransactionsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/addresses/{address}/transactions:listInternals":
        get:
            tags:
                - "EVM Transactions"
            summary: "List internal transactions"
            description: "Returns a list of internal transactions for an address and chain. Filterable by block range.\n\nNote that the internal transactions list only contains `CALL` or `CALLCODE` transactions with a non-zero value and `CREATE`/`CREATE2` transactions. To get a complete list of internal transactions use the `debug_` prefixed RPC methods on an archive node."
            operationId: "listInternalTransactions"
            parameters:
                - name: "startBlock"
                  in: "query"
                  description: "The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479329"
                - name: "endBlock"
                  in: "query"
                  description: "The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block."
                  required: false
                  schema:
                    type: "number"
                  example: "6479330"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "A wallet address."
                  required: true
                  schema:
                    type: "string"
                  example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListInternalTransactionsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/transactions/{txHash}":
        get:
            tags:
                - "EVM Transactions"
            summary: "Get transaction"
            description: "Gets the details of a single transaction."
            operationId: "getTransaction"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "txHash"
                  in: "path"
                  description: "A transaction hash."
                  required: true
                  schema:
                    type: "string"
                  example: "0x8bf584d7b14b92a32a339872a66b134a70ba3ba7c305823f348db6f860253f45"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/GetTransactionResponse"}
            x-speakeasy-group: "glacier.evm.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/blocks/{blockId}/transactions":
        get:
            tags:
                - "EVM Transactions"
            summary: "List transactions for a block"
            description: "Lists the transactions that occured in a given block."
            operationId: "getTransactionsForBlock"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "blockId"
                  in: "path"
                  description: "A block identifier which is either a block number or the block hash."
                  required: true
                  schema:
                    type: "string"
                  example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListNativeTransactionsResponse"}
            x-speakeasy-group: "glacier.evm.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/chains/{chainId}/transactions":
        get:
            tags:
                - "EVM Transactions"
            summary: "List latest transactions"
            description: "Lists the latest transactions. Filterable by status."
            operationId: "listLatestTransactions"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 100
                    minimum: 1
                    default: 10
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "status"
                  in: "query"
                  description: "A status filter for listed transactions."
                  required: false
                  schema: {"$ref": "#/components/schemas/TransactionStatus"}
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListNativeTransactionsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "glacier.evm.transactions"
            servers:
                - url: "http://localhost:3000"
    "/v1/ext/bc/{chainId}/rpc":
        post:
            tags:
                - "RPC"
            summary: "Calls JSON-RPC method"
            description: "Calls JSON-RPC method."
            operationId: "rpc"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            requestBody:
                content:
                    "application/json":
                        schema:
                            oneOf:
                                - {"$ref": "#/components/schemas/RpcRequestBodyDto"}
                                - type: "array"
                                  items: {"$ref": "#/components/schemas/RpcRequestBodyDto"}
                required: true
            responses:
                "200":
                    content:
                        "application/json":
                            schema:
                                oneOf:
                                    - {"$ref": "#/components/schemas/RpcSuccessResponseDto"}
                                    - {"$ref": "#/components/schemas/RpcErrorResponseDto"}
                                    - type: "array"
                                      items:
                                        oneOf:
                                            - {"$ref": "#/components/schemas/RpcSuccessResponseDto"}
                                            - {"$ref": "#/components/schemas/RpcErrorResponseDto"}
                "504":
                    description: "Request timed out"
            x-speakeasy-ignore: true
            servers:
                - url: "http://localhost:3000"
    /v2/health-check:
        get:
            tags:
                - "Health Check"
            summary: "Get the health of the service"
            operationId: "health-check-v2"
            responses:
                "200":
                    description: "The Health Check is successful"
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "status":
                                        type: "string"
                                        example: "ok"
                                    "info":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                        example: {"database": {"status": "up"}}
                                    "error":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                        example: {}
                                    "details":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        example: {"database": {"status": "up"}}
                "503":
                    description: "The Health Check is not successful"
                    content:
                        "application/json":
                            schema:
                                type: "object"
                                properties:
                                    "status":
                                        type: "string"
                                        example: "error"
                                    "info":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                        example: {"database": {"status": "up"}}
                                    "error":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        nullable: true
                                        example: {"redis": {"status": "down", "message": "Could not connect"}}
                                    "details":
                                        type: "object"
                                        additionalProperties:
                                            type: "object"
                                            properties:
                                                "status":
                                                    type: "string"
                                            additionalProperties:
                                                type: "string"
                                        example: {"database": {"status": "up"}, "redis": {"status": "down", "message": "Could not connect"}}
            x-speakeasy-group: "metrics.healthCheck"
            servers:
                - url: "http://localhost:3001"
    /v2/chains:
        get:
            tags:
                - "EVM Chains"
            summary: "Get a list of supported blockchains"
            description: "Get a list of Popsicle API supported blockchains."
            operationId: "listChains"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "network"
                  in: "query"
                  description: "mainnet or testnet."
                  required: false
                  schema: {"$ref": "#/components/schemas/NetworkType"}
                  example: "mainnet"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ListChainsResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "metrics.evm.chains"
            servers:
                - url: "http://localhost:3001"
    /v2/chains/{chainId}:
        get:
            tags:
                - "EVM Chains"
            summary: "Get chain information for supported blockchain"
            description: "Get chain information for Popsicle API supported blockchain."
            operationId: "getChain"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/Chain"}
            x-speakeasy-group: "metrics.evm.chains"
            servers:
                - url: "http://localhost:3001"
    /v2/chains/{chainId}/metrics/{metric}:
        get:
            tags:
                - "Chain Metrics"
            summary: "Get metrics for EVM chains"
            description: "Gets metrics for an EVM chain over a specified time interval aggregated at the specified time-interval granularity."
            operationId: "getEvmChainMetrics"
            parameters:
                - name: "startTimestamp"
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689541049
                - name: "endTimestamp"
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689800249
                - name: "timeInterval"
                  in: "query"
                  description: "Time interval granularity for data aggregation"
                  required: false
                  schema: {"$ref": "#/components/schemas/TimeIntervalGranularity"}
                  example: "hour"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "metric"
                  in: "path"
                  description: "Which chain level metric to fetch."
                  required: true
                  schema: {"$ref": "#/components/schemas/ChainMetric"}
                  example: "activeAddresses"
                - name: "chainId"
                  in: "path"
                  description: "A supported EVM chain ID or one of \"total\", \"mainnet\", or \"testnet\". Use the `/chains` endpoint to get a list of supported chain IDs."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/MetricsApiResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "metrics.chain.metrics"
            servers:
                - url: "http://localhost:3001"
    /v2/chains/{chainId}/rollingWindowMetrics/{metric}:
        get:
            tags:
                - "Chain Metrics"
            summary: "Get rolling window metrics for EVM chains"
            description: "Gets the rolling window metrics for an EVM chain for the last hour, day, month, year, and all time."
            operationId: "getEvmChainRollingWindowMetrics"
            parameters:
                - name: "metric"
                  in: "path"
                  description: "Which chain level metric to fetch for the rolling window."
                  required: true
                  schema: {"$ref": "#/components/schemas/ChainRollingWindowMetric"}
                  example: "txCount"
                - name: "chainId"
                  in: "path"
                  description: "A supported EVM chain ID or one of \"total\", \"mainnet\", or \"testnet\". Use the `/chains` endpoint to get a list of supported chain IDs."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/RollingWindowMetricsApiResponse"}
            x-speakeasy-group: "metrics.chain.metrics"
            servers:
                - url: "http://localhost:3001"
    /v2/networks/{network}/metrics/{metric}:
        get:
            tags:
                - "Chain Metrics"
            summary: "Get staking metrics for a given subnet"
            description: "Gets staking metrics for a given subnet."
            operationId: "get Staking Metrics"
            parameters:
                - name: "startTimestamp"
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689541049
                - name: "endTimestamp"
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689800249
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "metric"
                  in: "path"
                  description: "Which network level metric to fetch."
                  required: true
                  schema: {"$ref": "#/components/schemas/NetworkMetric"}
                  example: "validatorCount"
                - name: "network"
                  in: "path"
                  description: "mainnet or testnet."
                  required: true
                  schema: {"$ref": "#/components/schemas/NetworkType"}
                  example: "mainnet"
                - name: "subnetId"
                  in: "query"
                  description: "The subnet ID to filter by. If not provided, then all subnets will be returned."
                  required: false
                  schema:
                    default: "11111111111111111111111111111111LpoYY"
                  example: "11111111111111111111111111111111LpoYY"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/MetricsApiResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "metrics.chain.metrics"
            servers:
                - url: "http://localhost:3001"
    /v2/chains/{chainId}/contracts/{address}/nfts:listHolders:
        get:
            tags:
                - "Looking Glass"
            summary: "Get NFT holders by contract address"
            description: "Get list of NFT holders and number of NFTs held by contract address."
            operationId: "getNftHoldersByContractAddress"
            parameters:
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 5000."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 5000
                    minimum: 1
                    default: 1000
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "Contract address on the relevant chain."
                  required: true
                  schema:
                    type: "string"
                  example: "0x7a420AEFF902AAa2c85a190D7B91Ce8BEFffFE14"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/NftHoldersResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "metrics.lookingGlass"
            servers:
                - url: "http://localhost:3001"
    /v2/chains/{chainId}/contracts/{address}/balances:
        get:
            tags:
                - "Looking Glass"
            summary: "Get addresses by balance over time"
            description: "Get list of addresses and their latest balances  that have held more than a certain threshold of a given token during the specified time frame."
            operationId: "getAddressesByBalanceOverTime"
            parameters:
                - name: "threshold"
                  in: "query"
                  description: "The minimum balance for which addresses should be considered."
                  required: true
                  schema:
                    type: "string"
                  example: "1000000"
                - name: "startTimestamp"
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689541049
                - name: "endTimestamp"
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689800249
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 5000."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 5000
                    minimum: 1
                    default: 1000
                  example: "10"
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
                - name: "address"
                  in: "path"
                  description: "Contract address on the relevant chain."
                  required: true
                  schema:
                    type: "string"
                  example: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LookingGlassResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "metrics.lookingGlass"
            servers:
                - url: "http://localhost:3001"
    /v2/chains/43114/btcb/bridged:getAddresses:
        get:
            tags:
                - "Looking Glass"
            summary: "Get addresses by BTCb bridged balance"
            description: "Get list of addresses and their net bridged amounts that have bridged more than a certain threshold."
            operationId: "getAddressesByBtcbBridged"
            parameters:
                - name: "threshold"
                  in: "query"
                  description: "The minimum balance for which addresses should be considered."
                  required: true
                  schema:
                    type: "string"
                  example: "1000000"
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 5000."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 5000
                    minimum: 1
                    default: 1000
                  example: "10"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LookingGlassResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "metrics.lookingGlass"
            servers:
                - url: "http://localhost:3001"
    /v2/subnets/{subnetId}/validators:getAddresses:
        get:
            tags:
                - "Looking Glass"
            summary: "Get addresses running validators during a given time frame"
            description: "Get list of addresses and AddValidatorTx timestamps set to receive  awards for validation periods during the specified time frame."
            operationId: "getValidatorsByDateRange"
            parameters:
                - name: "startTimestamp"
                  in: "query"
                  description: "Query param for retrieving items after a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689541049
                - name: "endTimestamp"
                  in: "query"
                  description: "Query param for retrieving items before a specific timestamp."
                  required: false
                  schema:
                    type: "integer"
                    minimum: 0
                  example: 1689800249
                - name: "pageToken"
                  in: "query"
                  description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                  required: false
                  schema:
                    type: "string"
                - name: "pageSize"
                  in: "query"
                  description: "The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 5000."
                  required: false
                  schema:
                    type: "integer"
                    maximum: 5000
                    minimum: 1
                    default: 1000
                  example: "10"
                - name: "subnetId"
                  in: "path"
                  description: "The subnet ID to filter by. If not provided, then all subnets will be returned."
                  required: true
                  schema:
                    type: "string"
                  example: "11111111111111111111111111111111LpoYY"
                - name: "network"
                  in: "query"
                  description: "mainnet or testnet."
                  required: false
                  schema: {"$ref": "#/components/schemas/NetworkType"}
                  example: "mainnet"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/PChainLookingGlassResponse"}
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "pageToken", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageToken"}}
            x-speakeasy-group: "metrics.lookingGlass"
            servers:
                - url: "http://localhost:3001"
    /v1/lookingGlass/compositeQuery:
        post:
            tags:
                - "Looking Glass"
            summary: "Composite query"
            description: "Composite query to get list of addresses from multiple subqueries."
            operationId: "compositeQueryV1"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/CompositeQueryRequestDto"}
                required: true
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/CompositeQueryResponse"}
            x-speakeasy-group: "metrics.lookingGlass"
            servers:
                - url: "http://localhost:3001"
    /v2/lookingGlass/compositeQuery:
        post:
            tags:
                - "Looking Glass"
            summary: "Composite query"
            description: "Composite query to get list of addresses from multiple subqueries."
            operationId: "compositeQueryV2"
            requestBody:
                content:
                    "application/json":
                        schema: {"$ref": "#/components/schemas/CompositeQueryRequestDto"}
                required: true
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/CompositeQueryResponse"}
            x-speakeasy-group: "metrics.lookingGlass"
            servers:
                - url: "http://localhost:3001"
    /v1/mapping:
        get:
            tags:
                - "EVM Chains"
            summary: "Subnet ID to EVM Chain ID mappings"
            description: "Get a list of Popsicle API supported mappings."
            operationId: "getMappings"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/SubnetMappingsResponse"}
            x-speakeasy-group: "metrics.evm.chains"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "startKey", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageStartKey"}}
            servers:
                - url: "http://localhost:3001"
    /v1/mapping/{subnetID}:
        get:
            tags:
                - "EVM Chains"
            summary: "Subnet ID to EVM Chain ID mappings"
            description: "Get a Popsicle API supported mapping by subnet ID."
            operationId: "getMappingsBySubnetId"
            parameters:
                - name: "subnetID"
                  in: "path"
                  description: "alpha-numeric subnetID"
                  required: true
                  schema:
                    type: "string"
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/SubnetMappingsResponse"}
            x-speakeasy-group: "metrics.evm.chains"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "startKey", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageStartKey"}}
            servers:
                - url: "http://localhost:3001"
    /v1/chains/network/{network}:
        get:
            tags:
                - "EVM Chains"
            summary: "Chain information by network"
            description: "Get chain information by network."
            operationId: "getChainInformationByNetwork"
            parameters:
                - name: "network"
                  in: "path"
                  description: "Network type"
                  required: true
                  schema: {"$ref": "#/components/schemas/LegacyNetworks"}
                  example: "mainnet"
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ChainInformationResponse"}
            x-speakeasy-group: "metrics.evm.chains"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "startKey", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageStartKey"}}
            servers:
                - url: "http://localhost:3001"
    /v1/chains/network/{network}/subnetId/{subnetID}:
        get:
            tags:
                - "EVM Chains"
            summary: "Chain information by network and subnet ID"
            description: "Get chain information by network and subnet ID."
            operationId: "getChainInformationByNetworkAndSubnetId"
            parameters:
                - name: "network"
                  in: "path"
                  description: "Network type"
                  required: true
                  schema: {"$ref": "#/components/schemas/LegacyNetworks"}
                  example: "mainnet"
                - name: "subnetID"
                  in: "path"
                  description: "alpha-numeric subnetID"
                  required: true
                  schema:
                    type: "string"
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/ChainInformationResponse"}
            x-speakeasy-group: "metrics.evm.chains"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "startKey", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageStartKey"}}
            servers:
                - url: "http://localhost:3001"
    /v1/subnets/network/{network}:
        get:
            tags:
                - "EVM Chains"
            summary: "Subnet information by network"
            description: "Get subnet information by network."
            operationId: "getSubnetInformationByNetwork"
            parameters:
                - name: "network"
                  in: "path"
                  description: "Network type"
                  required: true
                  schema: {"$ref": "#/components/schemas/LegacyNetworks"}
                  example: "mainnet"
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/SubnetsResponse"}
            x-speakeasy-group: "metrics.evm.chains"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "startKey", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageStartKey"}}
            servers:
                - url: "http://localhost:3001"
    /v1/subnets/network/{network}/subnetId/{subnetID}:
        get:
            tags:
                - "EVM Chains"
            summary: "Subnet information by network and subnet ID"
            description: "Get subnet information by network and subnet ID."
            operationId: "getSubnetInformationByNetworkAndSubnetId"
            parameters:
                - name: "network"
                  in: "path"
                  description: "Network type"
                  required: true
                  schema: {"$ref": "#/components/schemas/LegacyNetworks"}
                  example: "mainnet"
                - name: "subnetID"
                  in: "path"
                  description: "alpha-numeric subnetID"
                  required: true
                  schema:
                    type: "string"
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/SubnetsResponse"}
            x-speakeasy-group: "metrics.evm.chains"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "startKey", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageStartKey"}}
            servers:
                - url: "http://localhost:3001"
    /v1/active_senders/{chain}:
        get:
            tags:
                - "Chain Throughput"
            summary: "Active senders"
            description: "Get the number of addresses that sent a transaction."
            operationId: "getActiveSenders"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "interval"
                  in: "query"
                  description: "Time interval granularity."
                  required: false
                  schema: {"$ref": "#/components/schemas/LegacyInterval"}
                  example: "hour"
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/active_addresses/{chain}:
        get:
            tags:
                - "Chain Throughput"
            summary: "Active addresses"
            description: "Get the number of active addresses."
            operationId: "getActiveAddresses"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "interval"
                  in: "query"
                  description: "Time interval granularity."
                  required: false
                  schema: {"$ref": "#/components/schemas/LegacyInterval"}
                  example: "hour"
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/gas_used/{chain}:
        get:
            tags:
                - "Chain Throughput"
            summary: "Gas used"
            description: "Get the total gas consumed."
            operationId: "getGasUsed"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "interval"
                  in: "query"
                  description: "Time interval granularity. **If [from] and [to] are over 60 days apart, 'hour' granularity is unavailable.**"
                  required: false
                  schema: {"$ref": "#/components/schemas/LegacyInterval"}
                  example: "hour"
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/tx_count/{chain}:
        get:
            tags:
                - "Chain Throughput"
            summary: "Transaction count"
            description: "Get the number of transactions."
            operationId: "getTxCount"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "interval"
                  in: "query"
                  description: "Time interval granularity."
                  required: false
                  schema: {"$ref": "#/components/schemas/LegacyInterval"}
                  example: "hour"
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/avg_gps/{chain}:
        get:
            tags:
                - "Chain Throughput"
            summary: "Average gas consumed per second"
            description: "Get the average gas consumed per second."
            operationId: "getAvgGps"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/max_gps/{chain}:
        get:
            tags:
                - "Chain Throughput"
            summary: "Maxumum gas consumed per second"
            description: "Get the maximum gas consumed per second."
            operationId: "getMaxGps"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/avg_tps/{chain}:
        get:
            tags:
                - "Chain Throughput"
            summary: "Average transactions per second"
            description: "Get the average number of transactions per second."
            operationId: "getAvgTps"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/max_tps/{chain}:
        get:
            tags:
                - "Chain Throughput"
            summary: "Maximum transactions per second"
            description: "Get the maximum number of transactions per second."
            operationId: "getMaxTps"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/avg_gas_price/{chain}:
        get:
            tags:
                - "Chain Throughput"
            summary: "Average gas price"
            description: "Get the average gas price."
            operationId: "getAvgGasPrice"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/max_gas_price/{chain}:
        get:
            tags:
                - "Chain Throughput"
            summary: "Maximum gas price"
            description: "Get the maximum gas price."
            operationId: "getMaxGasPrice"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/cumulative/addresses/{chain}:
        get:
            tags:
                - "Cumulative"
            summary: "Cumulative number of addresses"
            description: "Get the cumulative number of addresses."
            operationId: "getCumulativeAddresses"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.cumulative"
            servers:
                - url: "http://localhost:3001"
    /v1/cumulative/contracts/{chain}:
        get:
            tags:
                - "Cumulative"
            summary: "Cumulative number of contracts"
            description: "Get the cumulative number of contracts."
            operationId: "getCumulativeContracts"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.cumulative"
            servers:
                - url: "http://localhost:3001"
    /v1/cumulative/tx_count/{chain}:
        get:
            tags:
                - "Cumulative"
            summary: "Cumulative transaction count"
            description: "Get the cumulative number of transactions."
            operationId: "getCumulativeTxCount"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.cumulative"
            servers:
                - url: "http://localhost:3001"
    /v1/cumulative/deployers/{chain}:
        get:
            tags:
                - "Cumulative"
            summary: "Cumulative number of deployers"
            description: "Get the cumulative number of deployers."
            operationId: "getCumulativeDeployers"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "chain"
                  in: "path"
                  description: "numeric chainID, 'testnet', 'mainnet', or 'total'."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/LegacyEvmMetricsResponse"}
            x-speakeasy-group: "metrics.cumulative"
            servers:
                - url: "http://localhost:3001"
    /v1/gas_used/{chainId}/rollingWindow:
        get:
            tags:
                - "Chain Throughput"
            summary: "Rolling window of gas used"
            description: "Get rolling window of gas used."
            operationId: "getRollingWindowGasUsed"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/RollingWindowResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/tx_count/{chainId}/rollingWindow:
        get:
            tags:
                - "Chain Throughput"
            summary: "Rolling window of tx count"
            description: "Get rolling window of tx count."
            operationId: "getRollingWindowTxCount"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/RollingWindowResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/avg_gps/{chainId}/rollingWindow:
        get:
            tags:
                - "Chain Throughput"
            summary: "Rolling window of average gps consumed"
            description: "Get rolling window of average gas per second consumed."
            operationId: "getRollingWindowAvgGps"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/RollingWindowResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/max_gps/{chainId}/rollingWindow:
        get:
            tags:
                - "Chain Throughput"
            summary: "Rolling window of max gps"
            description: "Get rolling window of max gas per second."
            operationId: "getRollingWindowMaxGps"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/RollingWindowResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/avg_tps/{chainId}/rollingWindow:
        get:
            tags:
                - "Chain Throughput"
            summary: "Rolling window of average tps"
            description: "Get rolling window of average transactions per second."
            operationId: "getRollingWindowAvgTps"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/RollingWindowResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/max_tps/{chainId}/rollingWindow:
        get:
            tags:
                - "Chain Throughput"
            summary: "Rolling window of max tps"
            description: "Get rolling window of max transactions per second."
            operationId: "getRollingWindowMaxTps"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/RollingWindowResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/avg_gas_price/{chainId}/rollingWindow:
        get:
            tags:
                - "Chain Throughput"
            summary: "Rolling window of average gas price"
            description: "Get rolling window of average gas price."
            operationId: "getRollingWindowAvgGasPrice"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/RollingWindowResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/max_gas_price/{chainId}/rollingWindow:
        get:
            tags:
                - "Chain Throughput"
            summary: "Rolling window of max gas price"
            description: "Get rolling window of max gas price."
            operationId: "getRollingWindowMaxGasPrice"
            parameters:
                - name: "chainId"
                  in: "path"
                  description: "A supported evm chain id. Use the `/chains` endpoint to get a list of supported chain ids."
                  required: true
                  schema:
                    type: "string"
                  example: "43114"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/RollingWindowResponse"}
            x-speakeasy-group: "metrics.chain.throughput"
            servers:
                - url: "http://localhost:3001"
    /v1/validators/network/{network}/subnetId/{subnetID}/count:
        get:
            tags:
                - "Staking Information"
            summary: "Get validation count by subnet id"
            description: "Get the validation count for a subnet."
            operationId: "getValidatorCount"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "network"
                  in: "path"
                  description: "Network type"
                  required: true
                  schema: {"$ref": "#/components/schemas/LegacyNetworks"}
                  example: "mainnet"
                - name: "subnetID"
                  in: "path"
                  description: "alpha-numeric subnetID"
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/StakingInformationResponse"}
            x-speakeasy-group: "metrics.stakingInformation"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "startKey", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageStartKey"}}
            servers:
                - url: "http://localhost:3001"
    /v1/validators/network/{network}/subnetId/{subnetID}/weight:
        get:
            tags:
                - "Staking Information"
            summary: "Get validation weight by subnet id"
            description: "Get the validation weight for a subnet."
            operationId: "getValidatorWeight"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "network"
                  in: "path"
                  description: "Network type"
                  required: true
                  schema: {"$ref": "#/components/schemas/LegacyNetworks"}
                  example: "mainnet"
                - name: "subnetID"
                  in: "path"
                  description: "alpha-numeric subnetID"
                  required: true
                  schema:
                    type: "string"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/StakingInformationResponse"}
            x-speakeasy-group: "metrics.stakingInformation"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "startKey", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageStartKey"}}
            servers:
                - url: "http://localhost:3001"
    /v1/delegators/network/{network}/subnetId/{subnetID}/count:
        get:
            tags:
                - "Staking Information"
            summary: "Get delegation count by subnet id"
            description: "Get the delegation count for a subnet."
            operationId: "getDelegatorCount"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "network"
                  in: "path"
                  description: "Network type"
                  required: true
                  schema: {"$ref": "#/components/schemas/LegacyNetworks"}
                  example: "mainnet"
                - name: "subnetID"
                  in: "path"
                  description: "The subnet ID for Avalanche primary network."
                  required: true
                  schema:
                    type: "string"
                  example: "11111111111111111111111111111111LpoYY"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/StakingInformationResponse"}
            x-speakeasy-group: "metrics.stakingInformation"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "startKey", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageStartKey"}}
            servers:
                - url: "http://localhost:3001"
    /v1/delegators/network/{network}/subnetId/{subnetID}/weight:
        get:
            tags:
                - "Staking Information"
            summary: "Get delegation weight by subnet id"
            description: "Get the delegation for a subnet."
            operationId: "getDelegatorWeight"
            parameters:
                - name: "from"
                  in: "query"
                  description: "From date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1654819200
                - name: "to"
                  in: "query"
                  description: "To date in UNIX Timestamp."
                  required: false
                  schema:
                    type: "string"
                  example: 1655424000
                - name: "startKey"
                  in: "query"
                  description: "For paginated responses. Value will be provided in the [nextPageStartKey] field in the response if the query has more than one page."
                  required: false
                  schema:
                    type: "string"
                - name: "network"
                  in: "path"
                  description: "Network type"
                  required: true
                  schema: {"$ref": "#/components/schemas/LegacyNetworks"}
                  example: "mainnet"
                - name: "subnetID"
                  in: "path"
                  description: "The subnet ID for Avalanche primary network."
                  required: true
                  schema:
                    type: "string"
                  example: "11111111111111111111111111111111LpoYY"
            responses:
                "200":
                    content:
                        "application/json":
                            schema: {"$ref": "#/components/schemas/StakingInformationResponse"}
            x-speakeasy-group: "metrics.stakingInformation"
            x-speakeasy-pagination: {"type": "cursor", "inputs": [{"name": "startKey", "in": "parameters", "type": "cursor"}], "outputs": {"nextCursor": "$.nextPageStartKey"}}
            servers:
                - url: "http://localhost:3001"
components:
    schemas:
        "NftTokenMetadataStatus":
            type: "string"
            enum:
                - "UNKNOWN"
                - "MISSING_TOKEN"
                - "INVALID_TOKEN_URI"
                - "INVALID_TOKEN_URI_SCHEME"
                - "UNREACHABLE_TOKEN_URI"
                - "THROTTLED_TOKEN_URI"
                - "METADATA_CONTENT_TOO_LARGE"
                - "INVALID_METADATA"
                - "INVALID_METADATA_JSON"
                - "INDEXED"
                - "UNINDEXED"
            description: "The metadata indexing status of the nft."
        "Erc721TokenMetadata":
            type: "object"
            properties:
                "indexStatus": {"example": "indexed", "$ref": "#/components/schemas/NftTokenMetadataStatus"}
                "metadataLastUpdatedTimestamp":
                    type: "number"
                "name":
                    type: "string"
                "symbol":
                    type: "string"
                "imageUri":
                    type: "string"
                "description":
                    type: "string"
                "animationUri":
                    type: "string"
                "externalUrl":
                    type: "string"
                "background":
                    type: "string"
                "attributes":
                    type: "string"
            required:
                - "indexStatus"
        "Erc721Token":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-721"
                "tokenId":
                    type: "string"
                "tokenUri":
                    type: "string"
                "metadata": {"$ref": "#/components/schemas/Erc721TokenMetadata"}
                "ownerAddress":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            required:
                - "address"
                - "name"
                - "symbol"
                - "ercType"
                - "tokenId"
                - "tokenUri"
                - "metadata"
        "Erc1155TokenMetadata":
            type: "object"
            properties:
                "indexStatus": {"example": "indexed", "$ref": "#/components/schemas/NftTokenMetadataStatus"}
                "metadataLastUpdatedTimestamp":
                    type: "number"
                "name":
                    type: "string"
                "symbol":
                    type: "string"
                "imageUri":
                    type: "string"
                "description":
                    type: "string"
                "animationUri":
                    type: "string"
                "externalUrl":
                    type: "string"
                "background":
                    type: "string"
                "decimals":
                    type: "number"
                "properties":
                    type: "string"
            required:
                - "indexStatus"
        "Erc1155Token":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-1155"
                "tokenId":
                    type: "string"
                "tokenUri":
                    type: "string"
                "metadata": {"$ref": "#/components/schemas/Erc1155TokenMetadata"}
            required:
                - "address"
                - "ercType"
                - "tokenId"
                - "tokenUri"
                - "metadata"
        "ListNftTokens":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "tokens":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/Erc721Token"}
                            - {"$ref": "#/components/schemas/Erc1155Token"}
            required:
                - "tokens"
        "OperationStatusCode":
            type: "string"
            enum:
                - "ErrInvalidRequest"
                - "ErrInternal"
                - "WarnTruncatedExport"
        "TransactionExportMetadata":
            type: "object"
            properties:
                "code": {"$ref": "#/components/schemas/OperationStatusCode"}
                "downloadUrl":
                    type: "string"
                    description: "File download URL. Provided only for COMPLETED and COMPLETED_WITH_WARNING operations."
                "nextDate":
                    type: "string"
                    description: "The next date (YYYY-MM-DD) to use as the firstDate in follow up requests if a request results in a transaction history exceeding the max size and has been reported as `COMPLETED_WITH_WARNING` with the warning 'WarnTruncatedExport'."
        "OperationType":
            type: "string"
            enum:
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK"
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING"
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK_SIMPLE"
                - "TRANSACTION_EXPORT_EVM"
        "OperationStatus":
            type: "string"
            enum:
                - "RUNNING"
                - "COMPLETED"
                - "COMPLETED_WITH_WARNING"
                - "FAILED"
        "OperationStatusResponse":
            type: "object"
            properties:
                "operationId":
                    type: "string"
                "operationType": {"$ref": "#/components/schemas/OperationType"}
                "operationStatus": {"$ref": "#/components/schemas/OperationStatus"}
                "message":
                    type: "string"
                "metadata":
                    oneOf:
                        - {"$ref": "#/components/schemas/TransactionExportMetadata"}
                "createdAtTimestamp":
                    type: "number"
                "updatedAtTimestamp":
                    type: "number"
            required:
                - "operationId"
                - "operationType"
                - "operationStatus"
                - "metadata"
                - "createdAtTimestamp"
                - "updatedAtTimestamp"
        "EVMOperationType":
            type: "string"
            enum:
                - "TRANSACTION_EXPORT_EVM"
        "EvmNetworkOptions":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                "includeChains":
                    type: "array"
                    items:
                        type: "string"
                    example: ["43114"]
            required:
                - "addresses"
                - "includeChains"
        "CreateEvmTransactionExportRequest":
            type: "object"
            properties:
                "type": {"$ref": "#/components/schemas/EVMOperationType"}
                "firstDate":
                    type: "string"
                    example: "2023-05-01"
                "lastDate":
                    type: "string"
                    example: "2023-05-02"
                "startDate":
                    type: "string"
                    example: "2023-05-01"
                    deprecated: true
                "endDate":
                    type: "string"
                    example: "2023-05-02"
                    deprecated: true
                "options": {"$ref": "#/components/schemas/EvmNetworkOptions"}
            required:
                - "type"
                - "firstDate"
                - "lastDate"
                - "startDate"
                - "endDate"
                - "options"
        "PrimaryNetworkOperationType":
            type: "string"
            enum:
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK"
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING"
                - "TRANSACTION_EXPORT_PRIMARY_NETWORK_SIMPLE"
        "PrimaryNetworkOptions":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                "cChainEvmAddresses":
                    type: "array"
                    items:
                        type: "string"
                "includeChains":
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "11111111111111111111111111111111LpoYY"
                            - "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                            - "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm"
                            - "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5"
                            - "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
                            - "p-chain"
                            - "x-chain"
                            - "c-chain"
                    example: ["p-chain"]
            required:
                - "includeChains"
        "CreatePrimaryNetworkTransactionExportRequest":
            type: "object"
            properties:
                "type": {"$ref": "#/components/schemas/PrimaryNetworkOperationType"}
                "firstDate":
                    type: "string"
                    example: "2023-05-01"
                "lastDate":
                    type: "string"
                    example: "2023-05-02"
                "startDate":
                    type: "string"
                    example: "2023-05-01"
                    deprecated: true
                "endDate":
                    type: "string"
                    example: "2023-05-02"
                    deprecated: true
                "options": {"$ref": "#/components/schemas/PrimaryNetworkOptions"}
            required:
                - "type"
                - "firstDate"
                - "lastDate"
                - "startDate"
                - "endDate"
                - "options"
        "PChainTransactionType":
            type: "string"
            enum:
                - "AddValidatorTx"
                - "AddSubnetValidatorTx"
                - "AddDelegatorTx"
                - "CreateChainTx"
                - "CreateSubnetTx"
                - "ImportTx"
                - "ExportTx"
                - "AdvanceTimeTx"
                - "RewardValidatorTx"
                - "RemoveSubnetValidatorTx"
                - "TransformSubnetTx"
                - "AddPermissionlessValidatorTx"
                - "AddPermissionlessDelegatorTx"
                - "BaseTx"
                - "TransferSubnetOwnershipTx"
                - "UNKNOWN"
        "PrimaryNetworkAssetType":
            type: "string"
            enum:
                - "secp256k1"
                - "nft"
            description: "Type of asset like SECP256K1 or NFT."
        "AssetAmount":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
        "RewardType":
            type: "string"
            enum:
                - "VALIDATOR"
                - "DELEGATOR"
                - "VALIDATOR_FEE"
        "UtxoType":
            type: "string"
            enum:
                - "STAKE"
                - "TRANSFER"
        "PChainUtxo":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                    description: "Addresses that are eligible to sign the consumption of this output."
                    example: ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]
                "asset": {"$ref": "#/components/schemas/AssetAmount"}
                "consumedOnChainId":
                    type: "string"
                    description: "Blockchain ID on which this output is consumed on."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "consumingTxHash":
                    type: "string"
                    description: "Transaction ID that consumed this output."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "createdOnChainId":
                    type: "string"
                    description: "Blockchain ID on which this output is created on."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "utxoId":
                    type: "string"
                    description: "UTXO ID for this output."
                    example: "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC"
                "amount":
                    type: "string"
                    deprecated: true
                "assetId":
                    type: "string"
                    deprecated: true
                "blockNumber":
                    type: "string"
                "blockTimestamp":
                    type: "number"
                "consumingBlockNumber":
                    type: "string"
                "consumingBlockTimestamp":
                    type: "number"
                "platformLocktime":
                    type: "number"
                "outputIndex":
                    type: "number"
                "rewardType": {"$ref": "#/components/schemas/RewardType"}
                "stakeableLocktime":
                    type: "number"
                "staked":
                    type: "boolean"
                "threshold":
                    type: "number"
                "txHash":
                    type: "string"
                "utxoEndTimestamp":
                    type: "number"
                "utxoStartTimestamp":
                    type: "number"
                "utxoType": {"$ref": "#/components/schemas/UtxoType"}
            required:
                - "addresses"
                - "asset"
                - "consumedOnChainId"
                - "createdOnChainId"
                - "utxoId"
                - "amount"
                - "assetId"
                - "blockNumber"
                - "blockTimestamp"
                - "outputIndex"
                - "txHash"
                - "utxoType"
        "SubnetOwnershipInfo":
            type: "object"
            properties:
                "locktime":
                    type: "number"
                    description: "Locktime in seconds after which Subnet owners can control this Subnet."
                    example: 0
                "threshold":
                    type: "number"
                    description: "Minimum number of signatures required to sign the Subnet update transactions."
                    example: 1
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                    description: "Addresses that are eligible to sign the Subnet update transactions."
                    example: ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]
            required:
                - "locktime"
                - "threshold"
                - "addresses"
        "BlsCredentials":
            type: "object"
            properties:
                "publicKey":
                    type: "string"
                "proofOfPossession":
                    type: "string"
            required:
                - "publicKey"
                - "proofOfPossession"
        "PChainTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                    description: "A P-Chain transaction hash."
                    example: "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP"
                "txType": {"example": "AddDelegatorTx", "$ref": "#/components/schemas/PChainTransactionType"}
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockNumber":
                    type: "string"
                "blockHash":
                    type: "string"
                "consumedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainUtxo"}
                "emittedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainUtxo"}
                "sourceChain":
                    type: "string"
                    description: "Source chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "destinationChain":
                    type: "string"
                    description: "Destination chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "value":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                    description: "A list of objects containing P-chain Asset basic info and the amount of that Asset ID."
                "amountBurned":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                    description: "A list of objects containing P-chain Asset basic info and the amount of that Asset ID."
                "amountStaked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                    description: "A list of objects containing P-chain Asset basic info and the amount of that Asset ID. Present for AddValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
                "startTimestamp":
                    type: "number"
                    description: "Present for AddValidatorTx, AddSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
                "endTimestamp":
                    type: "number"
                    description: "Present for AddValidatorTx, AddSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
                "delegationFeePercent":
                    type: "string"
                    description: "Present for AddValidatorTx, AddPermissionlessValidatorTx"
                "nodeId":
                    type: "string"
                    description: "Present for AddValidatorTx, AddSubnetValidatorTx, RemoveSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
                "subnetId":
                    type: "string"
                    description: "Present for AddValidatorTx, AddSubnetValidatorTx, RemoveSubnetValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx, CreateChainTx, CreateSubnetTx"
                "estimatedReward":
                    type: "string"
                    description: "Present for AddValidatorTx, AddPermissionlessValidatorTx, AddDelegatorTx"
                "rewardTxHash":
                    type: "string"
                "rewardAddresses":
                    type: "array"
                    items:
                        type: "string"
                "memo":
                    type: "string"
                "stakingTxHash":
                    type: "string"
                    description: "Present for RewardValidatorTx"
                "subnetOwnershipInfo":
                    allOf:
                        - {"$ref": "#/components/schemas/SubnetOwnershipInfo"}
                    description: "Subnet owner details for the CreateSubnetTx or TransferSubnetOwnershipTx"
                "blsCredentials":
                    allOf:
                        - {"$ref": "#/components/schemas/BlsCredentials"}
                    description: "Present for AddPermissionlessValidatorTx"
            required:
                - "txHash"
                - "txType"
                - "blockTimestamp"
                - "blockNumber"
                - "blockHash"
                - "consumedUtxos"
                - "emittedUtxos"
                - "value"
                - "amountBurned"
                - "amountStaked"
        "XChainTransactionType":
            type: "string"
            enum:
                - "BaseTx"
                - "CreateAssetTx"
                - "OperationTx"
                - "ImportTx"
                - "ExportTx"
                - "UNKNOWN"
            description: "Type of transaction."
        "UtxoCredential":
            type: "object"
            properties:
                "signature":
                    type: "string"
                    description: "Signature provided to consume the output."
                    example: "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA"
                "publicKey":
                    type: "string"
                    description: "Public key associated with the signature."
                    example: "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"
        "Utxo":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                    description: "Addresses that are eligible to sign the consumption of this output."
                    example: ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]
                "asset": {"$ref": "#/components/schemas/AssetAmount"}
                "consumedOnChainId":
                    type: "string"
                    description: "Blockchain ID on which this output is consumed on."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "consumingTxHash":
                    type: "string"
                    description: "Transaction ID that consumed this output."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "createdOnChainId":
                    type: "string"
                    description: "Blockchain ID on which this output is created on."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "utxoId":
                    type: "string"
                    description: "UTXO ID for this output."
                    example: "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC"
                "consumingTxTimestamp":
                    type: "number"
                    description: "Unix timestamp in seconds at which this output was consumed."
                    example: 1599696000
                "creationTxHash":
                    type: "string"
                    description: "Transaction ID that created this output."
                    example: "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z"
                "credentials":
                    type: "array"
                    items: {"$ref": "#/components/schemas/UtxoCredential"}
                    description: "Credentials that signed the transaction to consume this utxo"
                "groupId":
                    type: "number"
                    description: "Index representing the minting set for the NFT mint output."
                "locktime":
                    type: "number"
                    description: "Locktime in seconds after which this output can be consumed."
                    example: 0
                "outputIndex":
                    type: "string"
                    description: "Postion of this output in a list of lexiographically sorted outputs of a transaction."
                    example: "38"
                "payload":
                    type: "string"
                    description: "Hex encoded data for NFT assets."
                "threshold":
                    type: "number"
                    description: "Minimum number of signatures required to consume this output."
                    example: 1
                "timestamp":
                    type: "number"
                    description: "Unix timestamp in seconds at which this outptut was created."
                    example: 1599696000
                "utxoType":
                    type: "string"
                    description: "Type of output."
                    example: "mint"
            required:
                - "addresses"
                - "asset"
                - "consumedOnChainId"
                - "createdOnChainId"
                - "utxoId"
                - "creationTxHash"
                - "locktime"
                - "outputIndex"
                - "threshold"
                - "timestamp"
                - "utxoType"
        "PrimaryNetworkAssetCap":
            type: "string"
            enum:
                - "fixed"
                - "variable"
            description: "Cap represents if an asset is a variable or fixed cap asset."
        "XChainAssetDetails":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "createdAtTimestamp":
                    type: "number"
                    description: "Timestamp in seconds this asset was created on."
                    example: 1675444720
                "cap": {"example": "fixed", "$ref": "#/components/schemas/PrimaryNetworkAssetCap"}
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "createdAtTimestamp"
                - "cap"
        "TransactionVertexDetail":
            type: "object"
            properties:
                "hash":
                    type: "string"
                    description: "Vertex ID of the vertex this transaction belongs to."
                    example: "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S"
                "height":
                    type: "number"
                    description: "Vertex height of the vertex this transaction belongs to."
                    example: 1961
                "timestamp":
                    type: "number"
                    description: "Timestamp in seconds this vertex was accepted."
                    example: 1600762738
            required:
                - "hash"
                - "height"
                - "timestamp"
        "XChainNonLinearTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                    description: "Unique ID for this transaction."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "chainFormat":
                    type: "string"
                    enum:
                        - "non-linear"
                        - "linear"
                    description: "Represents chain format this transaction is included in."
                    example: "non-linear"
                "timestamp":
                    type: "number"
                    description: "Latest timestamp in seconds this transaction was accepted out of the same transaction accepted in other vertices."
                    example: 1600762738
                "txType": {"example": "BaseTx", "$ref": "#/components/schemas/XChainTransactionType"}
                "memo":
                    type: "string"
                    description: "Hex encoded memo bytes for this transaction."
                    example: "0x546865204176616c616e6368652050726f6a656374"
                "consumedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
                "emittedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
                "amountUnlocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                    description: "Assets unlocked by inputs of this transaction."
                "amountCreated":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                    description: "Assets created by outputs of this transaction."
                "sourceChain":
                    type: "string"
                    description: "Source chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "destinationChain":
                    type: "string"
                    description: "Destination chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "assetCreated":
                    allOf:
                        - {"$ref": "#/components/schemas/XChainAssetDetails"}
                    description: "AssetAmount details of the asset created in CreateAssetTx"
                "vertices":
                    type: "array"
                    items: {"$ref": "#/components/schemas/TransactionVertexDetail"}
                    description: "A transaction on X-Chain can be accepted over multiple vertices."
            required:
                - "txHash"
                - "chainFormat"
                - "timestamp"
                - "txType"
                - "memo"
                - "consumedUtxos"
                - "emittedUtxos"
                - "amountUnlocked"
                - "amountCreated"
                - "vertices"
        "XChainLinearTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                    description: "Unique ID for this transaction."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "chainFormat":
                    type: "string"
                    enum:
                        - "non-linear"
                        - "linear"
                    description: "Represents chain format this transaction is included in."
                    example: "non-linear"
                "timestamp":
                    type: "number"
                    description: "Latest timestamp in seconds this transaction was accepted out of the same transaction accepted in other vertices."
                    example: 1600762738
                "txType": {"example": "BaseTx", "$ref": "#/components/schemas/XChainTransactionType"}
                "memo":
                    type: "string"
                    description: "Hex encoded memo bytes for this transaction."
                    example: "0x546865204176616c616e6368652050726f6a656374"
                "consumedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
                "emittedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
                "amountUnlocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                    description: "Assets unlocked by inputs of this transaction."
                "amountCreated":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                    description: "Assets created by outputs of this transaction."
                "sourceChain":
                    type: "string"
                    description: "Source chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "destinationChain":
                    type: "string"
                    description: "Destination chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "assetCreated":
                    allOf:
                        - {"$ref": "#/components/schemas/XChainAssetDetails"}
                    description: "AssetAmount details of the asset created in CreateAssetTx"
                "blockHeight":
                    type: "number"
                    description: "Height of the block this transaction belongs to."
                    example: 1005
                "blockHash":
                    type: "string"
                    description: "Hash of the block this transaction belongs to."
                    example: "82qPRREHmh8Cfta4PGD6GymY9ZLyvgYugqW6hj9FykpMVRz1S"
            required:
                - "txHash"
                - "chainFormat"
                - "timestamp"
                - "txType"
                - "memo"
                - "consumedUtxos"
                - "emittedUtxos"
                - "amountUnlocked"
                - "amountCreated"
                - "blockHeight"
                - "blockHash"
        "EVMInput":
            type: "object"
            properties:
                "fromAddress":
                    type: "string"
                    description: "EVM address from which the asset is exported in ExportTx."
                    example: "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c"
                "asset":
                    allOf:
                        - {"$ref": "#/components/schemas/AssetAmount"}
                    description: "AssetAmount details for the asset being transferred."
                "credentials":
                    type: "array"
                    items: {"$ref": "#/components/schemas/UtxoCredential"}
                    description: "Credentials that signed this transaction."
            required:
                - "fromAddress"
                - "asset"
                - "credentials"
        "CChainExportTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                    description: "Unique ID for this transaction."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "blockHeight":
                    type: "number"
                    description: "Height of the block this transaction belongs to."
                    example: 1005
                "blockHash":
                    type: "string"
                    description: "Hash of the block this transaction belongs to."
                    example: "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee"
                "timestamp":
                    type: "number"
                    description: "Latest timestamp in seconds this transaction was accepted."
                    example: 1600762738
                "memo":
                    type: "string"
                    description: "Hex encoded memo bytes for this transaction."
                    example: "0x546865204176616c616e6368652050726f6a656374"
                "amountUnlocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                    description: "Assets unlocked by inputs of this transaction."
                "amountCreated":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                    description: "Assets created by outputs of this transaction."
                "sourceChain":
                    type: "string"
                    description: "Source chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "destinationChain":
                    type: "string"
                    description: "Destination chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "txType":
                    type: "string"
                    enum:
                        - "ExportTx"
                    description: "Type of transaction."
                    example: "ExportTx"
                "evmInputs":
                    type: "array"
                    items: {"$ref": "#/components/schemas/EVMInput"}
                "emittedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
            required:
                - "txHash"
                - "blockHeight"
                - "blockHash"
                - "timestamp"
                - "memo"
                - "amountUnlocked"
                - "amountCreated"
                - "sourceChain"
                - "destinationChain"
                - "txType"
                - "evmInputs"
                - "emittedUtxos"
        "EVMOutput":
            type: "object"
            properties:
                "toAddress":
                    type: "string"
                    description: "EVM address to which the asset is imported in ImportTx"
                    example: "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c"
                "asset":
                    allOf:
                        - {"$ref": "#/components/schemas/AssetAmount"}
                    description: "AssetAmount details for the asset being transferred."
            required:
                - "toAddress"
                - "asset"
        "CChainImportTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                    description: "Unique ID for this transaction."
                    example: "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c"
                "blockHeight":
                    type: "number"
                    description: "Height of the block this transaction belongs to."
                    example: 1005
                "blockHash":
                    type: "string"
                    description: "Hash of the block this transaction belongs to."
                    example: "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee"
                "timestamp":
                    type: "number"
                    description: "Latest timestamp in seconds this transaction was accepted."
                    example: 1600762738
                "memo":
                    type: "string"
                    description: "Hex encoded memo bytes for this transaction."
                    example: "0x546865204176616c616e6368652050726f6a656374"
                "amountUnlocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                    description: "Assets unlocked by inputs of this transaction."
                "amountCreated":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AssetAmount"}
                    description: "Assets created by outputs of this transaction."
                "sourceChain":
                    type: "string"
                    description: "Source chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "destinationChain":
                    type: "string"
                    description: "Destination chain for an atomic transaction."
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "txType":
                    type: "string"
                    enum:
                        - "ImportTx"
                    description: "Type of transaction."
                    example: "ImportTx"
                "evmOutputs":
                    type: "array"
                    items: {"$ref": "#/components/schemas/EVMOutput"}
                "consumedUtxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
            required:
                - "txHash"
                - "blockHeight"
                - "blockHash"
                - "timestamp"
                - "memo"
                - "amountUnlocked"
                - "amountCreated"
                - "sourceChain"
                - "destinationChain"
                - "txType"
                - "evmOutputs"
                - "consumedUtxos"
        "BlockchainId":
            type: "string"
            enum:
                - "11111111111111111111111111111111LpoYY"
                - "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                - "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm"
                - "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5"
                - "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
                - "p-chain"
                - "x-chain"
                - "c-chain"
        "Network":
            type: "string"
            enum:
                - "mainnet"
                - "fuji"
        "PrimaryNetworkChainName":
            type: "string"
            enum:
                - "p-chain"
                - "x-chain"
                - "c-chain"
        "PrimaryNetwork":
            type: "string"
            enum:
                - "mainnet"
                - "fuji"
        "PrimaryNetworkChainInfo":
            type: "object"
            properties:
                "chainName": {"$ref": "#/components/schemas/PrimaryNetworkChainName"}
                "network": {"$ref": "#/components/schemas/PrimaryNetwork"}
            required:
                - "chainName"
                - "network"
        "ListPChainTransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainTransaction"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "transactions"
                - "chainInfo"
        "ListXChainTransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items:
                        anyOf:
                            - {"$ref": "#/components/schemas/XChainNonLinearTransaction"}
                            - {"$ref": "#/components/schemas/XChainLinearTransaction"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "transactions"
                - "chainInfo"
        "ListCChainAtomicTransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items:
                        anyOf:
                            - {"$ref": "#/components/schemas/CChainExportTransaction"}
                            - {"$ref": "#/components/schemas/CChainImportTransaction"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "transactions"
                - "chainInfo"
        "PrimaryNetworkTxType":
            type: "string"
            enum:
                - "AddValidatorTx"
                - "AddSubnetValidatorTx"
                - "AddDelegatorTx"
                - "CreateChainTx"
                - "CreateSubnetTx"
                - "ImportTx"
                - "ExportTx"
                - "AdvanceTimeTx"
                - "RewardValidatorTx"
                - "RemoveSubnetValidatorTx"
                - "TransformSubnetTx"
                - "AddPermissionlessValidatorTx"
                - "AddPermissionlessDelegatorTx"
                - "BaseTx"
                - "TransferSubnetOwnershipTx"
                - "UNKNOWN"
                - "CreateAssetTx"
                - "OperationTx"
        "SortOrder":
            type: "string"
            enum:
                - "asc"
                - "desc"
        "PChainId":
            type: "string"
            enum:
                - "11111111111111111111111111111111LpoYY"
                - "p-chain"
        "PendingReward":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                    description: "An array of P-Chain wallet addresses."
                    example: ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"]
                "txHash":
                    type: "string"
                "amountStaked":
                    type: "string"
                "nodeId":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "rewardType": {"$ref": "#/components/schemas/RewardType"}
                "progress":
                    type: "number"
                "estimatedReward":
                    allOf:
                        - {"$ref": "#/components/schemas/AssetAmount"}
                    description: "An object containing P-chain Asset basic info and the amount of that Asset ID."
            required:
                - "addresses"
                - "txHash"
                - "amountStaked"
                - "nodeId"
                - "startTimestamp"
                - "endTimestamp"
                - "rewardType"
                - "progress"
                - "estimatedReward"
        "ListPendingRewardsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "pendingRewards":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PendingReward"}
            required:
                - "pendingRewards"
        "CurrencyCode":
            type: "string"
            enum:
                - "usd"
                - "eur"
                - "aud"
                - "cad"
                - "chf"
                - "clp"
                - "cny"
                - "czk"
                - "dkk"
                - "gbp"
                - "hkd"
                - "huf"
                - "jpy"
                - "nzd"
            description: "ISO 4217 currency code."
        "Money":
            type: "object"
            properties:
                "currencyCode": {"example": "usd", "$ref": "#/components/schemas/CurrencyCode"}
                "value":
                    type: "number"
                    description: "Monetary value in base 10 decimals."
                    example: "42.42"
            required:
                - "currencyCode"
                - "value"
        "AssetWithPriceInfo":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
                "historicalPrice":
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                    description: "The historical asset price at the time the reward was granted, if available. Note, this is only provided if the reward occured more than 24 hours ago."
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
        "HistoricalReward":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                    description: "An array of P-Chain wallet addresses."
                    example: ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"]
                "txHash":
                    type: "string"
                "amountStaked":
                    type: "string"
                "nodeId":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "rewardType": {"$ref": "#/components/schemas/RewardType"}
                "utxoId":
                    type: "string"
                "outputIndex":
                    type: "number"
                "reward": {"$ref": "#/components/schemas/AssetWithPriceInfo"}
                "rewardTxHash":
                    type: "string"
            required:
                - "addresses"
                - "txHash"
                - "amountStaked"
                - "nodeId"
                - "startTimestamp"
                - "endTimestamp"
                - "rewardType"
                - "utxoId"
                - "outputIndex"
                - "reward"
                - "rewardTxHash"
        "ListHistoricalRewardsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "historicalRewards":
                    type: "array"
                    items: {"$ref": "#/components/schemas/HistoricalReward"}
            required:
                - "historicalRewards"
        "ListPChainUtxosResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "utxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainUtxo"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "utxos"
                - "chainInfo"
        "ListUtxosResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "utxos":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Utxo"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "utxos"
                - "chainInfo"
        "AggregatedAssetAmount":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
                "utxoCount":
                    type: "number"
                    example: 1
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
                - "utxoCount"
        "PChainSharedAsset":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
                "utxoCount":
                    type: "number"
                    example: 1
                "sharedWithChainId":
                    type: "string"
                    example: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                "status":
                    type: "string"
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
                - "utxoCount"
                - "sharedWithChainId"
                - "status"
        "PChainBalance":
            type: "object"
            properties:
                "unlockedUnstaked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of unstaked Avax that is consumable by any transaction."
                "unlockedStaked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of staked Avax that is consumable by any transaction when the staking period ends."
                "lockedPlatform":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of unstaked Avax that is locked at the platform level and not consumable by any transaction at the current time."
                "lockedStakeable":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of unstaked Avax that is locked at the platform level and only consumeable for staking transactions."
                "lockedStaked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of staked Avax that will be locked when the staking period ends."
                "pendingStaked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                    description: "A list of objects containing P-chain Asset basic info, amount,  and utxo count of that Asset ID.  Denotes the amount of staked Avax whose staking period has not yet started."
                "atomicMemoryUnlocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainSharedAsset"}
                    description: "A list of objects containing P-chain Asset basic info, amount and utxo count of that Asset ID. Denotes the amount of unlocked Avax in the atomic memory between P-Chain and other chain."
                "atomicMemoryLocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PChainSharedAsset"}
                    description: "A list of objects containing P-chain Asset basic info, amount and utxo count of that Asset ID. Denotes the amount of locked Avax in the atomic memory between P-Chain and other chain."
            required:
                - "unlockedUnstaked"
                - "unlockedStaked"
                - "lockedPlatform"
                - "lockedStakeable"
                - "lockedStaked"
                - "pendingStaked"
                - "atomicMemoryUnlocked"
                - "atomicMemoryLocked"
        "ListPChainBalancesResponse":
            type: "object"
            properties:
                "balances": {"$ref": "#/components/schemas/PChainBalance"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "balances"
                - "chainInfo"
        "XChainSharedAssetBalance":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
                "utxoCount":
                    type: "number"
                    example: 1
                "sharedWithChainId":
                    type: "string"
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
                - "utxoCount"
                - "sharedWithChainId"
        "XChainBalances":
            type: "object"
            properties:
                "locked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                    description: "A list of objects containing X-chain Asset balance information."
                "unlocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/AggregatedAssetAmount"}
                    description: "A list of objects containing X-chain Asset balance information."
                "atomicMemoryUnlocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/XChainSharedAssetBalance"}
                "atomicMemoryLocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/XChainSharedAssetBalance"}
            required:
                - "locked"
                - "unlocked"
                - "atomicMemoryUnlocked"
                - "atomicMemoryLocked"
        "ListXChainBalancesResponse":
            type: "object"
            properties:
                "balances": {"$ref": "#/components/schemas/XChainBalances"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "balances"
                - "chainInfo"
        "CChainSharedAssetBalance":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                    description: "Unique ID for an asset."
                    example: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
                "name":
                    type: "string"
                    description: "Name of this asset."
                    example: "Avalanche"
                "symbol":
                    type: "string"
                    description: "Symbol for this asset (max 4 characters)."
                    example: "AVAX"
                "denomination":
                    type: "number"
                    description: "Denomination of this asset to represent fungibility."
                    example: 9
                "type": {"example": "secp256k1", "$ref": "#/components/schemas/PrimaryNetworkAssetType"}
                "amount":
                    type: "string"
                    description: "Amount of the asset."
                    example: "5001000"
                "utxoCount":
                    type: "number"
                    example: 1
                "sharedWithChainId":
                    type: "string"
            required:
                - "assetId"
                - "name"
                - "symbol"
                - "denomination"
                - "type"
                - "amount"
                - "utxoCount"
                - "sharedWithChainId"
        "CChainAtomicBalances":
            type: "object"
            properties:
                "atomicMemoryUnlocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/CChainSharedAssetBalance"}
                "atomicMemoryLocked":
                    type: "array"
                    items: {"$ref": "#/components/schemas/CChainSharedAssetBalance"}
            required:
                - "atomicMemoryUnlocked"
                - "atomicMemoryLocked"
        "ListCChainAtomicBalancesResponse":
            type: "object"
            properties:
                "balances": {"$ref": "#/components/schemas/CChainAtomicBalances"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "balances"
                - "chainInfo"
        "ProposerDetails":
            type: "object"
            properties:
                "proposerId":
                    type: "string"
                "proposerParentId":
                    type: "string"
                "proposerNodeId":
                    type: "string"
                "proposerPChainHeight":
                    type: "number"
                "proposerTimestamp":
                    type: "number"
        "GetPrimaryNetworkBlockResponse":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                "blockHash":
                    type: "string"
                "parentHash":
                    type: "string"
                "blockTimestamp":
                    type: "number"
                "blockType":
                    type: "string"
                "txCount":
                    type: "number"
                "transactions":
                    type: "array"
                    items:
                        type: "string"
                "blockSizeBytes":
                    type: "number"
                "currentSupply":
                    type: "string"
                "proposerDetails": {"$ref": "#/components/schemas/ProposerDetails"}
            required:
                - "blockNumber"
                - "blockHash"
                - "parentHash"
                - "blockTimestamp"
                - "blockType"
                - "txCount"
                - "transactions"
                - "blockSizeBytes"
        "PrimaryNetworkBlock":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                "blockHash":
                    type: "string"
                "parentHash":
                    type: "string"
                "blockTimestamp":
                    type: "number"
                "blockType":
                    type: "string"
                "txCount":
                    type: "number"
                "transactions":
                    type: "array"
                    items:
                        type: "string"
                "blockSizeBytes":
                    type: "number"
                "currentSupply":
                    type: "string"
                "proposerDetails": {"$ref": "#/components/schemas/ProposerDetails"}
            required:
                - "blockNumber"
                - "blockHash"
                - "parentHash"
                - "blockTimestamp"
                - "blockType"
                - "txCount"
                - "transactions"
                - "blockSizeBytes"
        "ListPrimaryNetworkBlocksResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "blocks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/PrimaryNetworkBlock"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "blocks"
                - "chainInfo"
        "XChainId":
            type: "string"
            enum:
                - "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                - "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm"
                - "x-chain"
        "XChainVertex":
            type: "object"
            properties:
                "vertexHash":
                    type: "string"
                "parentHashes":
                    type: "array"
                    items:
                        type: "string"
                "vertexHeight":
                    type: "number"
                "vertexIndex":
                    type: "number"
                "vertexTimestamp":
                    type: "number"
                "txCount":
                    type: "number"
                "transactions":
                    type: "array"
                    items:
                        type: "string"
                "vertexSizeBytes":
                    type: "number"
            required:
                - "vertexHash"
                - "parentHashes"
                - "vertexHeight"
                - "vertexIndex"
                - "vertexTimestamp"
                - "txCount"
                - "transactions"
                - "vertexSizeBytes"
        "ListXChainVerticesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "vertices":
                    type: "array"
                    items: {"$ref": "#/components/schemas/XChainVertex"}
                "chainInfo": {"$ref": "#/components/schemas/PrimaryNetworkChainInfo"}
            required:
                - "vertices"
                - "chainInfo"
        "BlockchainIds":
            type: "string"
            enum:
                - "11111111111111111111111111111111LpoYY"
                - "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM"
                - "2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm"
                - "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5"
                - "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
        "ChainAddressChainIdMap":
            type: "object"
            properties:
                "address":
                    type: "string"
                "blockchainIds":
                    type: "array"
                    items: {"$ref": "#/components/schemas/BlockchainIds"}
            required:
                - "address"
                - "blockchainIds"
        "ChainAddressChainIdMapListResponse":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ChainAddressChainIdMap"}
            required:
                - "addresses"
        "StakingDistribution":
            type: "object"
            properties:
                "version":
                    type: "string"
                "amountStaked":
                    type: "string"
                "validatorCount":
                    type: "number"
            required:
                - "version"
                - "amountStaked"
                - "validatorCount"
        "ValidatorsDetails":
            type: "object"
            properties:
                "validatorCount":
                    type: "number"
                "totalAmountStaked":
                    type: "string"
                "estimatedAnnualStakingReward":
                    type: "string"
                "stakingDistributionByVersion":
                    type: "array"
                    items: {"$ref": "#/components/schemas/StakingDistribution"}
                "stakingRatio":
                    type: "string"
            required:
                - "validatorCount"
                - "totalAmountStaked"
                - "estimatedAnnualStakingReward"
                - "stakingDistributionByVersion"
                - "stakingRatio"
        "DelegatorsDetails":
            type: "object"
            properties:
                "delegatorCount":
                    type: "number"
                "totalAmountStaked":
                    type: "string"
            required:
                - "delegatorCount"
                - "totalAmountStaked"
        "GetNetworkDetailsResponse":
            type: "object"
            properties:
                "validatorDetails": {"$ref": "#/components/schemas/ValidatorsDetails"}
                "delegatorDetails": {"$ref": "#/components/schemas/DelegatorsDetails"}
            required:
                - "validatorDetails"
                - "delegatorDetails"
        "Blockchain":
            type: "object"
            properties:
                "createBlockTimestamp":
                    type: "number"
                "createBlockNumber":
                    type: "string"
                "blockchainId":
                    type: "string"
                "vmId":
                    type: "string"
                "subnetId":
                    type: "string"
                "blockchainName":
                    type: "string"
            required:
                - "createBlockTimestamp"
                - "createBlockNumber"
                - "blockchainId"
                - "vmId"
                - "subnetId"
                - "blockchainName"
        "ListBlockchainsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "blockchains":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Blockchain"}
            required:
                - "blockchains"
        "BlockchainInfo":
            type: "object"
            properties:
                "blockchainId":
                    type: "string"
            required:
                - "blockchainId"
        "Subnet":
            type: "object"
            properties:
                "createBlockTimestamp":
                    type: "number"
                "createBlockIndex":
                    type: "string"
                "subnetId":
                    type: "string"
                "ownerAddresses":
                    type: "array"
                    items:
                        type: "string"
                    description: "This field is deprecated. Use subnetOwnershipInfo instead."
                    deprecated: true
                "threshold":
                    type: "number"
                    description: "This field is deprecated. Use subnetOwnershipInfo instead."
                    deprecated: true
                "locktime":
                    type: "number"
                    description: "This field is deprecated. Use subnetOwnershipInfo instead."
                    deprecated: true
                "subnetOwnershipInfo":
                    allOf:
                        - {"$ref": "#/components/schemas/SubnetOwnershipInfo"}
                    description: "Latest subnet owner details for this Subnet."
                "blockchains":
                    type: "array"
                    items: {"$ref": "#/components/schemas/BlockchainInfo"}
            required:
                - "createBlockTimestamp"
                - "createBlockIndex"
                - "subnetId"
                - "ownerAddresses"
                - "threshold"
                - "locktime"
                - "subnetOwnershipInfo"
                - "blockchains"
        "ListSubnetsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "subnets":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Subnet"}
            required:
                - "subnets"
        "SortByOption":
            type: "string"
            enum:
                - "blockIndex"
                - "delegationCapacity"
                - "timeRemaining"
                - "delegationFee"
                - "uptimePerformance"
        "ValidationStatusType":
            type: "string"
            enum:
                - "completed"
                - "active"
                - "pending"
                - "removed"
        "Rewards":
            type: "object"
            properties:
                "validationRewardAmount":
                    type: "string"
                "delegationRewardAmount":
                    type: "string"
                "rewardAddresses":
                    type: "array"
                    items:
                        type: "string"
                "rewardTxHash":
                    type: "string"
            required:
                - "validationRewardAmount"
                - "delegationRewardAmount"
        "CompletedValidatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "subnetId":
                    type: "string"
                "amountStaked":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "blsCredentials":
                    allOf:
                        - {"$ref": "#/components/schemas/BlsCredentials"}
                    description: "Present for AddPermissionlessValidatorTx"
                "delegatorCount":
                    type: "number"
                "rewards": {"$ref": "#/components/schemas/Rewards"}
                "validationStatus":
                    type: "string"
                    enum:
                        - "completed"
            required:
                - "txHash"
                - "nodeId"
                - "subnetId"
                - "amountStaked"
                - "startTimestamp"
                - "endTimestamp"
                - "delegatorCount"
                - "rewards"
                - "validationStatus"
        "ValidatorHealthDetails":
            type: "object"
            properties:
                "reachabilityPercent":
                    type: "number"
                    description: "Percent of requests responded to in last polling."
                "benchedPChainRequestsPercent":
                    type: "number"
                    description: "Percent of requests benched on the P-Chain in last polling."
                "benchedXChainRequestsPercent":
                    type: "number"
                    description: "Percentage of requests benched on the X-Chain in last polling."
                "benchedCChainRequestsPercent":
                    type: "number"
                    description: "Percentage of requests benched on the C-Chain in last polling."
            required:
                - "reachabilityPercent"
                - "benchedPChainRequestsPercent"
                - "benchedXChainRequestsPercent"
                - "benchedCChainRequestsPercent"
        "ActiveValidatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "subnetId":
                    type: "string"
                "amountStaked":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "blsCredentials":
                    allOf:
                        - {"$ref": "#/components/schemas/BlsCredentials"}
                    description: "Present for AddPermissionlessValidatorTx"
                "stakePercentage":
                    type: "number"
                "delegatorCount":
                    type: "number"
                "amountDelegated":
                    type: "string"
                "uptimePerformance":
                    type: "number"
                "avalancheGoVersion":
                    type: "string"
                "delegationCapacity":
                    type: "string"
                "potentialRewards": {"$ref": "#/components/schemas/Rewards"}
                "validationStatus":
                    type: "string"
                    enum:
                        - "active"
                "validatorHealth": {"$ref": "#/components/schemas/ValidatorHealthDetails"}
            required:
                - "txHash"
                - "nodeId"
                - "subnetId"
                - "amountStaked"
                - "startTimestamp"
                - "endTimestamp"
                - "stakePercentage"
                - "delegatorCount"
                - "uptimePerformance"
                - "potentialRewards"
                - "validationStatus"
                - "validatorHealth"
        "PendingValidatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "subnetId":
                    type: "string"
                "amountStaked":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "blsCredentials":
                    allOf:
                        - {"$ref": "#/components/schemas/BlsCredentials"}
                    description: "Present for AddPermissionlessValidatorTx"
                "validationStatus":
                    type: "string"
                    enum:
                        - "pending"
            required:
                - "txHash"
                - "nodeId"
                - "subnetId"
                - "amountStaked"
                - "startTimestamp"
                - "endTimestamp"
                - "validationStatus"
        "RemovedValidatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "subnetId":
                    type: "string"
                "amountStaked":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "blsCredentials":
                    allOf:
                        - {"$ref": "#/components/schemas/BlsCredentials"}
                    description: "Present for AddPermissionlessValidatorTx"
                "removeTxHash":
                    type: "string"
                "removeTimestamp":
                    type: "number"
                "validationStatus":
                    type: "string"
                    enum:
                        - "removed"
            required:
                - "txHash"
                - "nodeId"
                - "subnetId"
                - "amountStaked"
                - "startTimestamp"
                - "endTimestamp"
                - "removeTxHash"
                - "removeTimestamp"
                - "validationStatus"
        "ListValidatorDetailsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "validators":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/CompletedValidatorDetails"}
                            - {"$ref": "#/components/schemas/ActiveValidatorDetails"}
                            - {"$ref": "#/components/schemas/PendingValidatorDetails"}
                            - {"$ref": "#/components/schemas/RemovedValidatorDetails"}
                        discriminator:
                            propertyName: "validationStatus"
                            mapping:
                                "active": "#/components/schemas/ActiveValidatorDetails"
                                "pending": "#/components/schemas/PendingValidatorDetails"
                                "completed": "#/components/schemas/CompletedValidatorDetails"
                                "removed": "#/components/schemas/RemovedValidatorDetails"
                    description: "The list of validator Details."
            required:
                - "validators"
        "DelegationStatusType":
            type: "string"
            enum:
                - "completed"
                - "active"
                - "pending"
        "CompletedDelegatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "rewardAddresses":
                    type: "array"
                    items:
                        type: "string"
                "amountDelegated":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "grossReward":
                    type: "string"
                "netReward":
                    type: "string"
                "delegationStatus":
                    type: "string"
                    enum:
                        - "completed"
            required:
                - "txHash"
                - "nodeId"
                - "rewardAddresses"
                - "amountDelegated"
                - "delegationFee"
                - "startTimestamp"
                - "endTimestamp"
                - "grossReward"
                - "netReward"
                - "delegationStatus"
        "ActiveDelegatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "rewardAddresses":
                    type: "array"
                    items:
                        type: "string"
                "amountDelegated":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "estimatedGrossReward":
                    type: "string"
                "estimatedNetReward":
                    type: "string"
                "delegationStatus":
                    type: "string"
                    enum:
                        - "active"
            required:
                - "txHash"
                - "nodeId"
                - "rewardAddresses"
                - "amountDelegated"
                - "delegationFee"
                - "startTimestamp"
                - "endTimestamp"
                - "estimatedGrossReward"
                - "estimatedNetReward"
                - "delegationStatus"
        "PendingDelegatorDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "nodeId":
                    type: "string"
                "rewardAddresses":
                    type: "array"
                    items:
                        type: "string"
                "amountDelegated":
                    type: "string"
                "delegationFee":
                    type: "string"
                "startTimestamp":
                    type: "number"
                "endTimestamp":
                    type: "number"
                "estimatedGrossReward":
                    type: "string"
                "estimatedNetReward":
                    type: "string"
                "delegationStatus":
                    type: "string"
                    enum:
                        - "pending"
            required:
                - "txHash"
                - "nodeId"
                - "rewardAddresses"
                - "amountDelegated"
                - "delegationFee"
                - "startTimestamp"
                - "endTimestamp"
                - "estimatedGrossReward"
                - "estimatedNetReward"
                - "delegationStatus"
        "ListDelegatorDetailsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "delegators":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/CompletedDelegatorDetails"}
                            - {"$ref": "#/components/schemas/ActiveDelegatorDetails"}
                            - {"$ref": "#/components/schemas/PendingDelegatorDetails"}
                        discriminator:
                            propertyName: "delegationStatus"
                            mapping:
                                "active": "#/components/schemas/ActiveDelegatorDetails"
                                "pending": "#/components/schemas/PendingDelegatorDetails"
                                "completed": "#/components/schemas/CompletedDelegatorDetails"
                    description: "The list of Delegator Details."
            required:
                - "delegators"
        "EventType":
            type: "string"
            enum:
                - "address_activity"
        "CreateWebhookRequest":
            type: "object"
            properties:
                "url":
                    type: "string"
                "chainId":
                    type: "string"
                "eventType": {"$ref": "#/components/schemas/EventType"}
                "metadata":
                    oneOf:
                        - {"$ref": "#/components/schemas/AddressActivityMetadata"}
                "name":
                    type: "string"
                "description":
                    type: "string"
                "includeInternalTxs":
                    type: "boolean"
                    description: "Whether to include traces in the webhook payload."
                "includeLogs":
                    type: "boolean"
                    description: "Whether to include logs in the webhook payload."
            required:
                - "url"
                - "chainId"
                - "eventType"
                - "metadata"
        "AddressActivityMetadata":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                    description: "Ethereum address(es) for the address_activity event type"
                    example: ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"]
                "eventSignatures":
                    type: "array"
                    items:
                        type: "string"
                    description: "Array of hexadecimal strings of the event signatures."
                    example: ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]
            required:
                - "addresses"
        "WebhookStatusType":
            type: "string"
            enum:
                - "active"
                - "inactive"
        "WebhookResponse":
            type: "object"
            properties:
                "id":
                    type: "string"
                "eventType": {"$ref": "#/components/schemas/EventType"}
                "metadata":
                    oneOf:
                        - {"$ref": "#/components/schemas/AddressActivityMetadata"}
                "includeInternalTxs":
                    type: "boolean"
                    description: "Whether to include traces in the webhook payload."
                "includeLogs":
                    type: "boolean"
                    description: "Whether to include logs in the webhook payload."
                "url":
                    type: "string"
                "chainId":
                    type: "string"
                "status": {"$ref": "#/components/schemas/WebhookStatusType"}
                "createdAt":
                    type: "number"
                "name":
                    type: "string"
                "description":
                    type: "string"
            required:
                - "id"
                - "eventType"
                - "metadata"
                - "url"
                - "chainId"
                - "status"
                - "createdAt"
                - "name"
                - "description"
        "WebhookStatus":
            type: "string"
            enum:
                - "active"
                - "inactive"
        "ListWebhooksResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "webhooks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/WebhookResponse"}
            required:
                - "webhooks"
        "SharedSecretsResponse":
            type: "object"
            properties:
                "secret":
                    type: "string"
            required:
                - "secret"
        "UpdateWebhookRequest":
            type: "object"
            properties:
                "name":
                    type: "string"
                "description":
                    type: "string"
                "url":
                    type: "string"
                "status": {"$ref": "#/components/schemas/WebhookStatusType"}
                "includeInternalTxs":
                    type: "boolean"
                "includeLogs":
                    type: "boolean"
        "AddressesChangeRequest":
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                    description: "Ethereum address(es) for the address_activity event type"
                    example: ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"]
            required:
                - "addresses"
        "ListWebhookAddressesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                "totalAddresses":
                    type: "number"
            required:
                - "addresses"
                - "totalAddresses"
        "TeleporterReceipt":
            type: "object"
            properties:
                "receivedMessageNonce":
                    type: "string"
                "relayerRewardAddress":
                    type: "string"
            required:
                - "receivedMessageNonce"
                - "relayerRewardAddress"
        "TeleporterRewardDetails":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-20"
                "price":
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                    description: "The token price, if available."
                "value":
                    type: "string"
            required:
                - "address"
                - "name"
                - "symbol"
                - "decimals"
                - "ercType"
                - "value"
        "TeleporterSourceTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "timestamp":
                    type: "number"
                "gasSpent":
                    type: "string"
            required:
                - "txHash"
                - "timestamp"
                - "gasSpent"
        "PendingTeleporterMessage":
            type: "object"
            properties:
                "messageId":
                    type: "string"
                "teleporterContractAddress":
                    type: "string"
                "sourceBlockchainId":
                    type: "string"
                "destinationBlockchainId":
                    type: "string"
                "sourceEvmChainId":
                    type: "string"
                "destinationEvmChainId":
                    type: "string"
                "messageNonce":
                    type: "string"
                "from":
                    type: "string"
                "to":
                    type: "string"
                "data":
                    type: "string"
                "messageExecuted":
                    type: "boolean"
                "receipts":
                    type: "array"
                    items: {"$ref": "#/components/schemas/TeleporterReceipt"}
                "receiptDelivered":
                    type: "boolean"
                "rewardDetails": {"$ref": "#/components/schemas/TeleporterRewardDetails"}
                "sourceTransaction": {"$ref": "#/components/schemas/TeleporterSourceTransaction"}
                "status":
                    type: "string"
                    enum:
                        - "pending"
            required:
                - "messageId"
                - "teleporterContractAddress"
                - "sourceBlockchainId"
                - "destinationBlockchainId"
                - "sourceEvmChainId"
                - "destinationEvmChainId"
                - "messageNonce"
                - "from"
                - "to"
                - "messageExecuted"
                - "receipts"
                - "receiptDelivered"
                - "rewardDetails"
                - "sourceTransaction"
                - "status"
        "TeleporterDestinationTransaction":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "timestamp":
                    type: "number"
                "gasSpent":
                    type: "string"
                "rewardRedeemer":
                    type: "string"
                "delivererAddress":
                    type: "string"
            required:
                - "txHash"
                - "timestamp"
                - "gasSpent"
                - "rewardRedeemer"
                - "delivererAddress"
        "DeliveredTeleporterMessage":
            type: "object"
            properties:
                "messageId":
                    type: "string"
                "teleporterContractAddress":
                    type: "string"
                "sourceBlockchainId":
                    type: "string"
                "destinationBlockchainId":
                    type: "string"
                "sourceEvmChainId":
                    type: "string"
                "destinationEvmChainId":
                    type: "string"
                "messageNonce":
                    type: "string"
                "from":
                    type: "string"
                "to":
                    type: "string"
                "data":
                    type: "string"
                "messageExecuted":
                    type: "boolean"
                "receipts":
                    type: "array"
                    items: {"$ref": "#/components/schemas/TeleporterReceipt"}
                "receiptDelivered":
                    type: "boolean"
                "rewardDetails": {"$ref": "#/components/schemas/TeleporterRewardDetails"}
                "sourceTransaction": {"$ref": "#/components/schemas/TeleporterSourceTransaction"}
                "destinationTransaction": {"$ref": "#/components/schemas/TeleporterDestinationTransaction"}
                "status":
                    type: "string"
                    enum:
                        - "delivered"
            required:
                - "messageId"
                - "teleporterContractAddress"
                - "sourceBlockchainId"
                - "destinationBlockchainId"
                - "sourceEvmChainId"
                - "destinationEvmChainId"
                - "messageNonce"
                - "from"
                - "to"
                - "messageExecuted"
                - "receipts"
                - "receiptDelivered"
                - "rewardDetails"
                - "sourceTransaction"
                - "destinationTransaction"
                - "status"
        "DeliveredSourceNotIndexedTeleporterMessage":
            type: "object"
            properties:
                "messageId":
                    type: "string"
                "teleporterContractAddress":
                    type: "string"
                "sourceBlockchainId":
                    type: "string"
                "destinationBlockchainId":
                    type: "string"
                "sourceEvmChainId":
                    type: "string"
                "destinationEvmChainId":
                    type: "string"
                "messageNonce":
                    type: "string"
                "from":
                    type: "string"
                "to":
                    type: "string"
                "data":
                    type: "string"
                "messageExecuted":
                    type: "boolean"
                "receipts":
                    type: "array"
                    items: {"$ref": "#/components/schemas/TeleporterReceipt"}
                "receiptDelivered":
                    type: "boolean"
                "rewardDetails": {"$ref": "#/components/schemas/TeleporterRewardDetails"}
                "destinationTransaction": {"$ref": "#/components/schemas/TeleporterDestinationTransaction"}
                "status":
                    type: "string"
                    enum:
                        - "delivered_source_not_indexed"
            required:
                - "messageId"
                - "teleporterContractAddress"
                - "sourceBlockchainId"
                - "destinationBlockchainId"
                - "sourceEvmChainId"
                - "destinationEvmChainId"
                - "messageNonce"
                - "from"
                - "to"
                - "messageExecuted"
                - "receipts"
                - "receiptDelivered"
                - "rewardDetails"
                - "destinationTransaction"
                - "status"
        "NextPageToken":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
        "NetworkType":
            type: "string"
            enum:
                - "mainnet"
                - "testnet"
            description: "Network on which this blockchain or subnet is created on."
        "ListTeleporterMessagesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "messages":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/PendingTeleporterMessage"}
                            - {"$ref": "#/components/schemas/DeliveredTeleporterMessage"}
                        discriminator:
                            propertyName: "status"
                            mapping:
                                "pending": "#/components/schemas/PendingTeleporterMessage"
                                "delivered": "#/components/schemas/DeliveredTeleporterMessage"
            required:
                - "messages"
        "NativeTokenBalance":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "chainId":
                    type: "string"
                    description: "The evm chain id."
                    example: "43114"
                "price":
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                    description: "The token price, if available."
                "balance":
                    type: "string"
                    description: "The address balance for the token, in units specified by the `decimals` value for the contract."
                    example: "2000000000000000000"
                "balanceValue":
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                    description: "The monetary value of the balance, if a price is available for the token."
            required:
                - "name"
                - "symbol"
                - "decimals"
                - "chainId"
                - "balance"
        "GetNativeBalanceResponse":
            type: "object"
            properties:
                "nativeTokenBalance":
                    allOf:
                        - {"$ref": "#/components/schemas/NativeTokenBalance"}
                    description: "The native token balance for the address."
            required:
                - "nativeTokenBalance"
        "Erc20TokenBalance":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-20"
                "price":
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                    description: "The token price, if available."
                "chainId":
                    type: "string"
                    description: "The evm chain id."
                    example: "43114"
                "balance":
                    type: "string"
                    description: "The address balance for the token, in units specified by the `decimals` value for the contract."
                    example: "2000000000000000000"
                "balanceValue":
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                    description: "The monetary value of the balance, if a price is available for the token."
            required:
                - "address"
                - "name"
                - "symbol"
                - "decimals"
                - "ercType"
                - "chainId"
                - "balance"
        "ListErc20BalancesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "erc20TokenBalances":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc20TokenBalance"}
                    description: "The list of ERC-20 token balances for the address."
            required:
                - "erc20TokenBalances"
        "Erc721TokenBalance":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-721"
                "tokenId":
                    type: "string"
                "tokenUri":
                    type: "string"
                "metadata": {"$ref": "#/components/schemas/Erc721TokenMetadata"}
                "ownerAddress":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "chainId":
                    type: "string"
                    description: "The evm chain id."
                    example: "43114"
            required:
                - "address"
                - "name"
                - "symbol"
                - "ercType"
                - "tokenId"
                - "tokenUri"
                - "metadata"
                - "chainId"
        "ListErc721BalancesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "erc721TokenBalances":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc721TokenBalance"}
                    description: "The list of ERC-721 token balances for the address."
            required:
                - "erc721TokenBalances"
        "Erc1155TokenBalance":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-1155"
                "tokenId":
                    type: "string"
                "tokenUri":
                    type: "string"
                "metadata": {"$ref": "#/components/schemas/Erc1155TokenMetadata"}
                "chainId":
                    type: "string"
                    description: "The evm chain id."
                    example: "43114"
                "balance":
                    type: "string"
                    description: "The address balance for the token, in units specified by the `decimals` value for the contract."
                    example: "2000000000000000000"
            required:
                - "address"
                - "ercType"
                - "tokenId"
                - "tokenUri"
                - "metadata"
                - "chainId"
                - "balance"
        "ListErc1155BalancesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "erc1155TokenBalances":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc1155TokenBalance"}
                    description: "The list of ERC-1155 token balances for the address."
            required:
                - "erc1155TokenBalances"
        "ListCollectibleBalancesResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "collectibleBalances":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/Erc721TokenBalance"}
                            - {"$ref": "#/components/schemas/Erc1155TokenBalance"}
                    description: "The list of ERC-721 and ERC-1155 token balances for the address."
            required:
                - "collectibleBalances"
        "EvmBlock":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txCount":
                    type: "number"
                    description: "The number of evm transactions in the block."
                "baseFee":
                    type: "string"
                    description: "The base gas fee for a transaction to be included in the block."
                "gasUsed":
                    type: "string"
                    description: "The gas used for transactions in the block."
                "gasLimit":
                    type: "string"
                    description: "The total gas limit set for transactions in the block."
                "gasCost":
                    type: "string"
                "parentHash":
                    type: "string"
                    description: "The hash of the parent block."
                "feesSpent":
                    type: "string"
                    description: "The amount of fees spent/burned for transactions in the block."
                "cumulativeTransactions":
                    type: "string"
                    description: "The cumulative number of transactions for the chain including this block."
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txCount"
                - "baseFee"
                - "gasUsed"
                - "gasLimit"
                - "gasCost"
                - "parentHash"
                - "feesSpent"
                - "cumulativeTransactions"
        "ListEvmBlocksResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "blocks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/EvmBlock"}
            required:
                - "blocks"
        "GetEvmBlockResponse":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txCount":
                    type: "number"
                    description: "The number of evm transactions in the block."
                "baseFee":
                    type: "string"
                    description: "The base gas fee for a transaction to be included in the block."
                "gasUsed":
                    type: "string"
                    description: "The gas used for transactions in the block."
                "gasLimit":
                    type: "string"
                    description: "The total gas limit set for transactions in the block."
                "gasCost":
                    type: "string"
                "parentHash":
                    type: "string"
                    description: "The hash of the parent block."
                "feesSpent":
                    type: "string"
                    description: "The amount of fees spent/burned for transactions in the block."
                "cumulativeTransactions":
                    type: "string"
                    description: "The cumulative number of transactions for the chain including this block."
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txCount"
                - "baseFee"
                - "gasUsed"
                - "gasLimit"
                - "gasCost"
                - "parentHash"
                - "feesSpent"
                - "cumulativeTransactions"
        "RichAddress":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
            required:
                - "address"
        "Erc20Token":
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-20"
                "price":
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                    description: "The token price, if available."
            required:
                - "address"
                - "name"
                - "symbol"
                - "decimals"
                - "ercType"
        "Erc20TransferDetails":
            type: "object"
            properties:
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "erc20Token": {"$ref": "#/components/schemas/Erc20Token"}
            required:
                - "from"
                - "to"
                - "logIndex"
                - "value"
                - "erc20Token"
        "Erc721TransferDetails":
            type: "object"
            properties:
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "erc721Token": {"$ref": "#/components/schemas/Erc721Token"}
            required:
                - "from"
                - "to"
                - "logIndex"
                - "erc721Token"
        "Erc1155TransferDetails":
            type: "object"
            properties:
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "erc1155Token": {"$ref": "#/components/schemas/Erc1155Token"}
            required:
                - "from"
                - "to"
                - "logIndex"
                - "value"
                - "erc1155Token"
        "InternalTransactionOpCall":
            type: "string"
            enum:
                - "UNKNOWN"
                - "CALL"
                - "CREATE"
                - "CREATE2"
                - "CALLCODE"
                - "DELEGATECALL"
                - "STATICCALL"
        "InternalTransactionDetails":
            type: "object"
            properties:
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "internalTxType": {"$ref": "#/components/schemas/InternalTransactionOpCall"}
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "isReverted":
                    type: "boolean"
                    description: "True if the internal transaction was reverted."
                "gasUsed":
                    type: "string"
                "gasLimit":
                    type: "string"
            required:
                - "from"
                - "to"
                - "internalTxType"
                - "value"
                - "isReverted"
                - "gasUsed"
                - "gasLimit"
        "NetworkToken":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "logoUri":
                    type: "string"
                    description: "The logo uri for the address."
                    example: "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"
                "description":
                    type: "string"
            required:
                - "name"
                - "symbol"
                - "decimals"
        "NetworkTokenDetails":
            type: "object"
            properties:
                "networkToken": {"$ref": "#/components/schemas/NetworkToken"}
                "currentPrice":
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                    description: "The current token price, if available."
                "historicalPrice":
                    allOf:
                        - {"$ref": "#/components/schemas/Money"}
                    description: "The historical token price at the time the transaction occured, if available. Note, this is only provided if the transaction occured more than 24 hours ago."
            required:
                - "networkToken"
        "TransactionMethodType":
            type: "string"
            enum:
                - "NATIVE_TRANSFER"
                - "CONTRACT_CALL"
                - "CONTRACT_CREATION"
            description: "The contract call type. NATIVE_TRANSFER indicates a transfer of the native token without any smart-contract interaction. CONTRACT_CALL indicates a smart-contract interaction. CONTRACT_CREATION indicates a smart-contract creation."
        "Method":
            type: "object"
            properties:
                "callType": {"example": "CONTRACT_CALL", "$ref": "#/components/schemas/TransactionMethodType"}
                "methodHash":
                    type: "string"
                    description: "The contract method hash identifier. The method hash is only set if the `callType` is `CONTRACT_CALL`."
                    example: "0xa9059cbb"
                "methodName":
                    type: "string"
                    description: "The contract method name including parameter types. If the `callType` is `NATIVE_TRANSFER` this is set to 'Native Transfer'. If the `callType` is `CONTRACT_CREATION` this is set to 'Contract Created'."
                    example: "transfer(address,uint256)"
            required:
                - "callType"
                - "methodHash"
        "FullNativeTransactionDetails":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "blockIndex":
                    type: "number"
                    description: "The index at which the transaction occured in the block (0-indexed)."
                    example: 0
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "txStatus":
                    type: "string"
                    description: "The transaction status, which is either 0 (failed) or 1 (successful)."
                    example: "1"
                "txType":
                    type: "number"
                    description: "The transaction type."
                    example: 1
                "gasLimit":
                    type: "string"
                    description: "The gas limit set for the transaction."
                    example: "51373"
                "gasUsed":
                    type: "string"
                    description: "The amount of gas used."
                    example: "51373"
                "gasPrice":
                    type: "string"
                    description: "The gas price denominated by the number of decimals of the native token."
                    example: "470000000000"
                "nonce":
                    type: "string"
                    description: "The nonce used by the sender of the transaction."
                    example: "1"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "method": {"$ref": "#/components/schemas/Method"}
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "input":
                    type: "string"
                    description: "The data sent for the transaction."
                "baseFeePerGas":
                    type: "string"
                "maxFeePerGas":
                    type: "string"
                "maxPriorityFeePerGas":
                    type: "string"
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "blockIndex"
                - "txHash"
                - "txStatus"
                - "txType"
                - "gasLimit"
                - "gasUsed"
                - "gasPrice"
                - "nonce"
                - "from"
                - "to"
                - "value"
                - "input"
                - "baseFeePerGas"
        "GetTransactionResponse":
            type: "object"
            properties:
                "erc20Transfers":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc20TransferDetails"}
                    description: "The list of ERC-20 transfers."
                "erc721Transfers":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc721TransferDetails"}
                    description: "The list of ERC-721 transfers."
                "erc1155Transfers":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc1155TransferDetails"}
                    description: "The list of ERC-1155 transfers."
                "internalTransactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/InternalTransactionDetails"}
                    description: "The list of internal transactions. Note that this list only includes CALL and CALLCODE internal transactions that had a non-zero value and CREATE/CREATE2 calls. Use a client provider to recieve a full debug trace of the transaction."
                "networkTokenDetails": {"$ref": "#/components/schemas/NetworkTokenDetails"}
                "nativeTransaction": {"$ref": "#/components/schemas/FullNativeTransactionDetails"}
            required:
                - "networkTokenDetails"
                - "nativeTransaction"
        "ImageAsset":
            type: "object"
            properties:
                "assetId":
                    type: "string"
                "imageUri":
                    type: "string"
                    description: "OUTPUT ONLY"
        "ResourceLinkType":
            type: "string"
            enum:
                - "Blog"
                - "CoinGecko"
                - "CoinMarketCap"
                - "Discord"
                - "Documentation"
                - "Facebook"
                - "Github"
                - "Instagram"
                - "LinkedIn"
                - "Medium"
                - "Reddit"
                - "Support"
                - "Telegram"
                - "TikTok"
                - "Twitter"
                - "Website"
                - "Whitepaper"
                - "Youtube"
        "ResourceLink":
            type: "object"
            properties:
                "type": {"$ref": "#/components/schemas/ResourceLinkType"}
                "url":
                    type: "string"
            required:
                - "type"
                - "url"
        "ContractDeploymentDetails":
            type: "object"
            properties:
                "txHash":
                    type: "string"
                "deployerAddress":
                    type: "string"
                    description: "The address that initiated the transaction which deployed this contract."
                "deployerContractAddress":
                    type: "string"
                    description: "The contract address which deployed this contract via smart contract. This field is only populated when the contract was deployed as part of smart contract execution."
            required:
                - "txHash"
                - "deployerAddress"
        "UnknownContract":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "deploymentDetails": {"$ref": "#/components/schemas/ContractDeploymentDetails"}
                "ercType":
                    type: "string"
                    enum:
                        - "UNKNOWN"
            required:
                - "address"
                - "deploymentDetails"
                - "ercType"
        "PricingProviders":
            type: "object"
            properties:
                "coingeckoCoinId":
                    type: "string"
        "Erc20Contract":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "deploymentDetails": {"$ref": "#/components/schemas/ContractDeploymentDetails"}
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-20"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "decimals":
                    type: "number"
                    description: "The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation."
                    example: 18
                "pricingProviders": {"$ref": "#/components/schemas/PricingProviders"}
            required:
                - "address"
                - "deploymentDetails"
                - "ercType"
                - "decimals"
        "Erc721Contract":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "deploymentDetails": {"$ref": "#/components/schemas/ContractDeploymentDetails"}
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-721"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
            required:
                - "address"
                - "deploymentDetails"
                - "ercType"
        "Erc1155Contract":
            type: "object"
            properties:
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "address":
                    type: "string"
                    description: "A wallet or contract address in mixed-case checksum encoding."
                    example: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
                "deploymentDetails": {"$ref": "#/components/schemas/ContractDeploymentDetails"}
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-1155"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "pricingProviders": {"$ref": "#/components/schemas/PricingProviders"}
            required:
                - "address"
                - "deploymentDetails"
                - "ercType"
        "ListContractsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "contracts":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/Erc721Contract"}
                            - {"$ref": "#/components/schemas/Erc1155Contract"}
                            - {"$ref": "#/components/schemas/Erc20Contract"}
                            - {"$ref": "#/components/schemas/UnknownContract"}
                        discriminator:
                            propertyName: "ercType"
                            mapping:
                                "ERC-721": "#/components/schemas/Erc721Contract"
                                "ERC-1155": "#/components/schemas/Erc1155Contract"
                                "ERC-20": "#/components/schemas/Erc20Contract"
                                "UNKNOWN": "#/components/schemas/UnknownContract"
            required:
                - "contracts"
        "ContractSubmissionErc1155":
            type: "object"
            properties:
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-1155"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "pricingProviders": {"$ref": "#/components/schemas/PricingProviders"}
            required:
                - "name"
                - "ercType"
                - "symbol"
        "ContractSubmissionErc20":
            type: "object"
            properties:
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-20"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
                "pricingProviders": {"$ref": "#/components/schemas/PricingProviders"}
            required:
                - "name"
                - "ercType"
                - "symbol"
        "ContractSubmissionErc721":
            type: "object"
            properties:
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "ERC-721"
                "symbol":
                    type: "string"
                    description: "The contract symbol."
                    example: "WAVAX"
            required:
                - "name"
                - "ercType"
                - "symbol"
        "ContractSubmissionUnknown":
            type: "object"
            properties:
                "description":
                    type: "string"
                "officialSite":
                    type: "string"
                "email":
                    type: "string"
                "logoAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "bannerAsset": {"$ref": "#/components/schemas/ImageAsset"}
                "color":
                    type: "string"
                "resourceLinks":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ResourceLink"}
                "tags":
                    type: "array"
                    items:
                        type: "string"
                "name":
                    type: "string"
                    description: "The contract name."
                    example: "Wrapped AVAX"
                "ercType":
                    type: "string"
                    enum:
                        - "UNKNOWN"
            required:
                - "name"
                - "ercType"
        "ContractSubmissionBody":
            type: "object"
            properties:
                "contract":
                    oneOf:
                        - {"$ref": "#/components/schemas/ContractSubmissionErc1155"}
                        - {"$ref": "#/components/schemas/ContractSubmissionErc20"}
                        - {"$ref": "#/components/schemas/ContractSubmissionErc721"}
                        - {"$ref": "#/components/schemas/ContractSubmissionUnknown"}
                    discriminator:
                        propertyName: "ercType"
                        mapping:
                            "UNKNOWN": "#/components/schemas/ContractSubmissionUnknown"
                            "ERC-1155": "#/components/schemas/ContractSubmissionErc1155"
                            "ERC-20": "#/components/schemas/ContractSubmissionErc20"
                            "ERC-721": "#/components/schemas/ContractSubmissionErc721"
            required:
                - "contract"
        "UpdateContractResponse":
            type: "object"
            properties:
                "contract":
                    oneOf:
                        - {"$ref": "#/components/schemas/UnknownContract"}
                        - {"$ref": "#/components/schemas/Erc20Contract"}
                        - {"$ref": "#/components/schemas/Erc721Contract"}
                        - {"$ref": "#/components/schemas/Erc1155Contract"}
                    discriminator:
                        propertyName: "ercType"
                        mapping:
                            "UNKNOWN": "#/components/schemas/UnknownContract"
                            "ERC-20": "#/components/schemas/Erc20Contract"
                            "ERC-721": "#/components/schemas/Erc721Contract"
                            "ERC-1155": "#/components/schemas/Erc1155Contract"
            required:
                - "contract"
        "GlacierApiFeature":
            type: "string"
            enum:
                - "nftIndexing"
                - "webhooks"
        "ChainStatus":
            type: "string"
            enum:
                - "OK"
                - "UNAVAILABLE"
            description: "Status of chain nodes. Chain nodes can become temporarily `UNAVAILABLE` for several reasons, such as validator stake falling below threshold. If chain nodes are `UNAVAILABLE`, requests that rely on data from the chain nodes may return 503 errors."
        "VmName":
            type: "string"
            enum:
                - "EVM"
                - "BITCOIN"
                - "ETHEREUM"
        "UtilityAddresses":
            type: "object"
            properties:
                "multicall":
                    type: "string"
        "ChainInfo":
            type: "object"
            properties:
                "chainId":
                    type: "string"
                "status": {"$ref": "#/components/schemas/ChainStatus"}
                "chainName":
                    type: "string"
                "description":
                    type: "string"
                "platformChainId":
                    type: "string"
                "subnetId":
                    type: "string"
                "vmId":
                    type: "string"
                "vmName": {"$ref": "#/components/schemas/VmName"}
                "explorerUrl":
                    type: "string"
                "rpcUrl":
                    type: "string"
                "wsUrl":
                    type: "string"
                "isTestnet":
                    type: "boolean"
                "utilityAddresses": {"$ref": "#/components/schemas/UtilityAddresses"}
                "networkToken": {"$ref": "#/components/schemas/NetworkToken"}
                "chainLogoUri":
                    type: "string"
                "private":
                    type: "boolean"
                "enabledFeatures":
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "nftIndexing"
                            - "webhooks"
            required:
                - "chainId"
                - "status"
                - "chainName"
                - "description"
                - "vmName"
                - "rpcUrl"
                - "isTestnet"
                - "networkToken"
        "ListChainsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "chains":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Chain"}
                    description: "Array of Subnet - EVM Chain ID mappings whose metrics we support."
            required:
                - "chains"
        "GetChainResponse":
            type: "object"
            properties:
                "chainId":
                    type: "string"
                "status": {"$ref": "#/components/schemas/ChainStatus"}
                "chainName":
                    type: "string"
                "description":
                    type: "string"
                "platformChainId":
                    type: "string"
                "subnetId":
                    type: "string"
                "vmId":
                    type: "string"
                "vmName": {"$ref": "#/components/schemas/VmName"}
                "explorerUrl":
                    type: "string"
                "rpcUrl":
                    type: "string"
                "wsUrl":
                    type: "string"
                "isTestnet":
                    type: "boolean"
                "utilityAddresses": {"$ref": "#/components/schemas/UtilityAddresses"}
                "networkToken": {"$ref": "#/components/schemas/NetworkToken"}
                "chainLogoUri":
                    type: "string"
                "private":
                    type: "boolean"
                "enabledFeatures":
                    type: "array"
                    items:
                        type: "string"
                        enum:
                            - "nftIndexing"
                            - "webhooks"
            required:
                - "chainId"
                - "status"
                - "chainName"
                - "description"
                - "vmName"
                - "rpcUrl"
                - "isTestnet"
                - "networkToken"
        "Erc20Transfer":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "erc20Token": {"$ref": "#/components/schemas/Erc20Token"}
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txHash"
                - "from"
                - "to"
                - "logIndex"
                - "value"
                - "erc20Token"
        "Erc721Transfer":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "erc721Token": {"$ref": "#/components/schemas/Erc721Token"}
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txHash"
                - "from"
                - "to"
                - "logIndex"
                - "erc721Token"
        "Erc1155Transfer":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "logIndex":
                    type: "number"
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "erc1155Token": {"$ref": "#/components/schemas/Erc1155Token"}
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txHash"
                - "from"
                - "to"
                - "logIndex"
                - "value"
                - "erc1155Token"
        "ListTransfersResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transfers":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/Erc20Transfer"}
                            - {"$ref": "#/components/schemas/Erc721Transfer"}
                            - {"$ref": "#/components/schemas/Erc1155Transfer"}
            required:
                - "transfers"
        "NativeTransaction":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "blockIndex":
                    type: "number"
                    description: "The index at which the transaction occured in the block (0-indexed)."
                    example: 0
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "txStatus":
                    type: "string"
                    description: "The transaction status, which is either 0 (failed) or 1 (successful)."
                    example: "1"
                "txType":
                    type: "number"
                    description: "The transaction type."
                    example: 1
                "gasLimit":
                    type: "string"
                    description: "The gas limit set for the transaction."
                    example: "51373"
                "gasUsed":
                    type: "string"
                    description: "The amount of gas used."
                    example: "51373"
                "gasPrice":
                    type: "string"
                    description: "The gas price denominated by the number of decimals of the native token."
                    example: "470000000000"
                "nonce":
                    type: "string"
                    description: "The nonce used by the sender of the transaction."
                    example: "1"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "method": {"$ref": "#/components/schemas/Method"}
                "value":
                    type: "string"
                    example: "10000000000000000000"
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "blockIndex"
                - "txHash"
                - "txStatus"
                - "txType"
                - "gasLimit"
                - "gasUsed"
                - "gasPrice"
                - "nonce"
                - "from"
                - "to"
                - "value"
        "TransactionDetails":
            type: "object"
            properties:
                "nativeTransaction":
                    allOf:
                        - {"$ref": "#/components/schemas/NativeTransaction"}
                    description: "The native (top-level) transaction details."
                "erc20Transfers":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc20TransferDetails"}
                    description: "The list of ERC-20 transfers."
                "erc721Transfers":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc721TransferDetails"}
                    description: "The list of ERC-721 transfers."
                "erc1155Transfers":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc1155TransferDetails"}
                    description: "The list of ERC-1155 transfers."
                "internalTransactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/InternalTransactionDetails"}
                    description: "The list of internal transactions. Note that this list only includes CALL and CALLCODE internal transactions that had a non-zero value and CREATE/CREATE2 calls. Use a client provider to recieve a full debug trace of the transaction."
            required:
                - "nativeTransaction"
        "ListTransactionDetailsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/TransactionDetails"}
            required:
                - "transactions"
        "ListNativeTransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/NativeTransaction"}
            required:
                - "transactions"
        "ListErc20TransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc20Transfer"}
            required:
                - "transactions"
        "ListErc721TransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc721Transfer"}
            required:
                - "transactions"
        "ListErc1155TransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/Erc1155Transfer"}
            required:
                - "transactions"
        "InternalTransaction":
            type: "object"
            properties:
                "blockNumber":
                    type: "string"
                    description: "The block number on the chain."
                    example: "339"
                "blockTimestamp":
                    type: "number"
                    description: "The block finality timestamp."
                    example: 1648672486
                "blockHash":
                    type: "string"
                    description: "The block hash identifier."
                    example: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
                "txHash":
                    type: "string"
                    description: "The transaction hash identifier."
                    example: "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4"
                "from": {"$ref": "#/components/schemas/RichAddress"}
                "to": {"$ref": "#/components/schemas/RichAddress"}
                "internalTxType": {"$ref": "#/components/schemas/InternalTransactionOpCall"}
                "value":
                    type: "string"
                    example: "10000000000000000000"
                "isReverted":
                    type: "boolean"
                    description: "True if the internal transaction was reverted."
                "gasUsed":
                    type: "string"
                "gasLimit":
                    type: "string"
            required:
                - "blockNumber"
                - "blockTimestamp"
                - "blockHash"
                - "txHash"
                - "from"
                - "to"
                - "internalTxType"
                - "value"
                - "isReverted"
                - "gasUsed"
                - "gasLimit"
        "ListInternalTransactionsResponse":
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "transactions":
                    type: "array"
                    items: {"$ref": "#/components/schemas/InternalTransaction"}
            required:
                - "transactions"
        "TransactionStatus":
            type: "string"
            enum:
                - "failed"
                - "success"
        "RpcSuccessResponseDto":
            type: "object"
            properties:
                "jsonrpc":
                    type: "string"
                "id":
                    oneOf:
                        - type: "string"
                        - type: "number"
                "result":
                    type: "object"
            required:
                - "jsonrpc"
                - "result"
        "RpcErrorDto":
            type: "object"
            properties:
                "code":
                    type: "number"
                "message":
                    type: "string"
                "data":
                    type: "object"
            required:
                - "code"
                - "message"
        "RpcErrorResponseDto":
            type: "object"
            properties:
                "jsonrpc":
                    type: "string"
                "id":
                    oneOf:
                        - type: "string"
                        - type: "number"
                "error": {"$ref": "#/components/schemas/RpcErrorDto"}
            required:
                - "jsonrpc"
                - "error"
        "RpcRequestBodyDto":
            type: "object"
            properties:
                "method":
                    type: "string"
                "params":
                    oneOf:
                        - type: "array"
                          items:
                            oneOf:
                                - type: "string"
                                - type: "number"
                                - type: "object"
                                  additionalProperties: true
                        - type: "object"
                          additionalProperties: true
                "id":
                    oneOf:
                        - type: "string"
                        - type: "number"
                "jsonrpc":
                    type: "string"
            required:
                - "method"
        Chain:
            type: "object"
            properties:
                "chainId":
                    type: "number"
                    description: "EVM ChainID for the blockchain."
                    example: 43114
                "chainName":
                    type: "string"
                    description: "Blockchain alias for easy identification of blockchains."
                    example: "c_chain"
                "blockchainId":
                    type: "string"
                    description: "Unique blockchain ID for this blockchain."
                    example: "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5"
                "subnetId":
                    type: "string"
                    description: "Subnet ID this blockchain belongs to."
                    example: "11111111111111111111111111111111LpoYY"
                "network": {"example": "mainnet", "$ref": "#/components/schemas/NetworkType"}
            required:
                - "chainId"
                - "chainName"
                - "blockchainId"
                - "subnetId"
                - "network"
        TimeIntervalGranularity:
            type: "string"
            enum:
                - "hour"
                - "day"
                - "week"
                - "month"
        ChainMetric:
            type: "string"
            enum:
                - "activeAddresses"
                - "activeSenders"
                - "cumulativeTxCount"
                - "cumulativeAddresses"
                - "cumulativeContracts"
                - "cumulativeDeployers"
                - "gasUsed"
                - "txCount"
                - "avgGps"
                - "maxGps"
                - "avgTps"
                - "maxTps"
                - "avgGasPrice"
                - "maxGasPrice"
        MetricsValue:
            type: "object"
            properties:
                "value":
                    type: "number"
                    description: "Aggregated value for the current metrics."
                "timestamp":
                    type: "number"
                    description: "Timestamp at which metrics are aggregated."
            required:
                - "value"
                - "timestamp"
        MetricsApiResponse:
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "results":
                    type: "array"
                    items: {"$ref": "#/components/schemas/MetricsValue"}
                    description: "Array of current metrics values at different timestamps."
            required:
                - "results"
        ChainRollingWindowMetric:
            type: "string"
            enum:
                - "gasUsed"
                - "txCount"
                - "avgGps"
                - "maxGps"
                - "avgTps"
                - "maxTps"
                - "avgGasPrice"
                - "maxGasPrice"
        ChainRollingWindowMetricsValue:
            type: "object"
            properties:
                "lastHour":
                    type: "number"
                    description: "Aggregated value for the current metrics in last hour."
                "lastDay":
                    type: "number"
                    description: "Aggregated value for the current metrics in last day."
                "lastMonth":
                    type: "number"
                    description: "Aggregated value for the current metrics in last month."
                "lastYear":
                    type: "number"
                    description: "Aggregated value for the current metrics in last year."
                "allTime":
                    type: "number"
                    description: "Aggregated value for the current metrics for all time."
            required:
                - "lastHour"
                - "lastDay"
                - "lastMonth"
                - "lastYear"
                - "allTime"
        RollingWindowMetricsApiResponse:
            type: "object"
            properties:
                "result":
                    allOf:
                        - {"$ref": "#/components/schemas/ChainRollingWindowMetricsValue"}
                    description: "Array of current metrics values for different windows."
            required:
                - "result"
        NetworkMetric:
            type: "string"
            enum:
                - "delegatorCount"
                - "delegatorWeight"
                - "validatorCount"
                - "validatorWeight"
        AddressDetails:
            type: "object"
            properties:
                "address":
                    type: "string"
                    description: "An EVM address."
                    example: "0x1234567890abcdef1234567890abcdef123456789"
                "sortKey":
                    type: "string"
                    description: "Route dependent value associated with an address at a given point in time."
                    example: 123
            required:
                - "address"
                - "sortKey"
        NftHoldersResponse:
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "addresses":
                    allOf:
                        - {"$ref": "#/components/schemas/AddressDetails"}
                    description: "List of addresses that match provided criteria."
                "nftCollectionName":
                    type: "string"
                    description: "NFT project name."
                    example: "NFT Project"
                "nftSymbol":
                    type: "string"
                    description: "NFT symbol."
                    example: "NFTPROJ"
                "totalHolders":
                    type: "number"
                    description: "Total number of holders of a given NFT project."
                    example: 10
                "totalTokens":
                    type: "number"
                    description: "Total number of tokens of a given NFT project."
                    example: 10
            required:
                - "addresses"
                - "nftCollectionName"
                - "nftSymbol"
                - "totalHolders"
                - "totalTokens"
        LookingGlassResponse:
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "addresses":
                    allOf:
                        - {"$ref": "#/components/schemas/AddressDetails"}
                    description: "List of addresses that match provided criteria."
            required:
                - "addresses"
        PChainAddressDetails:
            type: "object"
            properties:
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                    description: "A list of P-Chain addresses."
                    example: ["avax1abcdef1234567890abcdef1234567890abcdef"]
                "sortKey":
                    type: "string"
                    description: "Route dependent value associated with an address at a given point in time."
                    example: 123
            required:
                - "addresses"
                - "sortKey"
        PChainLookingGlassResponse:
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "addresses":
                    allOf:
                        - {"$ref": "#/components/schemas/PChainAddressDetails"}
                    description: "List of addresses that match provided criteria."
            required:
                - "addresses"
        DateRangeMinBalanceParam:
            type: "object"
            properties:
                "firstDate":
                    type: "string"
                "lastDate":
                    type: "string"
                "minBalance":
                    type: "string"
                "evmChainId":
                    type: "string"
            required:
                - "firstDate"
                - "lastDate"
                - "minBalance"
                - "evmChainId"
        AllTimeNativeBalanceQueryDto:
            type: "object"
            properties:
                "id":
                    type: "string"
                "type":
                    type: "string"
                    enum:
                        - "AllTimeNativeBalance"
                "params": {"$ref": "#/components/schemas/DateRangeMinBalanceParam"}
            required:
                - "id"
                - "type"
                - "params"
        AnyTimeNativeBalanceQueryDto:
            type: "object"
            properties:
                "id":
                    type: "string"
                "type":
                    type: "string"
                    enum:
                        - "AnyTimeNativeBalance"
                "params": {"$ref": "#/components/schemas/DateRangeMinBalanceParam"}
            required:
                - "id"
                - "type"
                - "params"
        DateRangeErc20MinBalanceParam:
            type: "object"
            properties:
                "firstDate":
                    type: "string"
                "lastDate":
                    type: "string"
                "minBalance":
                    type: "string"
                "evmChainId":
                    type: "string"
                "contractAddress":
                    type: "string"
            required:
                - "firstDate"
                - "lastDate"
                - "minBalance"
                - "evmChainId"
                - "contractAddress"
        AllTimeErc20BalanceQueryDto:
            type: "object"
            properties:
                "id":
                    type: "string"
                "type":
                    type: "string"
                    enum:
                        - "AllTimeErc20Balance"
                "params": {"$ref": "#/components/schemas/DateRangeErc20MinBalanceParam"}
            required:
                - "id"
                - "type"
                - "params"
        AnyTimeErc20BalanceQueryDto:
            type: "object"
            properties:
                "id":
                    type: "string"
                "type":
                    type: "string"
                    enum:
                        - "AnyTimeErc20Balance"
                "params": {"$ref": "#/components/schemas/DateRangeErc20MinBalanceParam"}
            required:
                - "id"
                - "type"
                - "params"
        TimestampRangeNftHoldersParam:
            type: "object"
            properties:
                "evmChainId":
                    type: "string"
                "contractAddress":
                    type: "string"
                "startTs":
                    type: "number"
                "endTs":
                    type: "number"
            required:
                - "evmChainId"
                - "contractAddress"
                - "startTs"
                - "endTs"
        DateRangeNftHoldersParam:
            type: "object"
            properties:
                "firstDate":
                    type: "string"
                "lastDate":
                    type: "string"
                "evmChainId":
                    type: "string"
                "contractAddress":
                    type: "string"
            required:
                - "firstDate"
                - "lastDate"
                - "evmChainId"
                - "contractAddress"
        AllTimeNftHoldersQueryDto:
            type: "object"
            properties:
                "id":
                    type: "string"
                "type":
                    type: "string"
                    enum:
                        - "AllTimeNftHolders"
                "params":
                    oneOf:
                        - {"$ref": "#/components/schemas/TimestampRangeNftHoldersParam"}
                        - {"$ref": "#/components/schemas/DateRangeNftHoldersParam"}
            required:
                - "id"
                - "type"
                - "params"
        AnyTimeNftHoldersQueryDto:
            type: "object"
            properties:
                "id":
                    type: "string"
                "type":
                    type: "string"
                    enum:
                        - "AnyTimeNftHolders"
                "params":
                    oneOf:
                        - {"$ref": "#/components/schemas/TimestampRangeNftHoldersParam"}
                        - {"$ref": "#/components/schemas/DateRangeNftHoldersParam"}
            required:
                - "id"
                - "type"
                - "params"
        TokenType:
            type: "string"
            enum:
                - "ERC20"
                - "NATIVE"
        LatestBalanceParams:
            type: "object"
            properties:
                "minBalance":
                    type: "string"
                "evmChainId":
                    type: "string"
                "tokenType": {"$ref": "#/components/schemas/TokenType"}
                "contractAddress":
                    type: "string"
            required:
                - "minBalance"
                - "evmChainId"
                - "tokenType"
        LatestBalanceQueryDto:
            type: "object"
            properties:
                "id":
                    type: "string"
                "type":
                    type: "string"
                    enum:
                        - "LatestBalance"
                "params": {"$ref": "#/components/schemas/LatestBalanceParams"}
            required:
                - "id"
                - "type"
                - "params"
        DateRangeStarsArenaMinBalanceParam:
            type: "object"
            properties:
                "firstDate":
                    type: "string"
                "lastDate":
                    type: "string"
                "minBalance":
                    type: "string"
                "subjectAddress":
                    type: "string"
            required:
                - "firstDate"
                - "lastDate"
                - "minBalance"
                - "subjectAddress"
        AllTimeStarsArenaBalanceQueryDto:
            type: "object"
            properties:
                "id":
                    type: "string"
                "type":
                    type: "string"
                    enum:
                        - "AllTimeStarsArenaBalance"
                "params": {"$ref": "#/components/schemas/DateRangeStarsArenaMinBalanceParam"}
            required:
                - "id"
                - "type"
                - "params"
        AnyTimeStarsArenaBalanceQueryDto:
            type: "object"
            properties:
                "id":
                    type: "string"
                "type":
                    type: "string"
                    enum:
                        - "AnyTimeStarsArenaBalance"
                "params": {"$ref": "#/components/schemas/DateRangeStarsArenaMinBalanceParam"}
            required:
                - "id"
                - "type"
                - "params"
        LatestStarsArenaBalanceParams:
            type: "object"
            properties:
                "minBalance":
                    type: "string"
                "subjectAddress":
                    type: "string"
            required:
                - "minBalance"
                - "subjectAddress"
        LatestStarsArenaBalanceQueryDto:
            type: "object"
            properties:
                "id":
                    type: "string"
                "type":
                    type: "string"
                    enum:
                        - "LatestBalanceStarsArena"
                "params": {"$ref": "#/components/schemas/LatestStarsArenaBalanceParams"}
            required:
                - "id"
                - "type"
                - "params"
        Operator:
            type: "string"
            enum:
                - "AND"
                - "OR"
        CompositeQueryRequestDto:
            type: "object"
            properties:
                "pageToken":
                    type: "string"
                    description: "A page token, received from a previous list call. Provide this to retrieve the subsequent page."
                "pageSize":
                    type: "integer"
                    maximum: 10000
                    minimum: 1
                    description: "The maximum number of items to return."
                    default: 1000
                "queries":
                    type: "array"
                    items:
                        oneOf:
                            - {"$ref": "#/components/schemas/AllTimeNativeBalanceQueryDto"}
                            - {"$ref": "#/components/schemas/AnyTimeNativeBalanceQueryDto"}
                            - {"$ref": "#/components/schemas/AllTimeErc20BalanceQueryDto"}
                            - {"$ref": "#/components/schemas/AnyTimeErc20BalanceQueryDto"}
                            - {"$ref": "#/components/schemas/AllTimeNftHoldersQueryDto"}
                            - {"$ref": "#/components/schemas/AnyTimeNftHoldersQueryDto"}
                            - {"$ref": "#/components/schemas/LatestBalanceQueryDto"}
                            - {"$ref": "#/components/schemas/AllTimeStarsArenaBalanceQueryDto"}
                            - {"$ref": "#/components/schemas/AnyTimeStarsArenaBalanceQueryDto"}
                            - {"$ref": "#/components/schemas/LatestStarsArenaBalanceQueryDto"}
                        discriminator:
                            propertyName: "type"
                            mapping:
                                "AllTimeNativeBalance": "#/components/schemas/AllTimeNativeBalanceQueryDto"
                                "AnyTimeNativeBalance": "#/components/schemas/AnyTimeNativeBalanceQueryDto"
                                "AllTimeErc20Balance": "#/components/schemas/AllTimeErc20BalanceQueryDto"
                                "AnyTimeErc20Balance": "#/components/schemas/AnyTimeErc20BalanceQueryDto"
                                "AllTimeNftHolders": "#/components/schemas/AllTimeNftHoldersQueryDto"
                                "AnyTimeNftHolders": "#/components/schemas/AnyTimeNftHoldersQueryDto"
                                "LatestBalance": "#/components/schemas/LatestBalanceQueryDto"
                                "AllTimeStarsArenaBalance": "#/components/schemas/AllTimeStarsArenaBalanceQueryDto"
                                "AnyTimeStarsArenaBalance": "#/components/schemas/AnyTimeStarsArenaBalanceQueryDto"
                                "LatestBalanceStarsArena": "#/components/schemas/LatestStarsArenaBalanceQueryDto"
                "operator": {"$ref": "#/components/schemas/Operator"}
            required:
                - "queries"
                - "operator"
        CompositeQueryResponse:
            type: "object"
            properties:
                "nextPageToken":
                    type: "string"
                    description: "A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages."
                "subQueryCounts":
                    type: "object"
                    additionalProperties:
                        type: "number"
                    description: "The number of results for each subquery by query id."
                    example: {"1": 1, "2": 2, "3": 2}
                "totalCount":
                    type: "number"
                    description: "The total number of addresses returned by the composite query."
                    example: 2
                "addresses":
                    type: "array"
                    items:
                        type: "string"
                        example: "0x1234567890abcdef1234567890abcdef123456789"
            required:
                - "subQueryCounts"
                - "totalCount"
                - "addresses"
        SubnetMapping:
            type: "object"
            properties:
                "chainID":
                    type: "number"
                "subnetID":
                    type: "string"
                "timestamp":
                    type: "number"
                "network":
                    type: "string"
            required:
                - "chainID"
                - "subnetID"
                - "timestamp"
                - "network"
        SubnetMappingsResponse:
            type: "object"
            properties:
                "nextPageStartKey":
                    type: "string"
                "lastRun":
                    type: "number"
                    example: 1717757617
                "status":
                    type: "number"
                    example: 200
                "results":
                    type: "array"
                    items: {"$ref": "#/components/schemas/SubnetMapping"}
            required:
                - "status"
                - "results"
        LegacyNetworks:
            type: "string"
            enum:
                - "mainnet"
                - "fuji"
        ChainInformation:
            type: "object"
            properties:
                "subnetID":
                    type: "string"
                "timestamp":
                    type: "number"
                "blockchainID":
                    type: "string"
                "vmID":
                    type: "string"
                "chainName":
                    type: "string"
            required:
                - "subnetID"
                - "timestamp"
                - "blockchainID"
                - "vmID"
                - "chainName"
        ChainInformationResponse:
            type: "object"
            properties:
                "nextPageStartKey":
                    type: "string"
                "lastRun":
                    type: "number"
                    example: 1717757617
                "status":
                    type: "number"
                    example: 200
                "results":
                    type: "array"
                    items: {"$ref": "#/components/schemas/ChainInformation"}
            required:
                - "status"
                - "results"
        SubnetInformation:
            type: "object"
            properties:
                "controlKeys":
                    type: "array"
                    items:
                        type: "string"
                "threshold":
                    type: "number"
                "subnetID":
                    type: "string"
                "timestamp":
                    type: "number"
                "validatorCount":
                    type: "number"
            required:
                - "controlKeys"
                - "threshold"
                - "subnetID"
                - "timestamp"
                - "validatorCount"
        SubnetsResponse:
            type: "object"
            properties:
                "nextPageStartKey":
                    type: "string"
                "lastRun":
                    type: "number"
                    example: 1717757617
                "status":
                    type: "number"
                    example: 200
                "results":
                    type: "array"
                    items: {"$ref": "#/components/schemas/SubnetInformation"}
            required:
                - "status"
                - "results"
        LegacyInterval:
            type: "string"
            enum:
                - "hour"
                - "day"
                - "week"
                - "month"
        LegacyEvmMetric:
            type: "object"
            properties:
                "timestamp":
                    type: "number"
                "value":
                    type: "number"
            required:
                - "timestamp"
                - "value"
        LegacyEvmMetricsResponse:
            type: "object"
            properties:
                "nextPageStartKey":
                    type: "string"
                "lastRun":
                    type: "number"
                    example: 1717757617
                "status":
                    type: "number"
                    example: 200
                "results":
                    type: "array"
                    items: {"$ref": "#/components/schemas/LegacyEvmMetric"}
            required:
                - "status"
                - "results"
        RollingWindowResponse:
            type: "object"
            properties:
                "nextPageStartKey":
                    type: "string"
                "lastRun":
                    type: "number"
                    example: 1717757617
                "status":
                    type: "number"
                    example: 200
                "result":
                    oneOf:
                        - type: "object"
                          properties:
                            "last_hour":
                                type: "number"
                            "last_day":
                                type: "number"
                            "last_month":
                                type: "number"
                            "last_year":
                                type: "number"
                            "all_time":
                                type: "number"
                        - type: "object"
            required:
                - "status"
                - "result"
        StakingInformation:
            type: "object"
            properties:
                "value":
                    type: "number"
                "timestamp":
                    type: "number"
                "subnetID":
                    type: "string"
            required:
                - "value"
                - "timestamp"
                - "subnetID"
        StakingInformationResponse:
            type: "object"
            properties:
                "nextPageStartKey":
                    type: "string"
                "lastRun":
                    type: "number"
                    example: 1717757617
                "status":
                    type: "number"
                    example: 200
                "results":
                    type: "array"
                    items: {"$ref": "#/components/schemas/StakingInformation"}
            required:
                - "status"
                - "results"
tags:
    - name: "EVM Chains"
      description: "Find information about which routes are supported for a given EVM chainID."
    - name: "EVM Blocks"
      description: "Find information about blocks on EVM-compatible chains, such as the Avalanche C-Chain."
    - name: "EVM Transactions"
      description: "Find information about transactions on EVM-compatible chains, such as the Avalanche C-Chain."
    - name: "EVM Balances"
      description: "Find information about balances on EVM-compatible chains, such as the Avalanche C-Chain."
    - name: "EVM Contracts"
      description: "Find information about contracts on EVM-compatible chains, such as the Avalanche C-Chain."
    - name: "Primary Network"
    - name: "Primary Network Blocks"
      description: "Find information about blocks on Avalanche's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    - name: "Primary Network Vertices"
      description: "Find information about vertices on Avalanche's X-Chain."
    - name: "Primary Network Transactions"
      description: "Find information about transactions on Avalanche's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    - name: "Primary Network Balances"
      description: "Find information about balances on Avalanche's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    - name: "Primary Network UTXOs"
      description: "Find information about utxos on Avalanche's Primary Network Chains - the P-Chain, the X-Chain, and the C-Chain."
    - name: "Primary Network Rewards"
      description: "Find information about rewards on Avalanche's Primary Network."
    - name: "NFTs"
    - name: "Operations"
    - name: "Health Check"
    - name: "Teleporter"
      description: "Find information about Teleporter transactions."
    - name: "Webhooks"
      description: "Manage webhooks and get notified for various onchain activities."
    - name: "RPC"
      description: "Interact with chain nodes using JSON-RPC."
    - name: "Chain Metrics"
      description: "Get network level staking and usage metrics."
    - name: "Looking Glass"
      description: "Looking Glass is a tool that allows users to look up information for future airdrops."
    - name: "Chain Throughput"
      description: "Get throughput metrics for a given chain."
    - name: "Cumulative"
      description: "Get cumulative metrics for a given chain."
    - name: "Staking Information"
      description: "Get staking information for a given chain."
x-speakeasy-retries: {"strategy": "backoff", "backoff": {"initialInterval": 500, "maxInterval": 60000, "maxElapsedTime": 3600000, "exponent": 1.5}, "statusCodes": ["5XX"], "retryConnectionErrors": true}
x-speakeasy-globals: {"parameters": [{"name": "chainId", "in": "path", "schema": {"type": "string"}}, {"name": "network", "in": "path", "schema": {"type": "string"}}]}
