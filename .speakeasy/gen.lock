lockVersion: 2.0.0
id: 2b9c4bf6-4d87-4382-84d9-5fb3c84c7fad
management:
  docChecksum: 131a10a41700fd631d49a44f585a1ec1
  docVersion: Beta
  speakeasyVersion: 1.456.1
  generationVersion: 2.481.0
  releaseVersion: 0.8.4
  configChecksum: cf8e7f857f95610fd25bd7f02a8481d4
  repoURL: https://github.com/ava-labs/avacloud-sdk-typescript.git
  installationURL: https://github.com/ava-labs/avacloud-sdk-typescript
  published: true
features:
  typescript:
    additionalDependencies: 0.1.0
    additionalProperties: 0.1.1
    constsAndDefaults: 0.1.11
    core: 3.18.11
    defaultEnabledRetries: 0.1.0
    deprecations: 2.81.1
    devContainers: 2.90.0
    enumUnions: 0.1.0
    envVarSecurityUsage: 0.1.2
    examples: 2.81.4
    globalSecurity: 2.82.11
    globalSecurityCallbacks: 0.1.0
    globalSecurityFlattening: 0.1.0
    globals: 2.82.1
    groups: 2.81.2
    ignores: 2.81.1
    methodServerURLs: 2.82.1
    nameOverrides: 2.81.2
    nullables: 0.1.0
    pagination: 2.82.7
    responseFormat: 0.2.3
    retries: 2.83.0
    sdkHooks: 0.2.0
    unions: 2.85.8
generatedFiles:
  - .devcontainer/README.md
  - .devcontainer/devcontainer.json
  - .devcontainer/setup.sh
  - .eslintrc.cjs
  - .gitattributes
  - .npmignore
  - CONTRIBUTING.md
  - FUNCTIONS.md
  - RUNTIMES.md
  - USAGE.md
  - docs/lib/utils/retryconfig.md
  - docs/models/components/activedelegatordetails.md
  - docs/models/components/activedelegatordetailsdelegationstatus.md
  - docs/models/components/activevalidatordetails.md
  - docs/models/components/activevalidatordetailsvalidationstatus.md
  - docs/models/components/addressactivitymetadata.md
  - docs/models/components/addressdetails.md
  - docs/models/components/addresseschangerequest.md
  - docs/models/components/aggregatedassetamount.md
  - docs/models/components/alltimeerc20balancequerydto.md
  - docs/models/components/alltimeerc20balancequerydtotype.md
  - docs/models/components/alltimenativebalancequerydto.md
  - docs/models/components/alltimenftholdersquerydto.md
  - docs/models/components/alltimenftholdersquerydtotype.md
  - docs/models/components/alltimestarsarenabalancequerydto.md
  - docs/models/components/alltimestarsarenabalancequerydtotype.md
  - docs/models/components/anytimeerc20balancequerydto.md
  - docs/models/components/anytimeerc20balancequerydtotype.md
  - docs/models/components/anytimenativebalancequerydto.md
  - docs/models/components/anytimenativebalancequerydtotype.md
  - docs/models/components/anytimenftholdersquerydto.md
  - docs/models/components/anytimenftholdersquerydtoparams.md
  - docs/models/components/anytimenftholdersquerydtotype.md
  - docs/models/components/anytimestarsarenabalancequerydto.md
  - docs/models/components/anytimestarsarenabalancequerydtotype.md
  - docs/models/components/apifeature.md
  - docs/models/components/assetamount.md
  - docs/models/components/assetwithpriceinfo.md
  - docs/models/components/balanceowner.md
  - docs/models/components/blockchain.md
  - docs/models/components/blockchainid.md
  - docs/models/components/blockchainids.md
  - docs/models/components/blockchaininfo.md
  - docs/models/components/blscredentials.md
  - docs/models/components/cchainatomicbalances.md
  - docs/models/components/cchainexporttransaction.md
  - docs/models/components/cchainimporttransaction.md
  - docs/models/components/cchainimporttransactiontxtype.md
  - docs/models/components/cchainsharedassetbalance.md
  - docs/models/components/chain.md
  - docs/models/components/chainaddresschainidmap.md
  - docs/models/components/chainaddresschainidmaplistresponse.md
  - docs/models/components/chainformat.md
  - docs/models/components/chaininfo.md
  - docs/models/components/chainmetric.md
  - docs/models/components/chainrollingwindowmetric.md
  - docs/models/components/chainrollingwindowmetricsvalue.md
  - docs/models/components/chainstatus.md
  - docs/models/components/collectiblebalances.md
  - docs/models/components/completeddelegatordetails.md
  - docs/models/components/completedvalidatordetails.md
  - docs/models/components/compositequeryrequestdto.md
  - docs/models/components/compositequeryresponse.md
  - docs/models/components/contractdeploymentdetails.md
  - docs/models/components/contracts.md
  - docs/models/components/createevmtransactionexportrequest.md
  - docs/models/components/createprimarynetworktransactionexportrequest.md
  - docs/models/components/createwebhookrequest.md
  - docs/models/components/createwebhookrequestmetadata.md
  - docs/models/components/currencycode.md
  - docs/models/components/datalistchainsresponse.md
  - docs/models/components/daterangeerc20minbalanceparam.md
  - docs/models/components/daterangeminbalanceparam.md
  - docs/models/components/daterangenftholdersparam.md
  - docs/models/components/daterangestarsarenaminbalanceparam.md
  - docs/models/components/delegationstatus.md
  - docs/models/components/delegationstatustype.md
  - docs/models/components/delegators.md
  - docs/models/components/delegatorsdetails.md
  - docs/models/components/deliveredsourcenotindexedteleportermessage.md
  - docs/models/components/deliveredsourcenotindexedteleportermessagestatus.md
  - docs/models/components/deliveredteleportermessage.md
  - docs/models/components/deliveredteleportermessagestatus.md
  - docs/models/components/destinationchainid.md
  - docs/models/components/enabledfeatures.md
  - docs/models/components/erc1155contract.md
  - docs/models/components/erc1155contracterctype.md
  - docs/models/components/erc1155token.md
  - docs/models/components/erc1155tokenbalance.md
  - docs/models/components/erc1155tokenbalanceerctype.md
  - docs/models/components/erc1155tokenerctype.md
  - docs/models/components/erc1155tokenmetadata.md
  - docs/models/components/erc1155transfer.md
  - docs/models/components/erc1155transferdetails.md
  - docs/models/components/erc20contract.md
  - docs/models/components/erc20contracterctype.md
  - docs/models/components/erc20token.md
  - docs/models/components/erc20tokenbalance.md
  - docs/models/components/erc20tokenbalanceerctype.md
  - docs/models/components/erc20tokenerctype.md
  - docs/models/components/erc20transfer.md
  - docs/models/components/erc20transferdetails.md
  - docs/models/components/erc721contract.md
  - docs/models/components/erc721contracterctype.md
  - docs/models/components/erc721token.md
  - docs/models/components/erc721tokenbalance.md
  - docs/models/components/erc721tokenbalanceerctype.md
  - docs/models/components/erc721tokenmetadata.md
  - docs/models/components/erc721transfer.md
  - docs/models/components/erc721transferdetails.md
  - docs/models/components/erctype.md
  - docs/models/components/eventtype.md
  - docs/models/components/evmblock.md
  - docs/models/components/evminput.md
  - docs/models/components/evmnetworkoptions.md
  - docs/models/components/evmoperationtype.md
  - docs/models/components/evmoutput.md
  - docs/models/components/fullnativetransactiondetails.md
  - docs/models/components/getchainresponse.md
  - docs/models/components/getchainresponseenabledfeatures.md
  - docs/models/components/getevmblockresponse.md
  - docs/models/components/getnativebalanceresponse.md
  - docs/models/components/getnetworkdetailsresponse.md
  - docs/models/components/getprimarynetworkblockresponse.md
  - docs/models/components/gettransactionresponse.md
  - docs/models/components/globalparamnetwork.md
  - docs/models/components/groupedby.md
  - docs/models/components/groupvalue.md
  - docs/models/components/historicalreward.md
  - docs/models/components/imageasset.md
  - docs/models/components/includechains.md
  - docs/models/components/internaltransaction.md
  - docs/models/components/internaltransactiondetails.md
  - docs/models/components/internaltransactionopcall.md
  - docs/models/components/l1validatordetailsfull.md
  - docs/models/components/l1validatordetailsfullblscredentials.md
  - docs/models/components/l1validatordetailstransaction.md
  - docs/models/components/l1validatordetailstransactionblscredentials.md
  - docs/models/components/l1validatormanagerdetails.md
  - docs/models/components/latestbalanceparams.md
  - docs/models/components/latestbalancequerydto.md
  - docs/models/components/latestbalancequerydtotype.md
  - docs/models/components/lateststarsarenabalanceparams.md
  - docs/models/components/lateststarsarenabalancequerydto.md
  - docs/models/components/lateststarsarenabalancequerydtotype.md
  - docs/models/components/listaddresschainsresponse.md
  - docs/models/components/listblockchainsresponse.md
  - docs/models/components/listcchainatomicbalancesresponse.md
  - docs/models/components/listcchainatomictransactionsresponse.md
  - docs/models/components/listcchainatomictransactionsresponsetransactions.md
  - docs/models/components/listcollectiblebalancesresponse.md
  - docs/models/components/listcontractsresponse.md
  - docs/models/components/listdelegatordetailsresponse.md
  - docs/models/components/listerc1155balancesresponse.md
  - docs/models/components/listerc1155transactionsresponse.md
  - docs/models/components/listerc20balancesresponse.md
  - docs/models/components/listerc20transactionsresponse.md
  - docs/models/components/listerc721balancesresponse.md
  - docs/models/components/listerc721transactionsresponse.md
  - docs/models/components/listevmblocksresponse.md
  - docs/models/components/listhistoricalrewardsresponse.md
  - docs/models/components/listinternaltransactionsresponse.md
  - docs/models/components/listl1validatorsresponse.md
  - docs/models/components/listnativetransactionsresponse.md
  - docs/models/components/listnfttokens.md
  - docs/models/components/listpchainbalancesresponse.md
  - docs/models/components/listpchaintransactionsresponse.md
  - docs/models/components/listpchainutxosresponse.md
  - docs/models/components/listpendingrewardsresponse.md
  - docs/models/components/listprimarynetworkblocksresponse.md
  - docs/models/components/listsubnetsresponse.md
  - docs/models/components/listteleportermessagesresponse.md
  - docs/models/components/listtransactiondetailsresponse.md
  - docs/models/components/listtransfersresponse.md
  - docs/models/components/listutxosresponse.md
  - docs/models/components/listvalidatordetailsresponse.md
  - docs/models/components/listwebhookaddressesresponse.md
  - docs/models/components/listwebhooksresponse.md
  - docs/models/components/listxchainbalancesresponse.md
  - docs/models/components/listxchaintransactionsresponse.md
  - docs/models/components/listxchainverticesresponse.md
  - docs/models/components/logsformat.md
  - docs/models/components/logsformatmetadata.md
  - docs/models/components/logsresponsedto.md
  - docs/models/components/lookingglassresponse.md
  - docs/models/components/messages.md
  - docs/models/components/metadata.md
  - docs/models/components/method.md
  - docs/models/components/metric.md
  - docs/models/components/metricsapiresponse.md
  - docs/models/components/metricslistchainsresponse.md
  - docs/models/components/metricsvalue.md
  - docs/models/components/money.md
  - docs/models/components/nativetokenbalance.md
  - docs/models/components/nativetransaction.md
  - docs/models/components/network.md
  - docs/models/components/networkmetric.md
  - docs/models/components/networktoken.md
  - docs/models/components/networktokendetails.md
  - docs/models/components/networktype.md
  - docs/models/components/nftholdersresponse.md
  - docs/models/components/nfttokenmetadatastatus.md
  - docs/models/components/operationstatus.md
  - docs/models/components/operationstatuscode.md
  - docs/models/components/operationstatusresponse.md
  - docs/models/components/operationtype.md
  - docs/models/components/operator.md
  - docs/models/components/params.md
  - docs/models/components/pchainaddressdetails.md
  - docs/models/components/pchainbalance.md
  - docs/models/components/pchainid.md
  - docs/models/components/pchainlookingglassresponse.md
  - docs/models/components/pchainsharedasset.md
  - docs/models/components/pchaintransaction.md
  - docs/models/components/pchaintransactiontype.md
  - docs/models/components/pchainutxo.md
  - docs/models/components/pendingdelegatordetails.md
  - docs/models/components/pendingdelegatordetailsdelegationstatus.md
  - docs/models/components/pendingreward.md
  - docs/models/components/pendingteleportermessage.md
  - docs/models/components/pendingvalidatordetails.md
  - docs/models/components/pendingvalidatordetailsvalidationstatus.md
  - docs/models/components/pricingproviders.md
  - docs/models/components/primarynetworkassetcap.md
  - docs/models/components/primarynetworkassettype.md
  - docs/models/components/primarynetworkblock.md
  - docs/models/components/primarynetworkchaininfo.md
  - docs/models/components/primarynetworkchainname.md
  - docs/models/components/primarynetworkoperationtype.md
  - docs/models/components/primarynetworkoptions.md
  - docs/models/components/primarynetworktxtype.md
  - docs/models/components/proposerdetails.md
  - docs/models/components/queries.md
  - docs/models/components/removedvalidatordetails.md
  - docs/models/components/removedvalidatordetailsvalidationstatus.md
  - docs/models/components/requesttype.md
  - docs/models/components/resourcelink.md
  - docs/models/components/resourcelinktype.md
  - docs/models/components/rewards.md
  - docs/models/components/rewardtype.md
  - docs/models/components/richaddress.md
  - docs/models/components/rollingwindowmetricsapiresponse.md
  - docs/models/components/security.md
  - docs/models/components/sharedsecretsresponse.md
  - docs/models/components/signatureaggregationresponse.md
  - docs/models/components/signatureaggregatorrequest.md
  - docs/models/components/sortbyoption.md
  - docs/models/components/sortorder.md
  - docs/models/components/sourcechainid.md
  - docs/models/components/stakingdistribution.md
  - docs/models/components/status.md
  - docs/models/components/subnet.md
  - docs/models/components/subnetownershipinfo.md
  - docs/models/components/teleporterchainmetricsapiresponse.md
  - docs/models/components/teleporterdestinationtransaction.md
  - docs/models/components/teleportermessageinfo.md
  - docs/models/components/teleportermetric.md
  - docs/models/components/teleportermetricsvalue.md
  - docs/models/components/teleporterreceipt.md
  - docs/models/components/teleporterrewarddetails.md
  - docs/models/components/teleporterrewarddetailserctype.md
  - docs/models/components/teleportersourcetransaction.md
  - docs/models/components/timeintervalgranularity.md
  - docs/models/components/timeintervalgranularityextended.md
  - docs/models/components/timestamprangenftholdersparam.md
  - docs/models/components/tokens.md
  - docs/models/components/tokenstatus.md
  - docs/models/components/tokentype.md
  - docs/models/components/transactiondetails.md
  - docs/models/components/transactiondirectiontype.md
  - docs/models/components/transactionexportmetadata.md
  - docs/models/components/transactionmethodtype.md
  - docs/models/components/transactions.md
  - docs/models/components/transactionstatus.md
  - docs/models/components/transactionvertexdetail.md
  - docs/models/components/transfers.md
  - docs/models/components/txtype.md
  - docs/models/components/type.md
  - docs/models/components/unknowncontract.md
  - docs/models/components/unknowncontracterctype.md
  - docs/models/components/updatewebhookrequest.md
  - docs/models/components/usagemetricsgroupbyenum.md
  - docs/models/components/usagemetricsresponsedto.md
  - docs/models/components/usagemetricsvaluedto.md
  - docs/models/components/utilityaddresses.md
  - docs/models/components/utxo.md
  - docs/models/components/utxocredential.md
  - docs/models/components/utxotype.md
  - docs/models/components/validationstatus.md
  - docs/models/components/validationstatustype.md
  - docs/models/components/validatorhealthdetails.md
  - docs/models/components/validators.md
  - docs/models/components/validatorsdetails.md
  - docs/models/components/vmname.md
  - docs/models/components/webhookresponse.md
  - docs/models/components/webhookresponsemetadata.md
  - docs/models/components/webhookstatus.md
  - docs/models/components/webhookstatustype.md
  - docs/models/components/xchainassetdetails.md
  - docs/models/components/xchainbalances.md
  - docs/models/components/xchainid.md
  - docs/models/components/xchainlineartransaction.md
  - docs/models/components/xchainlineartransactionchainformat.md
  - docs/models/components/xchainnonlineartransaction.md
  - docs/models/components/xchainsharedassetbalance.md
  - docs/models/components/xchaintransactiontype.md
  - docs/models/components/xchainvertex.md
  - docs/models/errors/badgateway.md
  - docs/models/errors/badgatewaymessage.md
  - docs/models/errors/badrequest.md
  - docs/models/errors/datahealthcheckdetails.md
  - docs/models/errors/datahealthcheckerror.md
  - docs/models/errors/datahealthcheckinfo.md
  - docs/models/errors/datahealthcheckresponsebody.md
  - docs/models/errors/details.md
  - docs/models/errors/errort.md
  - docs/models/errors/forbidden.md
  - docs/models/errors/forbiddenmessage.md
  - docs/models/errors/info.md
  - docs/models/errors/internalservererror.md
  - docs/models/errors/internalservererrormessage.md
  - docs/models/errors/message.md
  - docs/models/errors/metricshealthcheckresponsebody.md
  - docs/models/errors/notfound.md
  - docs/models/errors/notfoundmessage.md
  - docs/models/errors/serviceunavailable.md
  - docs/models/errors/serviceunavailablemessage.md
  - docs/models/errors/toomanyrequests.md
  - docs/models/errors/toomanyrequestsmessage.md
  - docs/models/errors/unauthorized.md
  - docs/models/errors/unauthorizedmessage.md
  - docs/models/operations/addaddressestowebhookrequest.md
  - docs/models/operations/compositequeryv2response.md
  - docs/models/operations/datahealthcheckdetails.md
  - docs/models/operations/datahealthcheckerror.md
  - docs/models/operations/datahealthcheckinfo.md
  - docs/models/operations/datahealthcheckresponsebody.md
  - docs/models/operations/deactivatewebhookrequest.md
  - docs/models/operations/details.md
  - docs/models/operations/errort.md
  - docs/models/operations/getaddresschainsrequest.md
  - docs/models/operations/getaddressesbybalanceovertimeglobals.md
  - docs/models/operations/getaddressesbybalanceovertimerequest.md
  - docs/models/operations/getaddressesbybalanceovertimeresponse.md
  - docs/models/operations/getaddressesbybtcbbridgedrequest.md
  - docs/models/operations/getaddressesbybtcbbridgedresponse.md
  - docs/models/operations/getaddressesfromwebhookrequest.md
  - docs/models/operations/getaddressesfromwebhookresponse.md
  - docs/models/operations/getapilogsrequest.md
  - docs/models/operations/getapilogsresponse.md
  - docs/models/operations/getapiusagemetricsrequest.md
  - docs/models/operations/getassetdetailsglobals.md
  - docs/models/operations/getassetdetailsrequest.md
  - docs/models/operations/getbalancesbyaddressesglobals.md
  - docs/models/operations/getbalancesbyaddressesrequest.md
  - docs/models/operations/getbalancesbyaddressesresponsebody.md
  - docs/models/operations/getblockbyidglobals.md
  - docs/models/operations/getblockbyidrequest.md
  - docs/models/operations/getblockglobals.md
  - docs/models/operations/getblockrequest.md
  - docs/models/operations/getchainglobals.md
  - docs/models/operations/getchainidsforaddressesglobals.md
  - docs/models/operations/getchainidsforaddressesrequest.md
  - docs/models/operations/getchaininfoglobals.md
  - docs/models/operations/getchaininforequest.md
  - docs/models/operations/getchainrequest.md
  - docs/models/operations/getcontractmetadataglobals.md
  - docs/models/operations/getcontractmetadatarequest.md
  - docs/models/operations/getcontractmetadataresponsebody.md
  - docs/models/operations/getdeploymenttransactionglobals.md
  - docs/models/operations/getdeploymenttransactionrequest.md
  - docs/models/operations/getevmchainmetricsglobals.md
  - docs/models/operations/getevmchainmetricsrequest.md
  - docs/models/operations/getevmchainmetricsresponse.md
  - docs/models/operations/getevmchainrollingwindowmetricsglobals.md
  - docs/models/operations/getevmchainrollingwindowmetricsrequest.md
  - docs/models/operations/getlatestblocksglobals.md
  - docs/models/operations/getlatestblocksrequest.md
  - docs/models/operations/getlatestblocksresponse.md
  - docs/models/operations/getnativebalanceglobals.md
  - docs/models/operations/getnativebalancerequest.md
  - docs/models/operations/getnetworkdetailsglobals.md
  - docs/models/operations/getnetworkdetailsrequest.md
  - docs/models/operations/getnftholdersbycontractaddressglobals.md
  - docs/models/operations/getnftholdersbycontractaddressrequest.md
  - docs/models/operations/getnftholdersbycontractaddressresponse.md
  - docs/models/operations/getoperationresultrequest.md
  - docs/models/operations/getsinglevalidatordetailsglobals.md
  - docs/models/operations/getsinglevalidatordetailsrequest.md
  - docs/models/operations/getsinglevalidatordetailsresponse.md
  - docs/models/operations/getstakingmetricsglobals.md
  - docs/models/operations/getstakingmetricsrequest.md
  - docs/models/operations/getstakingmetricsresponse.md
  - docs/models/operations/getsubnetbyidglobals.md
  - docs/models/operations/getsubnetbyidrequest.md
  - docs/models/operations/getteleportermessagerequest.md
  - docs/models/operations/getteleportermessageresponsebody.md
  - docs/models/operations/getteleportermetricsbychainglobals.md
  - docs/models/operations/getteleportermetricsbychainrequest.md
  - docs/models/operations/gettokendetailsglobals.md
  - docs/models/operations/gettokendetailsrequest.md
  - docs/models/operations/gettokendetailsresponsebody.md
  - docs/models/operations/gettransactionglobals.md
  - docs/models/operations/gettransactionrequest.md
  - docs/models/operations/gettransactionsforblockglobals.md
  - docs/models/operations/gettransactionsforblockrequest.md
  - docs/models/operations/gettxbyhashglobals.md
  - docs/models/operations/gettxbyhashrequest.md
  - docs/models/operations/gettxbyhashresponsebody.md
  - docs/models/operations/getutxosbyaddressesglobals.md
  - docs/models/operations/getutxosbyaddressesrequest.md
  - docs/models/operations/getutxosbyaddressesresponse.md
  - docs/models/operations/getutxosbyaddressesresponsebody.md
  - docs/models/operations/getvalidatorsbydaterangerequest.md
  - docs/models/operations/getvalidatorsbydaterangeresponse.md
  - docs/models/operations/getvertexbyhashglobals.md
  - docs/models/operations/getvertexbyhashrequest.md
  - docs/models/operations/getvertexbyheightglobals.md
  - docs/models/operations/getvertexbyheightrequest.md
  - docs/models/operations/getvertexbyheightresponse.md
  - docs/models/operations/getwebhookrequest.md
  - docs/models/operations/info.md
  - docs/models/operations/listactiveprimarynetworkstakingtransactionsglobals.md
  - docs/models/operations/listactiveprimarynetworkstakingtransactionsrequest.md
  - docs/models/operations/listactiveprimarynetworkstakingtransactionsresponse.md
  - docs/models/operations/listassettransactionsglobals.md
  - docs/models/operations/listassettransactionsrequest.md
  - docs/models/operations/listassettransactionsresponse.md
  - docs/models/operations/listblockchainsglobals.md
  - docs/models/operations/listblockchainsrequest.md
  - docs/models/operations/listblockchainsresponse.md
  - docs/models/operations/listchainsrequest.md
  - docs/models/operations/listchainsresponse.md
  - docs/models/operations/listcollectiblebalancesglobals.md
  - docs/models/operations/listcollectiblebalancesrequest.md
  - docs/models/operations/listcollectiblebalancesresponse.md
  - docs/models/operations/listcontractdeploymentsglobals.md
  - docs/models/operations/listcontractdeploymentsrequest.md
  - docs/models/operations/listcontractdeploymentsresponse.md
  - docs/models/operations/listdelegatorsglobals.md
  - docs/models/operations/listdelegatorsrequest.md
  - docs/models/operations/listdelegatorsresponse.md
  - docs/models/operations/listerc1155balancesglobals.md
  - docs/models/operations/listerc1155balancesrequest.md
  - docs/models/operations/listerc1155balancesresponse.md
  - docs/models/operations/listerc1155transactionsglobals.md
  - docs/models/operations/listerc1155transactionsrequest.md
  - docs/models/operations/listerc1155transactionsresponse.md
  - docs/models/operations/listerc20balancesglobals.md
  - docs/models/operations/listerc20balancesrequest.md
  - docs/models/operations/listerc20balancesresponse.md
  - docs/models/operations/listerc20transactionsglobals.md
  - docs/models/operations/listerc20transactionsrequest.md
  - docs/models/operations/listerc20transactionsresponse.md
  - docs/models/operations/listerc721balancesglobals.md
  - docs/models/operations/listerc721balancesrequest.md
  - docs/models/operations/listerc721balancesresponse.md
  - docs/models/operations/listerc721transactionsglobals.md
  - docs/models/operations/listerc721transactionsrequest.md
  - docs/models/operations/listerc721transactionsresponse.md
  - docs/models/operations/listhistoricalprimarynetworkrewardsglobals.md
  - docs/models/operations/listhistoricalprimarynetworkrewardsrequest.md
  - docs/models/operations/listhistoricalprimarynetworkrewardsresponse.md
  - docs/models/operations/listinternaltransactionsglobals.md
  - docs/models/operations/listinternaltransactionsrequest.md
  - docs/models/operations/listinternaltransactionsresponse.md
  - docs/models/operations/listl1validatorsglobals.md
  - docs/models/operations/listl1validatorsrequest.md
  - docs/models/operations/listl1validatorsresponse.md
  - docs/models/operations/listlatestprimarynetworkblocksglobals.md
  - docs/models/operations/listlatestprimarynetworkblocksrequest.md
  - docs/models/operations/listlatestprimarynetworkblocksresponse.md
  - docs/models/operations/listlatestprimarynetworktransactionsglobals.md
  - docs/models/operations/listlatestprimarynetworktransactionsrequest.md
  - docs/models/operations/listlatestprimarynetworktransactionsresponse.md
  - docs/models/operations/listlatestprimarynetworktransactionsresponsebody.md
  - docs/models/operations/listlatesttransactionsglobals.md
  - docs/models/operations/listlatesttransactionsrequest.md
  - docs/models/operations/listlatesttransactionsresponse.md
  - docs/models/operations/listlatestxchainverticesglobals.md
  - docs/models/operations/listlatestxchainverticesrequest.md
  - docs/models/operations/listlatestxchainverticesresponse.md
  - docs/models/operations/listnativetransactionsglobals.md
  - docs/models/operations/listnativetransactionsrequest.md
  - docs/models/operations/listnativetransactionsresponse.md
  - docs/models/operations/listpendingprimarynetworkrewardsglobals.md
  - docs/models/operations/listpendingprimarynetworkrewardsrequest.md
  - docs/models/operations/listpendingprimarynetworkrewardsresponse.md
  - docs/models/operations/listprimarynetworkblocksbynodeidglobals.md
  - docs/models/operations/listprimarynetworkblocksbynodeidrequest.md
  - docs/models/operations/listprimarynetworkblocksbynodeidresponse.md
  - docs/models/operations/listsubnetsglobals.md
  - docs/models/operations/listsubnetsrequest.md
  - docs/models/operations/listsubnetsresponse.md
  - docs/models/operations/listteleportermessagesbyaddressrequest.md
  - docs/models/operations/listteleportermessagesrequest.md
  - docs/models/operations/listteleportermessagesresponse.md
  - docs/models/operations/listtokensglobals.md
  - docs/models/operations/listtokensrequest.md
  - docs/models/operations/listtokensresponse.md
  - docs/models/operations/listtransactionsglobals.md
  - docs/models/operations/listtransactionsrequest.md
  - docs/models/operations/listtransactionsresponse.md
  - docs/models/operations/listtransfersglobals.md
  - docs/models/operations/listtransfersrequest.md
  - docs/models/operations/listtransfersresponse.md
  - docs/models/operations/listvalidatorsglobals.md
  - docs/models/operations/listvalidatorsrequest.md
  - docs/models/operations/listvalidatorsresponse.md
  - docs/models/operations/listwebhooksrequest.md
  - docs/models/operations/listwebhooksresponse.md
  - docs/models/operations/metricshealthcheckresponsebody.md
  - docs/models/operations/posttransactionexportjobrequestbody.md
  - docs/models/operations/queryparamrequesttype.md
  - docs/models/operations/reindexnftglobals.md
  - docs/models/operations/reindexnftrequest.md
  - docs/models/operations/removeaddressesfromwebhookrequest.md
  - docs/models/operations/requesttype.md
  - docs/models/operations/supportedchainsrequest.md
  - docs/models/operations/updatewebhookrequest.md
  - docs/sdks/avacloudsdk/README.md
  - docs/sdks/avacloudsdkbalances/README.md
  - docs/sdks/avacloudsdkblocks/README.md
  - docs/sdks/avacloudsdkchains/README.md
  - docs/sdks/avacloudsdkevm/README.md
  - docs/sdks/avacloudsdkhealthcheck/README.md
  - docs/sdks/avacloudsdkmetrics/README.md
  - docs/sdks/avacloudsdktransactions/README.md
  - docs/sdks/balances/README.md
  - docs/sdks/blocks/README.md
  - docs/sdks/chain/README.md
  - docs/sdks/chains/README.md
  - docs/sdks/contracts/README.md
  - docs/sdks/data/README.md
  - docs/sdks/evm/README.md
  - docs/sdks/healthcheck/README.md
  - docs/sdks/lookingglass/README.md
  - docs/sdks/metrics/README.md
  - docs/sdks/nfts/README.md
  - docs/sdks/operations/README.md
  - docs/sdks/primarynetwork/README.md
  - docs/sdks/rewards/README.md
  - docs/sdks/signatureaggregator/README.md
  - docs/sdks/teleporter/README.md
  - docs/sdks/transactions/README.md
  - docs/sdks/usagemetrics/README.md
  - docs/sdks/utxos/README.md
  - docs/sdks/vertices/README.md
  - docs/sdks/webhooks/README.md
  - package.json
  - src/core.ts
  - src/funcs/dataEvmBalancesGetNativeBalance.ts
  - src/funcs/dataEvmBalancesListCollectibleBalances.ts
  - src/funcs/dataEvmBalancesListErc1155Balances.ts
  - src/funcs/dataEvmBalancesListErc20Balances.ts
  - src/funcs/dataEvmBalancesListErc721Balances.ts
  - src/funcs/dataEvmBlocksGetBlock.ts
  - src/funcs/dataEvmBlocksGetLatestBlocks.ts
  - src/funcs/dataEvmChainsGetAddressChains.ts
  - src/funcs/dataEvmChainsGetChainInfo.ts
  - src/funcs/dataEvmChainsSupportedChains.ts
  - src/funcs/dataEvmContractsGetContractMetadata.ts
  - src/funcs/dataEvmTransactionsGetDeploymentTransaction.ts
  - src/funcs/dataEvmTransactionsGetTransaction.ts
  - src/funcs/dataEvmTransactionsGetTransactionsForBlock.ts
  - src/funcs/dataEvmTransactionsListContractDeployments.ts
  - src/funcs/dataEvmTransactionsListErc1155Transactions.ts
  - src/funcs/dataEvmTransactionsListErc20Transactions.ts
  - src/funcs/dataEvmTransactionsListErc721Transactions.ts
  - src/funcs/dataEvmTransactionsListInternalTransactions.ts
  - src/funcs/dataEvmTransactionsListLatestTransactions.ts
  - src/funcs/dataEvmTransactionsListNativeTransactions.ts
  - src/funcs/dataEvmTransactionsListTransactions.ts
  - src/funcs/dataEvmTransactionsListTransfers.ts
  - src/funcs/dataHealthCheckDataHealthCheck.ts
  - src/funcs/dataNftsGetTokenDetails.ts
  - src/funcs/dataNftsListTokens.ts
  - src/funcs/dataNftsReindexNft.ts
  - src/funcs/dataOperationsGetOperationResult.ts
  - src/funcs/dataOperationsPostTransactionExportJob.ts
  - src/funcs/dataPrimaryNetworkBalancesGetBalancesByAddresses.ts
  - src/funcs/dataPrimaryNetworkBlocksGetBlockById.ts
  - src/funcs/dataPrimaryNetworkBlocksListLatestPrimaryNetworkBlocks.ts
  - src/funcs/dataPrimaryNetworkBlocksListPrimaryNetworkBlocksByNodeId.ts
  - src/funcs/dataPrimaryNetworkGetAssetDetails.ts
  - src/funcs/dataPrimaryNetworkGetChainIdsForAddresses.ts
  - src/funcs/dataPrimaryNetworkGetNetworkDetails.ts
  - src/funcs/dataPrimaryNetworkGetSingleValidatorDetails.ts
  - src/funcs/dataPrimaryNetworkGetSubnetById.ts
  - src/funcs/dataPrimaryNetworkListBlockchains.ts
  - src/funcs/dataPrimaryNetworkListDelegators.ts
  - src/funcs/dataPrimaryNetworkListL1Validators.ts
  - src/funcs/dataPrimaryNetworkListSubnets.ts
  - src/funcs/dataPrimaryNetworkListValidators.ts
  - src/funcs/dataPrimaryNetworkRewardsListHistoricalPrimaryNetworkRewards.ts
  - src/funcs/dataPrimaryNetworkRewardsListPendingPrimaryNetworkRewards.ts
  - src/funcs/dataPrimaryNetworkTransactionsGetTxByHash.ts
  - src/funcs/dataPrimaryNetworkTransactionsListActivePrimaryNetworkStakingTransactions.ts
  - src/funcs/dataPrimaryNetworkTransactionsListAssetTransactions.ts
  - src/funcs/dataPrimaryNetworkTransactionsListLatestPrimaryNetworkTransactions.ts
  - src/funcs/dataPrimaryNetworkUtxosGetUtxosByAddresses.ts
  - src/funcs/dataPrimaryNetworkVerticesGetVertexByHash.ts
  - src/funcs/dataPrimaryNetworkVerticesGetVertexByHeight.ts
  - src/funcs/dataPrimaryNetworkVerticesListLatestXChainVertices.ts
  - src/funcs/dataSignatureAggregatorAggregateSignatures.ts
  - src/funcs/dataTeleporterGetTeleporterMessage.ts
  - src/funcs/dataTeleporterListTeleporterMessages.ts
  - src/funcs/dataTeleporterListTeleporterMessagesByAddress.ts
  - src/funcs/dataUsageMetricsGetApiLogs.ts
  - src/funcs/dataUsageMetricsGetApiUsageMetrics.ts
  - src/funcs/dataWebhooksAddAddressesToWebhook.ts
  - src/funcs/dataWebhooksCreateWebhook.ts
  - src/funcs/dataWebhooksDeactivateWebhook.ts
  - src/funcs/dataWebhooksGenerateSharedSecret.ts
  - src/funcs/dataWebhooksGetAddressesFromWebhook.ts
  - src/funcs/dataWebhooksGetSharedSecret.ts
  - src/funcs/dataWebhooksGetWebhook.ts
  - src/funcs/dataWebhooksListWebhooks.ts
  - src/funcs/dataWebhooksRemoveAddressesFromWebhook.ts
  - src/funcs/dataWebhooksUpdateWebhook.ts
  - src/funcs/metricsChainMetricsGetEvmChainMetrics.ts
  - src/funcs/metricsChainMetricsGetEvmChainRollingWindowMetrics.ts
  - src/funcs/metricsChainMetricsGetStakingMetrics.ts
  - src/funcs/metricsChainMetricsGetTeleporterMetricsByChain.ts
  - src/funcs/metricsEvmChainsGetChain.ts
  - src/funcs/metricsEvmChainsListChains.ts
  - src/funcs/metricsHealthCheckMetricsHealthCheck.ts
  - src/funcs/metricsLookingGlassCompositeQuery.ts
  - src/funcs/metricsLookingGlassGetAddressesByBalanceOverTime.ts
  - src/funcs/metricsLookingGlassGetAddressesByBtcbBridged.ts
  - src/funcs/metricsLookingGlassGetNftHoldersByContractAddress.ts
  - src/funcs/metricsLookingGlassGetValidatorsByDateRange.ts
  - src/hooks/hooks.ts
  - src/hooks/index.ts
  - src/hooks/types.ts
  - src/index.ts
  - src/lib/base64.ts
  - src/lib/config.ts
  - src/lib/dlv.ts
  - src/lib/encodings.ts
  - src/lib/files.ts
  - src/lib/http.ts
  - src/lib/is-plain-object.ts
  - src/lib/logger.ts
  - src/lib/matchers.ts
  - src/lib/primitives.ts
  - src/lib/retries.ts
  - src/lib/schemas.ts
  - src/lib/sdks.ts
  - src/lib/security.ts
  - src/lib/url.ts
  - src/models/components/activedelegatordetails.ts
  - src/models/components/activevalidatordetails.ts
  - src/models/components/addressactivitymetadata.ts
  - src/models/components/addressdetails.ts
  - src/models/components/addresseschangerequest.ts
  - src/models/components/aggregatedassetamount.ts
  - src/models/components/alltimeerc20balancequerydto.ts
  - src/models/components/alltimenativebalancequerydto.ts
  - src/models/components/alltimenftholdersquerydto.ts
  - src/models/components/alltimestarsarenabalancequerydto.ts
  - src/models/components/anytimeerc20balancequerydto.ts
  - src/models/components/anytimenativebalancequerydto.ts
  - src/models/components/anytimenftholdersquerydto.ts
  - src/models/components/anytimestarsarenabalancequerydto.ts
  - src/models/components/apifeature.ts
  - src/models/components/assetamount.ts
  - src/models/components/assetwithpriceinfo.ts
  - src/models/components/balanceowner.ts
  - src/models/components/blockchain.ts
  - src/models/components/blockchainid.ts
  - src/models/components/blockchainids.ts
  - src/models/components/blockchaininfo.ts
  - src/models/components/blscredentials.ts
  - src/models/components/cchainatomicbalances.ts
  - src/models/components/cchainexporttransaction.ts
  - src/models/components/cchainimporttransaction.ts
  - src/models/components/cchainsharedassetbalance.ts
  - src/models/components/chain.ts
  - src/models/components/chainaddresschainidmap.ts
  - src/models/components/chainaddresschainidmaplistresponse.ts
  - src/models/components/chaininfo.ts
  - src/models/components/chainmetric.ts
  - src/models/components/chainrollingwindowmetric.ts
  - src/models/components/chainrollingwindowmetricsvalue.ts
  - src/models/components/chainstatus.ts
  - src/models/components/completeddelegatordetails.ts
  - src/models/components/completedvalidatordetails.ts
  - src/models/components/compositequeryrequestdto.ts
  - src/models/components/compositequeryresponse.ts
  - src/models/components/contractdeploymentdetails.ts
  - src/models/components/createevmtransactionexportrequest.ts
  - src/models/components/createprimarynetworktransactionexportrequest.ts
  - src/models/components/createwebhookrequest.ts
  - src/models/components/currencycode.ts
  - src/models/components/datalistchainsresponse.ts
  - src/models/components/daterangeerc20minbalanceparam.ts
  - src/models/components/daterangeminbalanceparam.ts
  - src/models/components/daterangenftholdersparam.ts
  - src/models/components/daterangestarsarenaminbalanceparam.ts
  - src/models/components/delegationstatustype.ts
  - src/models/components/delegatorsdetails.ts
  - src/models/components/deliveredsourcenotindexedteleportermessage.ts
  - src/models/components/deliveredteleportermessage.ts
  - src/models/components/erc1155contract.ts
  - src/models/components/erc1155token.ts
  - src/models/components/erc1155tokenbalance.ts
  - src/models/components/erc1155tokenmetadata.ts
  - src/models/components/erc1155transfer.ts
  - src/models/components/erc1155transferdetails.ts
  - src/models/components/erc20contract.ts
  - src/models/components/erc20token.ts
  - src/models/components/erc20tokenbalance.ts
  - src/models/components/erc20transfer.ts
  - src/models/components/erc20transferdetails.ts
  - src/models/components/erc721contract.ts
  - src/models/components/erc721token.ts
  - src/models/components/erc721tokenbalance.ts
  - src/models/components/erc721tokenmetadata.ts
  - src/models/components/erc721transfer.ts
  - src/models/components/erc721transferdetails.ts
  - src/models/components/eventtype.ts
  - src/models/components/evmblock.ts
  - src/models/components/evminput.ts
  - src/models/components/evmnetworkoptions.ts
  - src/models/components/evmoperationtype.ts
  - src/models/components/evmoutput.ts
  - src/models/components/fullnativetransactiondetails.ts
  - src/models/components/getchainresponse.ts
  - src/models/components/getevmblockresponse.ts
  - src/models/components/getnativebalanceresponse.ts
  - src/models/components/getnetworkdetailsresponse.ts
  - src/models/components/getprimarynetworkblockresponse.ts
  - src/models/components/gettransactionresponse.ts
  - src/models/components/globalparamnetwork.ts
  - src/models/components/historicalreward.ts
  - src/models/components/imageasset.ts
  - src/models/components/index.ts
  - src/models/components/internaltransaction.ts
  - src/models/components/internaltransactiondetails.ts
  - src/models/components/internaltransactionopcall.ts
  - src/models/components/l1validatordetailsfull.ts
  - src/models/components/l1validatordetailstransaction.ts
  - src/models/components/l1validatormanagerdetails.ts
  - src/models/components/latestbalanceparams.ts
  - src/models/components/latestbalancequerydto.ts
  - src/models/components/lateststarsarenabalanceparams.ts
  - src/models/components/lateststarsarenabalancequerydto.ts
  - src/models/components/listaddresschainsresponse.ts
  - src/models/components/listblockchainsresponse.ts
  - src/models/components/listcchainatomicbalancesresponse.ts
  - src/models/components/listcchainatomictransactionsresponse.ts
  - src/models/components/listcollectiblebalancesresponse.ts
  - src/models/components/listcontractsresponse.ts
  - src/models/components/listdelegatordetailsresponse.ts
  - src/models/components/listerc1155balancesresponse.ts
  - src/models/components/listerc1155transactionsresponse.ts
  - src/models/components/listerc20balancesresponse.ts
  - src/models/components/listerc20transactionsresponse.ts
  - src/models/components/listerc721balancesresponse.ts
  - src/models/components/listerc721transactionsresponse.ts
  - src/models/components/listevmblocksresponse.ts
  - src/models/components/listhistoricalrewardsresponse.ts
  - src/models/components/listinternaltransactionsresponse.ts
  - src/models/components/listl1validatorsresponse.ts
  - src/models/components/listnativetransactionsresponse.ts
  - src/models/components/listnfttokens.ts
  - src/models/components/listpchainbalancesresponse.ts
  - src/models/components/listpchaintransactionsresponse.ts
  - src/models/components/listpchainutxosresponse.ts
  - src/models/components/listpendingrewardsresponse.ts
  - src/models/components/listprimarynetworkblocksresponse.ts
  - src/models/components/listsubnetsresponse.ts
  - src/models/components/listteleportermessagesresponse.ts
  - src/models/components/listtransactiondetailsresponse.ts
  - src/models/components/listtransfersresponse.ts
  - src/models/components/listutxosresponse.ts
  - src/models/components/listvalidatordetailsresponse.ts
  - src/models/components/listwebhookaddressesresponse.ts
  - src/models/components/listwebhooksresponse.ts
  - src/models/components/listxchainbalancesresponse.ts
  - src/models/components/listxchaintransactionsresponse.ts
  - src/models/components/listxchainverticesresponse.ts
  - src/models/components/logsformat.ts
  - src/models/components/logsformatmetadata.ts
  - src/models/components/logsresponsedto.ts
  - src/models/components/lookingglassresponse.ts
  - src/models/components/method.ts
  - src/models/components/metric.ts
  - src/models/components/metricsapiresponse.ts
  - src/models/components/metricslistchainsresponse.ts
  - src/models/components/metricsvalue.ts
  - src/models/components/money.ts
  - src/models/components/nativetokenbalance.ts
  - src/models/components/nativetransaction.ts
  - src/models/components/network.ts
  - src/models/components/networkmetric.ts
  - src/models/components/networktoken.ts
  - src/models/components/networktokendetails.ts
  - src/models/components/networktype.ts
  - src/models/components/nftholdersresponse.ts
  - src/models/components/nfttokenmetadatastatus.ts
  - src/models/components/operationstatus.ts
  - src/models/components/operationstatuscode.ts
  - src/models/components/operationstatusresponse.ts
  - src/models/components/operationtype.ts
  - src/models/components/operator.ts
  - src/models/components/pchainaddressdetails.ts
  - src/models/components/pchainbalance.ts
  - src/models/components/pchainid.ts
  - src/models/components/pchainlookingglassresponse.ts
  - src/models/components/pchainsharedasset.ts
  - src/models/components/pchaintransaction.ts
  - src/models/components/pchaintransactiontype.ts
  - src/models/components/pchainutxo.ts
  - src/models/components/pendingdelegatordetails.ts
  - src/models/components/pendingreward.ts
  - src/models/components/pendingteleportermessage.ts
  - src/models/components/pendingvalidatordetails.ts
  - src/models/components/pricingproviders.ts
  - src/models/components/primarynetworkassetcap.ts
  - src/models/components/primarynetworkassettype.ts
  - src/models/components/primarynetworkblock.ts
  - src/models/components/primarynetworkchaininfo.ts
  - src/models/components/primarynetworkchainname.ts
  - src/models/components/primarynetworkoperationtype.ts
  - src/models/components/primarynetworkoptions.ts
  - src/models/components/primarynetworktxtype.ts
  - src/models/components/proposerdetails.ts
  - src/models/components/removedvalidatordetails.ts
  - src/models/components/requesttype.ts
  - src/models/components/resourcelink.ts
  - src/models/components/resourcelinktype.ts
  - src/models/components/rewards.ts
  - src/models/components/rewardtype.ts
  - src/models/components/richaddress.ts
  - src/models/components/rollingwindowmetricsapiresponse.ts
  - src/models/components/security.ts
  - src/models/components/sharedsecretsresponse.ts
  - src/models/components/signatureaggregationresponse.ts
  - src/models/components/signatureaggregatorrequest.ts
  - src/models/components/sortbyoption.ts
  - src/models/components/sortorder.ts
  - src/models/components/stakingdistribution.ts
  - src/models/components/subnet.ts
  - src/models/components/subnetownershipinfo.ts
  - src/models/components/teleporterchainmetricsapiresponse.ts
  - src/models/components/teleporterdestinationtransaction.ts
  - src/models/components/teleportermessageinfo.ts
  - src/models/components/teleportermetric.ts
  - src/models/components/teleportermetricsvalue.ts
  - src/models/components/teleporterreceipt.ts
  - src/models/components/teleporterrewarddetails.ts
  - src/models/components/teleportersourcetransaction.ts
  - src/models/components/timeintervalgranularity.ts
  - src/models/components/timeintervalgranularityextended.ts
  - src/models/components/timestamprangenftholdersparam.ts
  - src/models/components/tokentype.ts
  - src/models/components/transactiondetails.ts
  - src/models/components/transactiondirectiontype.ts
  - src/models/components/transactionexportmetadata.ts
  - src/models/components/transactionmethodtype.ts
  - src/models/components/transactionstatus.ts
  - src/models/components/transactionvertexdetail.ts
  - src/models/components/unknowncontract.ts
  - src/models/components/updatewebhookrequest.ts
  - src/models/components/usagemetricsgroupbyenum.ts
  - src/models/components/usagemetricsresponsedto.ts
  - src/models/components/usagemetricsvaluedto.ts
  - src/models/components/utilityaddresses.ts
  - src/models/components/utxo.ts
  - src/models/components/utxocredential.ts
  - src/models/components/utxotype.ts
  - src/models/components/validationstatustype.ts
  - src/models/components/validatorhealthdetails.ts
  - src/models/components/validatorsdetails.ts
  - src/models/components/vmname.ts
  - src/models/components/webhookresponse.ts
  - src/models/components/webhookstatus.ts
  - src/models/components/webhookstatustype.ts
  - src/models/components/xchainassetdetails.ts
  - src/models/components/xchainbalances.ts
  - src/models/components/xchainid.ts
  - src/models/components/xchainlineartransaction.ts
  - src/models/components/xchainnonlineartransaction.ts
  - src/models/components/xchainsharedassetbalance.ts
  - src/models/components/xchaintransactiontype.ts
  - src/models/components/xchainvertex.ts
  - src/models/errors/badgateway.ts
  - src/models/errors/badrequest.ts
  - src/models/errors/datahealthcheck.ts
  - src/models/errors/forbidden.ts
  - src/models/errors/httpclienterrors.ts
  - src/models/errors/index.ts
  - src/models/errors/internalservererror.ts
  - src/models/errors/metricshealthcheck.ts
  - src/models/errors/notfound.ts
  - src/models/errors/sdkerror.ts
  - src/models/errors/sdkvalidationerror.ts
  - src/models/errors/serviceunavailable.ts
  - src/models/errors/toomanyrequests.ts
  - src/models/errors/unauthorized.ts
  - src/models/operations/addaddressestowebhook.ts
  - src/models/operations/aggregatesignatures.ts
  - src/models/operations/compositequeryv2.ts
  - src/models/operations/createwebhook.ts
  - src/models/operations/datahealthcheck.ts
  - src/models/operations/deactivatewebhook.ts
  - src/models/operations/generatesharedsecret.ts
  - src/models/operations/getaddresschains.ts
  - src/models/operations/getaddressesbybalanceovertime.ts
  - src/models/operations/getaddressesbybtcbbridged.ts
  - src/models/operations/getaddressesfromwebhook.ts
  - src/models/operations/getapilogs.ts
  - src/models/operations/getapiusagemetrics.ts
  - src/models/operations/getassetdetails.ts
  - src/models/operations/getbalancesbyaddresses.ts
  - src/models/operations/getblock.ts
  - src/models/operations/getblockbyid.ts
  - src/models/operations/getchain.ts
  - src/models/operations/getchainidsforaddresses.ts
  - src/models/operations/getchaininfo.ts
  - src/models/operations/getcontractmetadata.ts
  - src/models/operations/getdeploymenttransaction.ts
  - src/models/operations/getevmchainmetrics.ts
  - src/models/operations/getevmchainrollingwindowmetrics.ts
  - src/models/operations/getlatestblocks.ts
  - src/models/operations/getnativebalance.ts
  - src/models/operations/getnetworkdetails.ts
  - src/models/operations/getnftholdersbycontractaddress.ts
  - src/models/operations/getoperationresult.ts
  - src/models/operations/getsharedsecret.ts
  - src/models/operations/getsinglevalidatordetails.ts
  - src/models/operations/getstakingmetrics.ts
  - src/models/operations/getsubnetbyid.ts
  - src/models/operations/getteleportermessage.ts
  - src/models/operations/getteleportermetricsbychain.ts
  - src/models/operations/gettokendetails.ts
  - src/models/operations/gettransaction.ts
  - src/models/operations/gettransactionsforblock.ts
  - src/models/operations/gettxbyhash.ts
  - src/models/operations/getutxosbyaddresses.ts
  - src/models/operations/getvalidatorsbydaterange.ts
  - src/models/operations/getvertexbyhash.ts
  - src/models/operations/getvertexbyheight.ts
  - src/models/operations/getwebhook.ts
  - src/models/operations/index.ts
  - src/models/operations/listactiveprimarynetworkstakingtransactions.ts
  - src/models/operations/listassettransactions.ts
  - src/models/operations/listblockchains.ts
  - src/models/operations/listchains.ts
  - src/models/operations/listcollectiblebalances.ts
  - src/models/operations/listcontractdeployments.ts
  - src/models/operations/listdelegators.ts
  - src/models/operations/listerc1155balances.ts
  - src/models/operations/listerc1155transactions.ts
  - src/models/operations/listerc20balances.ts
  - src/models/operations/listerc20transactions.ts
  - src/models/operations/listerc721balances.ts
  - src/models/operations/listerc721transactions.ts
  - src/models/operations/listhistoricalprimarynetworkrewards.ts
  - src/models/operations/listinternaltransactions.ts
  - src/models/operations/listl1validators.ts
  - src/models/operations/listlatestprimarynetworkblocks.ts
  - src/models/operations/listlatestprimarynetworktransactions.ts
  - src/models/operations/listlatesttransactions.ts
  - src/models/operations/listlatestxchainvertices.ts
  - src/models/operations/listnativetransactions.ts
  - src/models/operations/listpendingprimarynetworkrewards.ts
  - src/models/operations/listprimarynetworkblocksbynodeid.ts
  - src/models/operations/listsubnets.ts
  - src/models/operations/listteleportermessages.ts
  - src/models/operations/listteleportermessagesbyaddress.ts
  - src/models/operations/listtokens.ts
  - src/models/operations/listtransactions.ts
  - src/models/operations/listtransfers.ts
  - src/models/operations/listvalidators.ts
  - src/models/operations/listwebhooks.ts
  - src/models/operations/metricshealthcheck.ts
  - src/models/operations/posttransactionexportjob.ts
  - src/models/operations/reindexnft.ts
  - src/models/operations/removeaddressesfromwebhook.ts
  - src/models/operations/supportedchains.ts
  - src/models/operations/updatewebhook.ts
  - src/sdk/avacloudsdkbalances.ts
  - src/sdk/avacloudsdkblocks.ts
  - src/sdk/avacloudsdkchains.ts
  - src/sdk/avacloudsdkevm.ts
  - src/sdk/avacloudsdkhealthcheck.ts
  - src/sdk/avacloudsdkmetrics.ts
  - src/sdk/avacloudsdktransactions.ts
  - src/sdk/balances.ts
  - src/sdk/blocks.ts
  - src/sdk/chain.ts
  - src/sdk/chains.ts
  - src/sdk/contracts.ts
  - src/sdk/data.ts
  - src/sdk/evm.ts
  - src/sdk/healthcheck.ts
  - src/sdk/index.ts
  - src/sdk/lookingglass.ts
  - src/sdk/metrics.ts
  - src/sdk/nfts.ts
  - src/sdk/operations.ts
  - src/sdk/primarynetwork.ts
  - src/sdk/rewards.ts
  - src/sdk/sdk.ts
  - src/sdk/signatureaggregator.ts
  - src/sdk/teleporter.ts
  - src/sdk/transactions.ts
  - src/sdk/usagemetrics.ts
  - src/sdk/utxos.ts
  - src/sdk/vertices.ts
  - src/sdk/webhooks.ts
  - src/types/blobs.ts
  - src/types/constdatetime.ts
  - src/types/enums.ts
  - src/types/fp.ts
  - src/types/index.ts
  - src/types/operations.ts
  - src/types/rfcdate.ts
  - src/types/streams.ts
  - tsconfig.json
examples:
  metrics-health-check:
    speakeasy-default-metrics-health-check:
      responses:
        "200":
          application/json: {"status": "ok", "info": {"database": {"status": "up"}}, "error": {}, "details": {"database": {"status": "up"}}}
        "503":
          application/json: {"status": "error", "info": {"database": {"status": "up"}}, "error": {"redis": {"status": "down", "message": "Could not connect"}}, "details": {"database": {"status": "up"}, "redis": {"status": "down", "message": "Could not connect"}}}
  listChains:
    "":
      parameters:
        query:
          network: "mainnet"
      responses:
        "200":
          application/json: {"chains": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getChain:
    "":
      parameters:
        path:
          chainId: "43114"
      responses:
        "200":
          application/json: {"evmChainId": 43114, "chainName": "c_chain", "blockchainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5", "subnetId": "11111111111111111111111111111111LpoYY", "network": "mainnet"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getEvmChainMetrics:
    "":
      parameters:
        path:
          metric: "activeAddresses"
          chainId: "43114"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          timeInterval: "day"
          pageSize: "10"
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"results": []}
  getEvmChainRollingWindowMetrics:
    "":
      parameters:
        path:
          metric: "txCount"
          chainId: "43114"
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"result": {"lastHour": "7983.08", "lastDay": "45.59", "lastMonth": "371.4", "lastYear": "1064.36", "allTime": "1946.22"}}
  getStakingMetrics:
    "":
      parameters:
        path:
          metric: "validatorCount"
          network: "mainnet"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"results": []}
  getNftHoldersByContractAddress:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x7a420AEFF902AAa2c85a190D7B91Ce8BEFffFE14"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"addresses": [{"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}], "nftCollectionName": "NFT Project", "nftSymbol": "NFTPROJ", "totalHolders": 10, "totalTokens": 10}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getAddressesByBalanceOverTime:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
        query:
          threshold: "1000000"
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
      responses:
        "200":
          application/json: {"addresses": [{"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}]}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getAddressesByBtcbBridged:
    "":
      parameters:
        query:
          threshold: "1000000"
          pageSize: "10"
      responses:
        "200":
          application/json: {"addresses": [{"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}]}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getValidatorsByDateRange:
    "":
      parameters:
        path:
          subnetId: "11111111111111111111111111111111LpoYY"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"addresses": [{"addresses": ["avax1abcdef1234567890abcdef1234567890abcdef"], "sortKey": "123"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  compositeQueryV2:
    speakeasy-default-composite-query-v2:
      requestBody:
        application/json: {"queries": [], "operator": "OR"}
      responses:
        "200":
          application/json: {"subQueryCounts": {"1": 1, "2": 2, "3": 2}, "totalCount": 2, "addresses": ["0x1234567890abcdef1234567890abcdef123456789"]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  data-health-check:
    speakeasy-default-data-health-check:
      responses:
        "200":
          application/json: {"status": "ok", "info": {"database": {"status": "up"}}, "error": {}, "details": {"database": {"status": "up"}}}
        "503":
          application/json: {"status": "error", "info": {"database": {"status": "up"}}, "error": {"redis": {"status": "down", "message": "Could not connect"}}, "details": {"database": {"status": "up"}, "redis": {"status": "down", "message": "Could not connect"}}}
  reindexNft:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
          tokenId: "145"
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listTokens:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"tokens": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getTokenDetails:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
          tokenId: "145"
      responses:
        "200":
          application/json: {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<value>", "tokenUri": "<value>", "metadata": {"indexStatus": "THROTTLED_TOKEN_URI"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getOperationResult:
    "":
      parameters:
        path:
          operationId: "aa22054a-cb7c-4a4e-9b83-59f2ede74138"
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"operationId": "<value>", "operationType": "TRANSACTION_EXPORT_PRIMARY_NETWORK_SIMPLE", "operationStatus": "RUNNING", "createdAtTimestamp": "8977.59", "updatedAtTimestamp": "7978.63"}
  postTransactionExportJob:
    speakeasy-default-post-transaction-export-job:
      requestBody:
        application/json: {"type": "TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING", "firstDate": "2023-05-01", "lastDate": "2023-05-02", "startDate": "2023-05-01", "endDate": "2023-05-02", "options": {"includeChains": ["p-chain"]}}
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"operationId": "<value>", "operationType": "TRANSACTION_EXPORT_PRIMARY_NETWORK_SIMPLE", "operationStatus": "COMPLETED", "createdAtTimestamp": "4525.17", "updatedAtTimestamp": "2355.88"}
        "201":
          application/json: {"operationId": "<value>", "operationType": "TRANSACTION_EXPORT_PRIMARY_NETWORK_SIMPLE", "operationStatus": "COMPLETED", "createdAtTimestamp": "3310.42", "updatedAtTimestamp": "8864.13"}
  getAssetDetails:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
          assetId: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
      responses:
        "200":
          application/json: {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "createdAtTimestamp": 1675444720, "cap": "fixed"}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getChainIdsForAddresses:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"addresses": []}
  getNetworkDetails:
    "":
      parameters:
        path:
          network: "mainnet"
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"validatorDetails": {"validatorCount": "2213.22", "totalAmountStaked": "<value>", "estimatedAnnualStakingReward": "<value>", "stakingDistributionByVersion": [], "stakingRatio": "<value>"}, "delegatorDetails": {"delegatorCount": "6055.02", "totalAmountStaked": "<value>"}}
  listBlockchains:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"blockchains": []}
  listSubnets:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"subnets": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getSubnetById:
    "":
      parameters:
        path:
          network: "mainnet"
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"createBlockTimestamp": "6811.96", "createBlockIndex": "<value>", "subnetId": "<value>", "ownerAddresses": [], "threshold": "3670.2", "locktime": "7826.82", "subnetOwnershipInfo": {"locktime": 0, "threshold": 1, "addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]}, "isL1": false, "blockchains": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listValidators:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
          sortOrder: "asc"
          validationStatus: "completed"
          minDelegationCapacity: "0"
          maxDelegationCapacity: "720000000000000000"
          minTimeRemaining: 0
          maxTimeRemaining: 2147483647
          minFeePercentage: 2
          maxFeePercentage: 100
          minUptimePerformance: 90
          maxUptimePerformance: 100
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"validators": []}
  getSingleValidatorDetails:
    "":
      parameters:
        path:
          network: "mainnet"
          nodeId: "NodeID-111111111111111111116DBWJs"
        query:
          pageSize: "10"
          validationStatus: "completed"
          sortOrder: "asc"
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"validators": []}
  listDelegators:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          rewardAddresses: "P-avax1679zrp3z9mf7z4an42ddq47qzj36zv6ga20vwl,P-avax1s7kd0kfndlz6mh3l0etrrcmkg5y366k8e0s6cc"
          sortOrder: "asc"
          delegationStatus: "completed"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"delegators": []}
  getTxByHash:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
          txHash: "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP"
      responses:
        "200":
          application/json: {"txHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "blockHeight": 1005, "blockHash": "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee", "timestamp": 1600762738, "memo": "0x546865204176616c616e6368652050726f6a656374", "amountUnlocked": [], "amountCreated": [], "sourceChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "destinationChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "txType": "ExportTx", "evmInputs": [], "emittedUtxos": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listLatestPrimaryNetworkTransactions:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          txTypes: ["AddValidatorTx"]
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"transactions": [], "chainInfo": {"chainName": "x-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listActivePrimaryNetworkStakingTransactions:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          txTypes: ["AddValidatorTx"]
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"transactions": [], "chainInfo": {"chainName": "p-chain", "network": "fuji"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listAssetTransactions:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
          assetId: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
        query:
          txTypes: ["AddValidatorTx"]
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": [], "chainInfo": {"chainName": "p-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listPendingPrimaryNetworkRewards:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          pageSize: "10"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"pendingRewards": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listHistoricalPrimaryNetworkRewards:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          pageSize: "10"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
          sortOrder: "asc"
          currency: "usd"
      responses:
        "200":
          application/json: {"historicalRewards": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getUtxosByAddresses:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"utxos": [], "chainInfo": {"chainName": "x-chain", "network": "fuji"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getBalancesByAddresses:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          blockTimestamp: "1599696000"
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
      responses:
        "200":
          application/json: {"balances": {"unlockedUnstaked": [], "unlockedStaked": [], "lockedPlatform": [], "lockedStakeable": [], "lockedStaked": [], "pendingStaked": [], "atomicMemoryUnlocked": [], "atomicMemoryLocked": []}, "chainInfo": {"chainName": "c-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getBlockById:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
          blockId: "5615di9ytxujackzaXNrVuWQy5y8Yrt8chPCscMr5Ku9YxJ1S"
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"blockNumber": "<value>", "blockHash": "<value>", "parentHash": "<value>", "blockTimestamp": "8593.73", "blockType": "<value>", "txCount": "7619.2", "transactions": [], "blockSizeBytes": "105.5"}
  listPrimaryNetworkBlocksByNodeId:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
          nodeId: "NodeID-111111111111111111116DBWJs"
        query:
          pageSize: "10"
          startTimestamp: 1689541049
          endTimestamp: 1689800249
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"blocks": [], "chainInfo": {"chainName": "p-chain", "network": "fuji"}}
  listLatestPrimaryNetworkBlocks:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          pageSize: "10"
          startTimestamp: 1689541049
          endTimestamp: 1689800249
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"blocks": [], "chainInfo": {"chainName": "c-chain", "network": "fuji"}}
  listLatestXChainVertices:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
        query:
          pageSize: "10"
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"vertices": [], "chainInfo": {"chainName": "c-chain", "network": "fuji"}}
  getVertexByHash:
    "":
      parameters:
        path:
          vertexHash: "haP1CW56cspZY7aEuqHNrtpvhqCaMTxQaYe6j5u2Mbn4L2Gqr"
          blockchainId: "x-chain"
          network: "mainnet"
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"vertexHash": "<value>", "parentHashes": [], "vertexHeight": "4224.5", "vertexIndex": "7135.7", "vertexTimestamp": "2810.46", "txCount": "1065.03", "transactions": [], "vertexSizeBytes": "9438.79"}
  getVertexByHeight:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
        query:
          vertexHeight: 123
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"vertices": [], "chainInfo": {"chainName": "p-chain", "network": "fuji"}}
  getApiUsageMetrics:
    "":
      parameters:
        query:
          startTimestamp: 1698100000
          endTimestamp: 1698300000
          timeInterval: "daily"
          groupBy: "requestPath"
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"aggregateDuration": "<value>", "orgId": "<value>", "metrics": []}
  getApiLogs:
    "":
      parameters:
        query:
          startTimestamp: 1698100000
          endTimestamp: 1698300000
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"orgId": "<value>", "logs": []}
  listWebhooks:
    "":
      parameters:
        query:
          pageSize: "10"
          status: "active"
      responses:
        "200":
          application/json: {"webhooks": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  createWebhook:
    speakeasy-default-create-webhook:
      requestBody:
        application/json: {"url": "https://unrealistic-well-being.name", "chainId": "<value>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://heavenly-defender.org", "chainId": "<value>", "status": "active", "createdAt": "6960.46", "name": "<value>", "description": "Multi-layered secondary collaboration"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
        "201":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://woeful-yin.biz", "chainId": "<value>", "status": "active", "createdAt": "4728.39", "name": "<value>", "description": "Digitized didactic Graphic Interface"}
  getWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://shiny-lecture.name", "chainId": "<value>", "status": "active", "createdAt": "6151.9", "name": "<value>", "description": "Reduced methodical task-force"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  deactivateWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://melodic-march.info", "chainId": "<value>", "status": "inactive", "createdAt": "664.93", "name": "<value>", "description": "Reactive fault-tolerant core"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  updateWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://pungent-salary.biz", "chainId": "<value>", "status": "active", "createdAt": "3332.93", "name": "<value>", "description": "Decentralized 24 hour encryption"}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  generateSharedSecret:
    speakeasy-default-generate-shared-secret:
      responses:
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"secret": "<value>"}
        "201":
          application/json: {"secret": "<value>"}
  getSharedSecret:
    speakeasy-default-get-shared-secret:
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"secret": "<value>"}
  getAddressesFromWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
        query:
          pageSize: "10"
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"addresses": [], "totalAddresses": "1108.33"}
  removeAddressesFromWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      requestBody:
        application/json: {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"]}
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "http://joint-lifetime.info", "chainId": "<value>", "status": "active", "createdAt": "6235.74", "name": "<value>", "description": "Future-proofed intermediate time-frame"}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  addAddressesToWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      requestBody:
        application/json: {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"]}
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://whopping-alliance.biz", "chainId": "<value>", "status": "inactive", "createdAt": "5074.72", "name": "<value>", "description": "User-centric stable monitoring"}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getTeleporterMessage:
    "":
      parameters:
        path:
          messageId: "acf1c8b06f9aec48e9fcbefbbe576ae8a7ca3b327fcae111396e7cc99956674d"
      responses:
        "200":
          application/json: {"messageId": "<value>", "teleporterContractAddress": "<value>", "sourceBlockchainId": "<value>", "destinationBlockchainId": "<value>", "sourceEvmChainId": "<value>", "destinationEvmChainId": "<value>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": "6312.5", "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered_source_not_indexed"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listTeleporterMessages:
    "":
      parameters:
        query:
          pageSize: "10"
          sourceBlockchainId: "2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY"
          destinationBlockchainId: "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
          to: "0x664A4Be5Af2cFc824F9C0914CbAc4703396Da2DC"
          from: "0x321eDA69247566D662178feE695C7026c604Cd94"
          network: "mainnet"
      responses:
        "200":
          application/json: {"messages": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getNativeBalance:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          blockNumber: "6479329"
          currency: "usd"
      responses:
        "200":
          application/json: {"nativeTokenBalance": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "chainId": "43114", "price": {"currencyCode": "usd", "value": "42.42"}, "balance": "2000000000000000000", "balanceValue": {"currencyCode": "usd", "value": "42.42"}}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listErc20Balances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          blockNumber: "6479329"
          pageSize: "10"
          contractAddresses: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7, 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB"
          currency: "usd"
      responses:
        "200":
          application/json: {"erc20TokenBalances": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listErc721Balances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
          contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
      responses:
        "200":
          application/json: {"erc721TokenBalances": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listErc1155Balances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          blockNumber: "6479329"
          pageSize: "10"
          contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
      responses:
        "200":
          application/json: {"erc1155TokenBalances": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listCollectibleBalances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
          contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
      responses:
        "200":
          application/json: {"collectibleBalances": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getLatestBlocks:
    "":
      parameters:
        path:
          chainId: "43114"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"blocks": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getBlock:
    "":
      parameters:
        path:
          chainId: "43114"
          blockId: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
      responses:
        "200":
          application/json: {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txCount": "2892.38", "baseFee": "<value>", "gasUsed": "<value>", "gasLimit": "<value>", "gasCost": "<value>", "parentHash": "<value>", "feesSpent": "<value>", "cumulativeTransactions": "<value>"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getDeploymentTransaction:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
        query:
          currency: "usd"
      responses:
        "200":
          application/json: {"erc20Transfers": [], "erc721Transfers": [], "erc1155Transfers": [], "internalTransactions": [], "networkTokenDetails": {"networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}, "currentPrice": {"currencyCode": "usd", "value": "42.42"}, "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "nativeTransaction": {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CALL", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000", "input": "<value>", "baseFeePerGas": "<value>"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listContractDeployments:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"contracts": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listTransfers:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transfers": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
          startBlock: "6479329"
          endBlock: "6479330"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listNativeTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listErc20Transactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listErc721Transactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listErc1155Transactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listInternalTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getTransaction:
    "":
      parameters:
        path:
          chainId: "43114"
          txHash: "0x8bf584d7b14b92a32a339872a66b134a70ba3ba7c305823f348db6f860253f45"
      responses:
        "200":
          application/json: {"erc20Transfers": [], "erc721Transfers": [], "erc1155Transfers": [], "internalTransactions": [], "networkTokenDetails": {"networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}, "currentPrice": {"currencyCode": "usd", "value": "42.42"}, "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "nativeTransaction": {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CALL", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000", "input": "<value>", "baseFeePerGas": "<value>"}}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getTransactionsForBlock:
    "":
      parameters:
        path:
          chainId: "43114"
          blockId: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listLatestTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getContractMetadata:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
      responses:
        "200":
          application/json: {"name": "Wrapped AVAX", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "deploymentDetails": {"txHash": "<value>", "deployerAddress": "<value>"}, "ercType": "ERC-20", "symbol": "WAVAX", "decimals": 18}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  supportedChains:
    "":
      parameters:
        query:
          network: "mainnet"
          feature: "nftIndexing"
      responses:
        "200":
          application/json: {"chains": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getChainInfo:
    "":
      parameters:
        path:
          chainId: "43114"
      responses:
        "200":
          application/json: {"chainId": "<value>", "status": "UNAVAILABLE", "chainName": "<value>", "description": "Team-oriented bi-directional conglomeration", "vmName": "EVM", "rpcUrl": "<value>", "isTestnet": true, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getTeleporterMetricsByChain:
    "":
      parameters:
        path:
          metric: "teleporterSourceTxnCount"
          chainId: "43114"
      responses:
        "200":
          application/json: {"result": {"value": "2345.82"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listTeleporterMessagesByAddress:
    "":
      parameters:
        path:
          address: "0x8578AE7723751446B196bD5124e1bF57B40EB7Bc"
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"messages": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getRpcUsageMetrics:
    "":
      parameters:
        query:
          startTimestamp: 1698100000
          endTimestamp: 1698300000
          groupBy: "chainId"
      responses:
        "200":
          application/json: {"aggregateDuration": "<value>", "chainId": "<id>", "metrics": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getAddressChains:
    "":
      parameters:
        path:
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
      responses:
        "200":
          application/json: {"indexedChains": [{"chainId": "<id>", "status": "OK", "chainName": "<value>", "description": "fashion anti gracious although gadzooks huzzah settler uselessly reflate", "vmName": "ETHEREUM", "rpcUrl": "https://equatorial-sandbar.com", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "UNAVAILABLE", "chainName": "<value>", "description": "outside airline consequently lady mostly gosh duh excluding", "vmName": "ETHEREUM", "rpcUrl": "https://whirlwind-co-producer.name", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "OK", "chainName": "<value>", "description": "yuck quicker excluding", "vmName": "EVM", "rpcUrl": "https://smart-foodstuffs.net/", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listSubnetOnlyValidators:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          sovValidationId: "BsSpTd1SDvdhaoYAuKJvRj1WnoRyu8mAuMZeuz9g7brGj6KhX"
          nodeId: "NodeID-111111111111111111116DBWJs"
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"validators": [{"validationId": "<id>", "nodeId": "<id>", "subnetId": "<id>", "weight": "355.81", "remainingBalance": "1521.73", "creationTimestamp": "5454.26", "remainingBalanceOwner": {"addresses": ["<value>"], "threshold": "4075.33"}, "deactivationOwner": {"addresses": ["<value>"], "threshold": "2076.03"}}, {"validationId": "<id>", "nodeId": "<id>", "subnetId": "<id>", "weight": "2118.09", "remainingBalance": "6067.99", "creationTimestamp": "3363.06", "remainingBalanceOwner": {"addresses": ["<value>", "<value>"], "threshold": "1899.45"}, "deactivationOwner": {"addresses": [], "threshold": "5590.33"}}, {"validationId": "<id>", "nodeId": "<id>", "subnetId": "<id>", "weight": "4123.30", "remainingBalance": "1430.31", "creationTimestamp": "374.39", "remainingBalanceOwner": {"addresses": ["<value>"], "threshold": "979.28"}, "deactivationOwner": {"addresses": ["<value>", "<value>"], "threshold": "3041.48"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listL1Validators:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          l1ValidationId: "BsSpTd1SDvdhaoYAuKJvRj1WnoRyu8mAuMZeuz9g7brGj6KhX"
          nodeId: "NodeID-111111111111111111116DBWJs"
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"validators": [{"validationId": "<id>", "nodeId": "<id>", "subnetId": "<id>", "weight": "4613.88", "remainingBalance": "241.43", "creationTimestamp": "8967.15", "remainingBalanceOwner": {"addresses": ["<value>", "<value>", "<value>"], "threshold": "1448.53"}, "deactivationOwner": {"addresses": ["<value>", "<value>"], "threshold": "7781.19"}}, {"validationId": "<id>", "nodeId": "<id>", "subnetId": "<id>", "weight": "9294.85", "remainingBalance": "4685.26", "creationTimestamp": "3021.81", "remainingBalanceOwner": {"addresses": ["<value>", "<value>"], "threshold": "5391.48"}, "deactivationOwner": {"addresses": ["<value>", "<value>", "<value>"], "threshold": "4292.21"}}, {"validationId": "<id>", "nodeId": "<id>", "subnetId": "<id>", "weight": "3443.46", "remainingBalance": "474.49", "creationTimestamp": "8071.57", "remainingBalanceOwner": {"addresses": [], "threshold": "8584.20"}, "deactivationOwner": {"addresses": [], "threshold": "7094.65"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  aggregateSignatures:
    speakeasy-default-aggregate-signatures:
      requestBody:
        application/json: {"message": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003cc0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000", "justification": "0001abcdabcfff", "signingSubnetId": "7WtoAMPhrmh5KosDUsFL9yTcvw7YSxiKHPpdfs4JsgW47oZT5", "quorumPercentage": 50}
      responses:
        "201":
          application/json: {"signedMessage": "0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000103807355b21dd497ecc9f560dfbdefc64aeec72b226c70d3793273db01d1a0c0bfd74d095d6a9e0b4db2dc652245fd28ac032c0f1f6b7f761b912ad58c93cde2e337bef4a4e8175af69f226520cd1baedd2dd7db79bb5752cb50a465531e46e8af"}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
generatedTests: {}
