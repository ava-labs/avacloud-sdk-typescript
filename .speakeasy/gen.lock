lockVersion: 2.0.0
id: 2b9c4bf6-4d87-4382-84d9-5fb3c84c7fad
management:
  docChecksum: 905a8493acd6c5ab4a2cdecbf0824d5a
  docVersion: Beta
  speakeasyVersion: 1.510.0
  generationVersion: 2.541.0
  releaseVersion: 0.11.0
  configChecksum: 0d1472b1c5ef3e63349aeb20ddb6c505
  repoURL: https://github.com/ava-labs/avacloud-sdk-typescript.git
  installationURL: https://github.com/ava-labs/avacloud-sdk-typescript
  published: true
features:
  typescript:
    additionalDependencies: 0.1.0
    constsAndDefaults: 0.1.11
    core: 3.21.3
    defaultEnabledRetries: 0.1.0
    deprecations: 2.81.1
    devContainers: 2.90.0
    enumUnions: 0.1.0
    envVarSecurityUsage: 0.1.2
    examples: 2.81.5
    globalSecurity: 2.82.13
    globalSecurityCallbacks: 0.1.0
    globalSecurityFlattening: 0.1.0
    globalServerURLs: 2.82.4
    globals: 2.82.2
    groups: 2.81.2
    ignores: 2.81.1
    mcpServer: 0.4.1
    methodServerURLs: 2.82.1
    nameOverrides: 2.81.2
    nullables: 0.1.1
    pagination: 2.83.0
    responseFormat: 0.2.3
    retries: 2.83.0
    sdkHooks: 0.2.0
    unions: 2.85.8
generatedFiles:
  - .devcontainer/README.md
  - .devcontainer/devcontainer.json
  - .devcontainer/setup.sh
  - .gitattributes
  - .npmignore
  - FUNCTIONS.md
  - RUNTIMES.md
  - USAGE.md
  - docs/lib/utils/retryconfig.md
  - docs/models/components/activedelegatordetails.md
  - docs/models/components/activedelegatordetailsdelegationstatus.md
  - docs/models/components/activevalidatordetails.md
  - docs/models/components/activevalidatordetailsvalidationstatus.md
  - docs/models/components/addressactivitymetadata.md
  - docs/models/components/addressdetails.md
  - docs/models/components/addresseschangerequest.md
  - docs/models/components/aggregatedassetamount.md
  - docs/models/components/alltimeerc20balancequerydto.md
  - docs/models/components/alltimeerc20balancequerydtotype.md
  - docs/models/components/alltimenativebalancequerydto.md
  - docs/models/components/alltimenftholdersquerydto.md
  - docs/models/components/alltimenftholdersquerydtotype.md
  - docs/models/components/alltimestarsarenabalancequerydto.md
  - docs/models/components/alltimestarsarenabalancequerydtotype.md
  - docs/models/components/anytimeerc20balancequerydto.md
  - docs/models/components/anytimeerc20balancequerydtotype.md
  - docs/models/components/anytimenativebalancequerydto.md
  - docs/models/components/anytimenativebalancequerydtotype.md
  - docs/models/components/anytimenftholdersquerydto.md
  - docs/models/components/anytimenftholdersquerydtoparams.md
  - docs/models/components/anytimenftholdersquerydtotype.md
  - docs/models/components/anytimestarsarenabalancequerydto.md
  - docs/models/components/anytimestarsarenabalancequerydtotype.md
  - docs/models/components/apifeature.md
  - docs/models/components/assetamount.md
  - docs/models/components/assetwithpriceinfo.md
  - docs/models/components/balanceowner.md
  - docs/models/components/blockchain.md
  - docs/models/components/blockchainid.md
  - docs/models/components/blockchainids.md
  - docs/models/components/blockchaininfo.md
  - docs/models/components/blscredentials.md
  - docs/models/components/cchainatomicbalances.md
  - docs/models/components/cchainexporttransaction.md
  - docs/models/components/cchainimporttransaction.md
  - docs/models/components/cchainimporttransactiontxtype.md
  - docs/models/components/cchainsharedassetbalance.md
  - docs/models/components/chain.md
  - docs/models/components/chainaddresschainidmap.md
  - docs/models/components/chainaddresschainidmaplistresponse.md
  - docs/models/components/chainformat.md
  - docs/models/components/chaininfo.md
  - docs/models/components/chainmetric.md
  - docs/models/components/chainrollingwindowmetric.md
  - docs/models/components/chainrollingwindowmetricsvalue.md
  - docs/models/components/chainstatus.md
  - docs/models/components/collectiblebalances.md
  - docs/models/components/completeddelegatordetails.md
  - docs/models/components/completedvalidatordetails.md
  - docs/models/components/compositequeryrequestdto.md
  - docs/models/components/compositequeryresponse.md
  - docs/models/components/contractdeploymentdetails.md
  - docs/models/components/contracts.md
  - docs/models/components/createevmtransactionexportrequest.md
  - docs/models/components/createprimarynetworktransactionexportrequest.md
  - docs/models/components/createwebhookrequest.md
  - docs/models/components/createwebhookrequestmetadata.md
  - docs/models/components/currencycode.md
  - docs/models/components/datalistchainsresponse.md
  - docs/models/components/daterangeerc20minbalanceparam.md
  - docs/models/components/daterangeminbalanceparam.md
  - docs/models/components/daterangenftholdersparam.md
  - docs/models/components/daterangestarsarenaminbalanceparam.md
  - docs/models/components/delegationstatus.md
  - docs/models/components/delegationstatustype.md
  - docs/models/components/delegators.md
  - docs/models/components/delegatorsdetails.md
  - docs/models/components/deliveredicmmessage.md
  - docs/models/components/deliveredicmmessagestatus.md
  - docs/models/components/deliveredsourcenotindexedicmmessage.md
  - docs/models/components/deliveredsourcenotindexedicmmessagestatus.md
  - docs/models/components/deliveredsourcenotindexedteleportermessage.md
  - docs/models/components/deliveredsourcenotindexedteleportermessagestatus.md
  - docs/models/components/deliveredteleportermessage.md
  - docs/models/components/deliveredteleportermessagestatus.md
  - docs/models/components/destinationchainid.md
  - docs/models/components/enabledfeatures.md
  - docs/models/components/erc1155contract.md
  - docs/models/components/erc1155contracterctype.md
  - docs/models/components/erc1155token.md
  - docs/models/components/erc1155tokenbalance.md
  - docs/models/components/erc1155tokenbalanceerctype.md
  - docs/models/components/erc1155tokenerctype.md
  - docs/models/components/erc1155tokenmetadata.md
  - docs/models/components/erc1155transfer.md
  - docs/models/components/erc1155transferdetails.md
  - docs/models/components/erc20contract.md
  - docs/models/components/erc20contracterctype.md
  - docs/models/components/erc20token.md
  - docs/models/components/erc20tokenbalance.md
  - docs/models/components/erc20tokenbalanceerctype.md
  - docs/models/components/erc20tokenerctype.md
  - docs/models/components/erc20transfer.md
  - docs/models/components/erc20transferdetails.md
  - docs/models/components/erc721contract.md
  - docs/models/components/erc721contracterctype.md
  - docs/models/components/erc721token.md
  - docs/models/components/erc721tokenbalance.md
  - docs/models/components/erc721tokenbalanceerctype.md
  - docs/models/components/erc721tokenmetadata.md
  - docs/models/components/erc721transfer.md
  - docs/models/components/erc721transferdetails.md
  - docs/models/components/erctype.md
  - docs/models/components/eventtype.md
  - docs/models/components/evmblock.md
  - docs/models/components/evminput.md
  - docs/models/components/evmnetworkoptions.md
  - docs/models/components/evmoperationtype.md
  - docs/models/components/evmoutput.md
  - docs/models/components/fullnativetransactiondetails.md
  - docs/models/components/getchainresponse.md
  - docs/models/components/getchainresponseenabledfeatures.md
  - docs/models/components/getevmblockresponse.md
  - docs/models/components/getnativebalanceresponse.md
  - docs/models/components/getnetworkdetailsresponse.md
  - docs/models/components/getprimarynetworkblockresponse.md
  - docs/models/components/gettransactionresponse.md
  - docs/models/components/globalparamnetwork.md
  - docs/models/components/groupedby.md
  - docs/models/components/groupvalue.md
  - docs/models/components/healthcheckresultdto.md
  - docs/models/components/healthindicatorresultdto.md
  - docs/models/components/healthindicatorresultdtostatus.md
  - docs/models/components/historicalreward.md
  - docs/models/components/icmdestinationtransaction.md
  - docs/models/components/icmreceipt.md
  - docs/models/components/icmrewarddetails.md
  - docs/models/components/icmrewarddetailserctype.md
  - docs/models/components/icmsourcetransaction.md
  - docs/models/components/imageasset.md
  - docs/models/components/includechains.md
  - docs/models/components/internaltransaction.md
  - docs/models/components/internaltransactiondetails.md
  - docs/models/components/internaltransactionopcall.md
  - docs/models/components/l1validatordetailsfull.md
  - docs/models/components/l1validatordetailsfullblscredentials.md
  - docs/models/components/l1validatordetailstransaction.md
  - docs/models/components/l1validatordetailstransactionblscredentials.md
  - docs/models/components/l1validatormanagerdetails.md
  - docs/models/components/latestbalanceparams.md
  - docs/models/components/latestbalancequerydto.md
  - docs/models/components/latestbalancequerydtotype.md
  - docs/models/components/lateststarsarenabalanceparams.md
  - docs/models/components/lateststarsarenabalancequerydto.md
  - docs/models/components/lateststarsarenabalancequerydtotype.md
  - docs/models/components/listaddresschainsresponse.md
  - docs/models/components/listblockchainsresponse.md
  - docs/models/components/listcchainatomicbalancesresponse.md
  - docs/models/components/listcchainatomictransactionsresponse.md
  - docs/models/components/listcchainatomictransactionsresponsetransactions.md
  - docs/models/components/listcollectiblebalancesresponse.md
  - docs/models/components/listcontractsresponse.md
  - docs/models/components/listdelegatordetailsresponse.md
  - docs/models/components/listerc1155balancesresponse.md
  - docs/models/components/listerc1155transactionsresponse.md
  - docs/models/components/listerc20balancesresponse.md
  - docs/models/components/listerc20transactionsresponse.md
  - docs/models/components/listerc721balancesresponse.md
  - docs/models/components/listerc721transactionsresponse.md
  - docs/models/components/listevmblocksresponse.md
  - docs/models/components/listhistoricalrewardsresponse.md
  - docs/models/components/listicmmessagesresponse.md
  - docs/models/components/listicmmessagesresponsemessages.md
  - docs/models/components/listinternaltransactionsresponse.md
  - docs/models/components/listl1validatorsresponse.md
  - docs/models/components/listnativetransactionsresponse.md
  - docs/models/components/listnfttokens.md
  - docs/models/components/listpchainbalancesresponse.md
  - docs/models/components/listpchaintransactionsresponse.md
  - docs/models/components/listpchainutxosresponse.md
  - docs/models/components/listpendingrewardsresponse.md
  - docs/models/components/listprimarynetworkblocksresponse.md
  - docs/models/components/listsubnetsresponse.md
  - docs/models/components/listteleportermessagesresponse.md
  - docs/models/components/listtransactiondetailsresponse.md
  - docs/models/components/listtransfersresponse.md
  - docs/models/components/listutxosresponse.md
  - docs/models/components/listvalidatordetailsresponse.md
  - docs/models/components/listwebhookaddressesresponse.md
  - docs/models/components/listwebhooksresponse.md
  - docs/models/components/listxchainbalancesresponse.md
  - docs/models/components/listxchaintransactionsresponse.md
  - docs/models/components/listxchainverticesresponse.md
  - docs/models/components/logsformat.md
  - docs/models/components/logsformatmetadata.md
  - docs/models/components/logsresponsedto.md
  - docs/models/components/lookingglassresponse.md
  - docs/models/components/messages.md
  - docs/models/components/metadata.md
  - docs/models/components/method.md
  - docs/models/components/metric.md
  - docs/models/components/metricsapiresponse.md
  - docs/models/components/metricslistchainsresponse.md
  - docs/models/components/metricsvalue.md
  - docs/models/components/money.md
  - docs/models/components/nativetokenbalance.md
  - docs/models/components/nativetransaction.md
  - docs/models/components/network.md
  - docs/models/components/networkmetric.md
  - docs/models/components/networktoken.md
  - docs/models/components/networktokendetails.md
  - docs/models/components/networktype.md
  - docs/models/components/nftholdersresponse.md
  - docs/models/components/nfttokenmetadatastatus.md
  - docs/models/components/operationstatus.md
  - docs/models/components/operationstatuscode.md
  - docs/models/components/operationstatusresponse.md
  - docs/models/components/operationtype.md
  - docs/models/components/operator.md
  - docs/models/components/params.md
  - docs/models/components/pchainaddressdetails.md
  - docs/models/components/pchainbalance.md
  - docs/models/components/pchainid.md
  - docs/models/components/pchainlookingglassresponse.md
  - docs/models/components/pchainsharedasset.md
  - docs/models/components/pchaintransaction.md
  - docs/models/components/pchaintransactiontype.md
  - docs/models/components/pchainutxo.md
  - docs/models/components/pendingdelegatordetails.md
  - docs/models/components/pendingdelegatordetailsdelegationstatus.md
  - docs/models/components/pendingicmmessage.md
  - docs/models/components/pendingicmmessagestatus.md
  - docs/models/components/pendingreward.md
  - docs/models/components/pendingteleportermessage.md
  - docs/models/components/pendingteleportermessagestatus.md
  - docs/models/components/pendingvalidatordetails.md
  - docs/models/components/pendingvalidatordetailsvalidationstatus.md
  - docs/models/components/pricingproviders.md
  - docs/models/components/primarynetworkassetcap.md
  - docs/models/components/primarynetworkassettype.md
  - docs/models/components/primarynetworkblock.md
  - docs/models/components/primarynetworkchaininfo.md
  - docs/models/components/primarynetworkchainname.md
  - docs/models/components/primarynetworkoperationtype.md
  - docs/models/components/primarynetworkoptions.md
  - docs/models/components/primarynetworktxtype.md
  - docs/models/components/proposerdetails.md
  - docs/models/components/queries.md
  - docs/models/components/removedvalidatordetails.md
  - docs/models/components/removedvalidatordetailsvalidationstatus.md
  - docs/models/components/requesttype.md
  - docs/models/components/resourcelink.md
  - docs/models/components/resourcelinktype.md
  - docs/models/components/rewards.md
  - docs/models/components/rewardtype.md
  - docs/models/components/richaddress.md
  - docs/models/components/rollingwindowmetricsapiresponse.md
  - docs/models/components/rpcmetrics.md
  - docs/models/components/rpcusagemetricsgroupbyenum.md
  - docs/models/components/rpcusagemetricsvalueaggregated.md
  - docs/models/components/rpcusagemetricsvalueaggregatedgroupedby.md
  - docs/models/components/rpcusagemetricsvalueaggregatedgroupvalue.md
  - docs/models/components/security.md
  - docs/models/components/sharedsecretsresponse.md
  - docs/models/components/signatureaggregationresponse.md
  - docs/models/components/signatureaggregatorrequest.md
  - docs/models/components/sortbyoption.md
  - docs/models/components/sortorder.md
  - docs/models/components/sourcechainid.md
  - docs/models/components/stakingdistribution.md
  - docs/models/components/status.md
  - docs/models/components/subnet.md
  - docs/models/components/subnetownershipinfo.md
  - docs/models/components/subnetrpctimeintervalgranularity.md
  - docs/models/components/subnetrpcusagemetricsresponsedto.md
  - docs/models/components/teleporterchainmetricsapiresponse.md
  - docs/models/components/teleporterdestinationtransaction.md
  - docs/models/components/teleportermessageinfo.md
  - docs/models/components/teleportermetric.md
  - docs/models/components/teleportermetricsvalue.md
  - docs/models/components/teleporterreceipt.md
  - docs/models/components/teleporterrewarddetails.md
  - docs/models/components/teleporterrewarddetailserctype.md
  - docs/models/components/teleportersourcetransaction.md
  - docs/models/components/timeintervalgranularity.md
  - docs/models/components/timeintervalgranularityextended.md
  - docs/models/components/timestamprangenftholdersparam.md
  - docs/models/components/tokenreputation.md
  - docs/models/components/tokens.md
  - docs/models/components/tokentype.md
  - docs/models/components/transactiondetails.md
  - docs/models/components/transactiondirectiontype.md
  - docs/models/components/transactionexportmetadata.md
  - docs/models/components/transactionmethodtype.md
  - docs/models/components/transactions.md
  - docs/models/components/transactionstatus.md
  - docs/models/components/transactionvertexdetail.md
  - docs/models/components/transfers.md
  - docs/models/components/txtype.md
  - docs/models/components/type.md
  - docs/models/components/unknowncontract.md
  - docs/models/components/unknowncontracterctype.md
  - docs/models/components/updatewebhookrequest.md
  - docs/models/components/usagemetricsgroupbyenum.md
  - docs/models/components/usagemetricsresponsedto.md
  - docs/models/components/usagemetricsvaluedto.md
  - docs/models/components/utilityaddresses.md
  - docs/models/components/utxo.md
  - docs/models/components/utxocredential.md
  - docs/models/components/utxotype.md
  - docs/models/components/validationstatus.md
  - docs/models/components/validationstatustype.md
  - docs/models/components/validatorhealthdetails.md
  - docs/models/components/validators.md
  - docs/models/components/validatorsdetails.md
  - docs/models/components/vmname.md
  - docs/models/components/webhookresponse.md
  - docs/models/components/webhookresponsemetadata.md
  - docs/models/components/webhookstatus.md
  - docs/models/components/webhookstatustype.md
  - docs/models/components/xchainassetdetails.md
  - docs/models/components/xchainbalances.md
  - docs/models/components/xchainid.md
  - docs/models/components/xchainlineartransaction.md
  - docs/models/components/xchainlineartransactionchainformat.md
  - docs/models/components/xchainnonlineartransaction.md
  - docs/models/components/xchainsharedassetbalance.md
  - docs/models/components/xchaintransactiontype.md
  - docs/models/components/xchainvertex.md
  - docs/models/errors/badgateway.md
  - docs/models/errors/badgatewaymessage.md
  - docs/models/errors/badrequest.md
  - docs/models/errors/forbidden.md
  - docs/models/errors/forbiddenmessage.md
  - docs/models/errors/internalservererror.md
  - docs/models/errors/internalservererrormessage.md
  - docs/models/errors/message.md
  - docs/models/errors/notfound.md
  - docs/models/errors/notfoundmessage.md
  - docs/models/errors/serviceunavailable.md
  - docs/models/errors/serviceunavailablemessage.md
  - docs/models/errors/toomanyrequests.md
  - docs/models/errors/toomanyrequestsmessage.md
  - docs/models/errors/unauthorized.md
  - docs/models/errors/unauthorizedmessage.md
  - docs/models/operations/addaddressestowebhookrequest.md
  - docs/models/operations/aggregatesignaturesglobals.md
  - docs/models/operations/aggregatesignaturesrequest.md
  - docs/models/operations/compositequeryv2response.md
  - docs/models/operations/deactivatewebhookrequest.md
  - docs/models/operations/getaddresschainsrequest.md
  - docs/models/operations/getaddressesbybalanceovertimeglobals.md
  - docs/models/operations/getaddressesbybalanceovertimerequest.md
  - docs/models/operations/getaddressesbybalanceovertimeresponse.md
  - docs/models/operations/getaddressesbybtcbbridgedrequest.md
  - docs/models/operations/getaddressesbybtcbbridgedresponse.md
  - docs/models/operations/getaddressesfromwebhookrequest.md
  - docs/models/operations/getaddressesfromwebhookresponse.md
  - docs/models/operations/getapilogsrequest.md
  - docs/models/operations/getapilogsresponse.md
  - docs/models/operations/getapiusagemetricsrequest.md
  - docs/models/operations/getassetdetailsglobals.md
  - docs/models/operations/getassetdetailsrequest.md
  - docs/models/operations/getbalancesbyaddressesglobals.md
  - docs/models/operations/getbalancesbyaddressesrequest.md
  - docs/models/operations/getbalancesbyaddressesresponsebody.md
  - docs/models/operations/getblockbyidglobals.md
  - docs/models/operations/getblockbyidrequest.md
  - docs/models/operations/getblockglobals.md
  - docs/models/operations/getblockrequest.md
  - docs/models/operations/getchainglobals.md
  - docs/models/operations/getchainidsforaddressesglobals.md
  - docs/models/operations/getchainidsforaddressesrequest.md
  - docs/models/operations/getchaininfoglobals.md
  - docs/models/operations/getchaininforequest.md
  - docs/models/operations/getchainrequest.md
  - docs/models/operations/getcontractmetadataglobals.md
  - docs/models/operations/getcontractmetadatarequest.md
  - docs/models/operations/getcontractmetadataresponsebody.md
  - docs/models/operations/getdeploymenttransactionglobals.md
  - docs/models/operations/getdeploymenttransactionrequest.md
  - docs/models/operations/getevmchainmetricsglobals.md
  - docs/models/operations/getevmchainmetricsrequest.md
  - docs/models/operations/getevmchainmetricsresponse.md
  - docs/models/operations/getevmchainrollingwindowmetricsglobals.md
  - docs/models/operations/getevmchainrollingwindowmetricsrequest.md
  - docs/models/operations/geticmmessagerequest.md
  - docs/models/operations/geticmmessageresponsebody.md
  - docs/models/operations/getlatestblocksglobals.md
  - docs/models/operations/getlatestblocksrequest.md
  - docs/models/operations/getlatestblocksresponse.md
  - docs/models/operations/getnativebalanceglobals.md
  - docs/models/operations/getnativebalancerequest.md
  - docs/models/operations/getnetworkdetailsglobals.md
  - docs/models/operations/getnetworkdetailsrequest.md
  - docs/models/operations/getnftholdersbycontractaddressglobals.md
  - docs/models/operations/getnftholdersbycontractaddressrequest.md
  - docs/models/operations/getnftholdersbycontractaddressresponse.md
  - docs/models/operations/getoperationresultrequest.md
  - docs/models/operations/getrpcusagemetricsrequest.md
  - docs/models/operations/getsinglevalidatordetailsglobals.md
  - docs/models/operations/getsinglevalidatordetailsrequest.md
  - docs/models/operations/getsinglevalidatordetailsresponse.md
  - docs/models/operations/getstakingmetricsglobals.md
  - docs/models/operations/getstakingmetricsrequest.md
  - docs/models/operations/getstakingmetricsresponse.md
  - docs/models/operations/getsubnetbyidglobals.md
  - docs/models/operations/getsubnetbyidrequest.md
  - docs/models/operations/getsubnetrpcusagemetricsrequest.md
  - docs/models/operations/getteleportermessagerequest.md
  - docs/models/operations/getteleportermessageresponsebody.md
  - docs/models/operations/getteleportermetricsbychainglobals.md
  - docs/models/operations/getteleportermetricsbychainrequest.md
  - docs/models/operations/gettokendetailsglobals.md
  - docs/models/operations/gettokendetailsrequest.md
  - docs/models/operations/gettokendetailsresponsebody.md
  - docs/models/operations/gettransactionglobals.md
  - docs/models/operations/gettransactionrequest.md
  - docs/models/operations/gettransactionsforblockglobals.md
  - docs/models/operations/gettransactionsforblockrequest.md
  - docs/models/operations/gettxbyhashglobals.md
  - docs/models/operations/gettxbyhashrequest.md
  - docs/models/operations/gettxbyhashresponsebody.md
  - docs/models/operations/getutxosbyaddressesglobals.md
  - docs/models/operations/getutxosbyaddressesrequest.md
  - docs/models/operations/getutxosbyaddressesresponse.md
  - docs/models/operations/getutxosbyaddressesresponsebody.md
  - docs/models/operations/getvalidatorsbydaterangerequest.md
  - docs/models/operations/getvalidatorsbydaterangeresponse.md
  - docs/models/operations/getvertexbyhashglobals.md
  - docs/models/operations/getvertexbyhashrequest.md
  - docs/models/operations/getvertexbyheightglobals.md
  - docs/models/operations/getvertexbyheightrequest.md
  - docs/models/operations/getvertexbyheightresponse.md
  - docs/models/operations/getwebhookrequest.md
  - docs/models/operations/listactiveprimarynetworkstakingtransactionsglobals.md
  - docs/models/operations/listactiveprimarynetworkstakingtransactionsrequest.md
  - docs/models/operations/listactiveprimarynetworkstakingtransactionsresponse.md
  - docs/models/operations/listaddresschainsrequest.md
  - docs/models/operations/listalllatestblocksrequest.md
  - docs/models/operations/listalllatestblocksresponse.md
  - docs/models/operations/listalllatesttransactionsrequest.md
  - docs/models/operations/listalllatesttransactionsresponse.md
  - docs/models/operations/listassettransactionsglobals.md
  - docs/models/operations/listassettransactionsrequest.md
  - docs/models/operations/listassettransactionsresponse.md
  - docs/models/operations/listblockchainsglobals.md
  - docs/models/operations/listblockchainsrequest.md
  - docs/models/operations/listblockchainsresponse.md
  - docs/models/operations/listchainsrequest.md
  - docs/models/operations/listchainsresponse.md
  - docs/models/operations/listcollectiblebalancesglobals.md
  - docs/models/operations/listcollectiblebalancesrequest.md
  - docs/models/operations/listcollectiblebalancesresponse.md
  - docs/models/operations/listcontractdeploymentsglobals.md
  - docs/models/operations/listcontractdeploymentsrequest.md
  - docs/models/operations/listcontractdeploymentsresponse.md
  - docs/models/operations/listdelegatorsglobals.md
  - docs/models/operations/listdelegatorsrequest.md
  - docs/models/operations/listdelegatorsresponse.md
  - docs/models/operations/listerc1155balancesglobals.md
  - docs/models/operations/listerc1155balancesrequest.md
  - docs/models/operations/listerc1155balancesresponse.md
  - docs/models/operations/listerc1155transactionsglobals.md
  - docs/models/operations/listerc1155transactionsrequest.md
  - docs/models/operations/listerc1155transactionsresponse.md
  - docs/models/operations/listerc20balancesglobals.md
  - docs/models/operations/listerc20balancesrequest.md
  - docs/models/operations/listerc20balancesresponse.md
  - docs/models/operations/listerc20transactionsglobals.md
  - docs/models/operations/listerc20transactionsrequest.md
  - docs/models/operations/listerc20transactionsresponse.md
  - docs/models/operations/listerc721balancesglobals.md
  - docs/models/operations/listerc721balancesrequest.md
  - docs/models/operations/listerc721balancesresponse.md
  - docs/models/operations/listerc721transactionsglobals.md
  - docs/models/operations/listerc721transactionsrequest.md
  - docs/models/operations/listerc721transactionsresponse.md
  - docs/models/operations/listhistoricalprimarynetworkrewardsglobals.md
  - docs/models/operations/listhistoricalprimarynetworkrewardsrequest.md
  - docs/models/operations/listhistoricalprimarynetworkrewardsresponse.md
  - docs/models/operations/listicmmessagesbyaddressrequest.md
  - docs/models/operations/listicmmessagesrequest.md
  - docs/models/operations/listicmmessagesresponse.md
  - docs/models/operations/listinternaltransactionsglobals.md
  - docs/models/operations/listinternaltransactionsrequest.md
  - docs/models/operations/listinternaltransactionsresponse.md
  - docs/models/operations/listl1validatorsglobals.md
  - docs/models/operations/listl1validatorsrequest.md
  - docs/models/operations/listl1validatorsresponse.md
  - docs/models/operations/listlatestblocksallchainsrequest.md
  - docs/models/operations/listlatestblocksallchainsresponse.md
  - docs/models/operations/listlatestprimarynetworkblocksglobals.md
  - docs/models/operations/listlatestprimarynetworkblocksrequest.md
  - docs/models/operations/listlatestprimarynetworkblocksresponse.md
  - docs/models/operations/listlatestprimarynetworktransactionsglobals.md
  - docs/models/operations/listlatestprimarynetworktransactionsrequest.md
  - docs/models/operations/listlatestprimarynetworktransactionsresponse.md
  - docs/models/operations/listlatestprimarynetworktransactionsresponsebody.md
  - docs/models/operations/listlatesttransactionsallchainsrequest.md
  - docs/models/operations/listlatesttransactionsallchainsresponse.md
  - docs/models/operations/listlatesttransactionsglobals.md
  - docs/models/operations/listlatesttransactionsrequest.md
  - docs/models/operations/listlatesttransactionsresponse.md
  - docs/models/operations/listlatestxchainverticesglobals.md
  - docs/models/operations/listlatestxchainverticesrequest.md
  - docs/models/operations/listlatestxchainverticesresponse.md
  - docs/models/operations/listnativetransactionsglobals.md
  - docs/models/operations/listnativetransactionsrequest.md
  - docs/models/operations/listnativetransactionsresponse.md
  - docs/models/operations/listpendingprimarynetworkrewardsglobals.md
  - docs/models/operations/listpendingprimarynetworkrewardsrequest.md
  - docs/models/operations/listpendingprimarynetworkrewardsresponse.md
  - docs/models/operations/listprimarynetworkblocksbynodeidglobals.md
  - docs/models/operations/listprimarynetworkblocksbynodeidrequest.md
  - docs/models/operations/listprimarynetworkblocksbynodeidresponse.md
  - docs/models/operations/listsubnetsglobals.md
  - docs/models/operations/listsubnetsrequest.md
  - docs/models/operations/listsubnetsresponse.md
  - docs/models/operations/listteleportermessagesbyaddressrequest.md
  - docs/models/operations/listteleportermessagesrequest.md
  - docs/models/operations/listteleportermessagesresponse.md
  - docs/models/operations/listtokensglobals.md
  - docs/models/operations/listtokensrequest.md
  - docs/models/operations/listtokensresponse.md
  - docs/models/operations/listtransactionsglobals.md
  - docs/models/operations/listtransactionsrequest.md
  - docs/models/operations/listtransactionsresponse.md
  - docs/models/operations/listtransfersglobals.md
  - docs/models/operations/listtransfersrequest.md
  - docs/models/operations/listtransfersresponse.md
  - docs/models/operations/listvalidatorsglobals.md
  - docs/models/operations/listvalidatorsrequest.md
  - docs/models/operations/listvalidatorsresponse.md
  - docs/models/operations/listwebhooksrequest.md
  - docs/models/operations/listwebhooksresponse.md
  - docs/models/operations/posttransactionexportjobrequestbody.md
  - docs/models/operations/queryparamrequesttype.md
  - docs/models/operations/reindexnftglobals.md
  - docs/models/operations/reindexnftrequest.md
  - docs/models/operations/removeaddressesfromwebhookrequest.md
  - docs/models/operations/requesttype.md
  - docs/models/operations/supportedchainsrequest.md
  - docs/models/operations/updatewebhookrequest.md
  - docs/sdks/avacloudsdk/README.md
  - docs/sdks/avacloudsdkbalances/README.md
  - docs/sdks/avacloudsdkblocks/README.md
  - docs/sdks/avacloudsdkchains/README.md
  - docs/sdks/avacloudsdkevm/README.md
  - docs/sdks/avacloudsdkhealthcheck/README.md
  - docs/sdks/avacloudsdkmetrics/README.md
  - docs/sdks/avacloudsdktransactions/README.md
  - docs/sdks/balances/README.md
  - docs/sdks/blocks/README.md
  - docs/sdks/chain/README.md
  - docs/sdks/chains/README.md
  - docs/sdks/contracts/README.md
  - docs/sdks/data/README.md
  - docs/sdks/evm/README.md
  - docs/sdks/healthcheck/README.md
  - docs/sdks/icm/README.md
  - docs/sdks/lookingglass/README.md
  - docs/sdks/metrics/README.md
  - docs/sdks/nfts/README.md
  - docs/sdks/operations/README.md
  - docs/sdks/primarynetwork/README.md
  - docs/sdks/rewards/README.md
  - docs/sdks/signatureaggregator/README.md
  - docs/sdks/teleporter/README.md
  - docs/sdks/transactions/README.md
  - docs/sdks/usagemetrics/README.md
  - docs/sdks/utxos/README.md
  - docs/sdks/vertices/README.md
  - docs/sdks/webhooks/README.md
  - eslint.config.mjs
  - package.json
  - src/core.ts
  - src/funcs/dataEvmBalancesGetNativeBalance.ts
  - src/funcs/dataEvmBalancesListCollectibleBalances.ts
  - src/funcs/dataEvmBalancesListErc1155Balances.ts
  - src/funcs/dataEvmBalancesListErc20Balances.ts
  - src/funcs/dataEvmBalancesListErc721Balances.ts
  - src/funcs/dataEvmBlocksGetBlock.ts
  - src/funcs/dataEvmBlocksGetLatestBlocks.ts
  - src/funcs/dataEvmBlocksListLatestBlocksAllChains.ts
  - src/funcs/dataEvmChainsGetAddressChains.ts
  - src/funcs/dataEvmChainsGetChainInfo.ts
  - src/funcs/dataEvmChainsListAddressChains.ts
  - src/funcs/dataEvmChainsListAllLatestBlocks.ts
  - src/funcs/dataEvmChainsListAllLatestTransactions.ts
  - src/funcs/dataEvmChainsSupportedChains.ts
  - src/funcs/dataEvmContractsGetContractMetadata.ts
  - src/funcs/dataEvmTransactionsGetDeploymentTransaction.ts
  - src/funcs/dataEvmTransactionsGetTransaction.ts
  - src/funcs/dataEvmTransactionsGetTransactionsForBlock.ts
  - src/funcs/dataEvmTransactionsListContractDeployments.ts
  - src/funcs/dataEvmTransactionsListErc1155Transactions.ts
  - src/funcs/dataEvmTransactionsListErc20Transactions.ts
  - src/funcs/dataEvmTransactionsListErc721Transactions.ts
  - src/funcs/dataEvmTransactionsListInternalTransactions.ts
  - src/funcs/dataEvmTransactionsListLatestTransactions.ts
  - src/funcs/dataEvmTransactionsListLatestTransactionsAllChains.ts
  - src/funcs/dataEvmTransactionsListNativeTransactions.ts
  - src/funcs/dataEvmTransactionsListTransactions.ts
  - src/funcs/dataEvmTransactionsListTransfers.ts
  - src/funcs/dataHealthCheckDataHealthCheck.ts
  - src/funcs/dataIcmGetIcmMessage.ts
  - src/funcs/dataIcmListIcmMessages.ts
  - src/funcs/dataIcmListIcmMessagesByAddress.ts
  - src/funcs/dataNftsGetTokenDetails.ts
  - src/funcs/dataNftsListTokens.ts
  - src/funcs/dataNftsReindexNft.ts
  - src/funcs/dataOperationsGetOperationResult.ts
  - src/funcs/dataOperationsPostTransactionExportJob.ts
  - src/funcs/dataPrimaryNetworkBalancesGetBalancesByAddresses.ts
  - src/funcs/dataPrimaryNetworkBlocksGetBlockById.ts
  - src/funcs/dataPrimaryNetworkBlocksListLatestPrimaryNetworkBlocks.ts
  - src/funcs/dataPrimaryNetworkBlocksListPrimaryNetworkBlocksByNodeId.ts
  - src/funcs/dataPrimaryNetworkGetAssetDetails.ts
  - src/funcs/dataPrimaryNetworkGetChainIdsForAddresses.ts
  - src/funcs/dataPrimaryNetworkGetNetworkDetails.ts
  - src/funcs/dataPrimaryNetworkGetSingleValidatorDetails.ts
  - src/funcs/dataPrimaryNetworkGetSubnetById.ts
  - src/funcs/dataPrimaryNetworkListBlockchains.ts
  - src/funcs/dataPrimaryNetworkListDelegators.ts
  - src/funcs/dataPrimaryNetworkListL1Validators.ts
  - src/funcs/dataPrimaryNetworkListSubnets.ts
  - src/funcs/dataPrimaryNetworkListValidators.ts
  - src/funcs/dataPrimaryNetworkRewardsListHistoricalPrimaryNetworkRewards.ts
  - src/funcs/dataPrimaryNetworkRewardsListPendingPrimaryNetworkRewards.ts
  - src/funcs/dataPrimaryNetworkTransactionsGetTxByHash.ts
  - src/funcs/dataPrimaryNetworkTransactionsListActivePrimaryNetworkStakingTransactions.ts
  - src/funcs/dataPrimaryNetworkTransactionsListAssetTransactions.ts
  - src/funcs/dataPrimaryNetworkTransactionsListLatestPrimaryNetworkTransactions.ts
  - src/funcs/dataPrimaryNetworkUtxosGetUtxosByAddresses.ts
  - src/funcs/dataPrimaryNetworkVerticesGetVertexByHash.ts
  - src/funcs/dataPrimaryNetworkVerticesGetVertexByHeight.ts
  - src/funcs/dataPrimaryNetworkVerticesListLatestXChainVertices.ts
  - src/funcs/dataSignatureAggregatorAggregateSignatures.ts
  - src/funcs/dataTeleporterGetTeleporterMessage.ts
  - src/funcs/dataTeleporterListTeleporterMessages.ts
  - src/funcs/dataTeleporterListTeleporterMessagesByAddress.ts
  - src/funcs/dataUsageMetricsGetApiLogs.ts
  - src/funcs/dataUsageMetricsGetApiUsageMetrics.ts
  - src/funcs/dataUsageMetricsGetRpcUsageMetrics.ts
  - src/funcs/dataUsageMetricsGetSubnetRpcUsageMetrics.ts
  - src/funcs/dataWebhooksAddAddressesToWebhook.ts
  - src/funcs/dataWebhooksCreateWebhook.ts
  - src/funcs/dataWebhooksDeactivateWebhook.ts
  - src/funcs/dataWebhooksGenerateOrRotateSharedSecret.ts
  - src/funcs/dataWebhooksGetAddressesFromWebhook.ts
  - src/funcs/dataWebhooksGetSharedSecret.ts
  - src/funcs/dataWebhooksGetWebhook.ts
  - src/funcs/dataWebhooksListWebhooks.ts
  - src/funcs/dataWebhooksRemoveAddressesFromWebhook.ts
  - src/funcs/dataWebhooksUpdateWebhook.ts
  - src/funcs/metricsChainMetricsGetEvmChainMetrics.ts
  - src/funcs/metricsChainMetricsGetEvmChainRollingWindowMetrics.ts
  - src/funcs/metricsChainMetricsGetStakingMetrics.ts
  - src/funcs/metricsChainMetricsGetTeleporterMetricsByChain.ts
  - src/funcs/metricsEvmChainsGetChain.ts
  - src/funcs/metricsEvmChainsListChains.ts
  - src/funcs/metricsHealthCheckMetricsHealthCheck.ts
  - src/funcs/metricsLookingGlassCompositeQuery.ts
  - src/funcs/metricsLookingGlassGetAddressesByBalanceOverTime.ts
  - src/funcs/metricsLookingGlassGetAddressesByBtcbBridged.ts
  - src/funcs/metricsLookingGlassGetNftHoldersByContractAddress.ts
  - src/funcs/metricsLookingGlassGetValidatorsByDateRange.ts
  - src/hooks/hooks.ts
  - src/hooks/index.ts
  - src/hooks/types.ts
  - src/index.ts
  - src/lib/base64.ts
  - src/lib/config.ts
  - src/lib/dlv.ts
  - src/lib/encodings.ts
  - src/lib/files.ts
  - src/lib/http.ts
  - src/lib/is-plain-object.ts
  - src/lib/logger.ts
  - src/lib/matchers.ts
  - src/lib/primitives.ts
  - src/lib/retries.ts
  - src/lib/schemas.ts
  - src/lib/sdks.ts
  - src/lib/security.ts
  - src/lib/url.ts
  - src/mcp-server/build.mts
  - src/mcp-server/cli.ts
  - src/mcp-server/cli/start/command.ts
  - src/mcp-server/cli/start/impl.ts
  - src/mcp-server/console-logger.ts
  - src/mcp-server/mcp-server.ts
  - src/mcp-server/resources.ts
  - src/mcp-server/scopes.ts
  - src/mcp-server/server.ts
  - src/mcp-server/shared.ts
  - src/mcp-server/tools.ts
  - src/mcp-server/tools/dataEvmBalancesGetNativeBalance.ts
  - src/mcp-server/tools/dataEvmBalancesListCollectibleBalances.ts
  - src/mcp-server/tools/dataEvmBalancesListErc1155Balances.ts
  - src/mcp-server/tools/dataEvmBalancesListErc20Balances.ts
  - src/mcp-server/tools/dataEvmBalancesListErc721Balances.ts
  - src/mcp-server/tools/dataEvmBlocksGetBlock.ts
  - src/mcp-server/tools/dataEvmBlocksGetLatestBlocks.ts
  - src/mcp-server/tools/dataEvmBlocksListLatestBlocksAllChains.ts
  - src/mcp-server/tools/dataEvmChainsGetAddressChains.ts
  - src/mcp-server/tools/dataEvmChainsGetChainInfo.ts
  - src/mcp-server/tools/dataEvmChainsListAddressChains.ts
  - src/mcp-server/tools/dataEvmChainsListAllLatestBlocks.ts
  - src/mcp-server/tools/dataEvmChainsListAllLatestTransactions.ts
  - src/mcp-server/tools/dataEvmChainsSupportedChains.ts
  - src/mcp-server/tools/dataEvmContractsGetContractMetadata.ts
  - src/mcp-server/tools/dataEvmTransactionsGetDeploymentTransaction.ts
  - src/mcp-server/tools/dataEvmTransactionsGetTransaction.ts
  - src/mcp-server/tools/dataEvmTransactionsGetTransactionsForBlock.ts
  - src/mcp-server/tools/dataEvmTransactionsListContractDeployments.ts
  - src/mcp-server/tools/dataEvmTransactionsListErc1155Transactions.ts
  - src/mcp-server/tools/dataEvmTransactionsListErc20Transactions.ts
  - src/mcp-server/tools/dataEvmTransactionsListErc721Transactions.ts
  - src/mcp-server/tools/dataEvmTransactionsListInternalTransactions.ts
  - src/mcp-server/tools/dataEvmTransactionsListLatestTransactions.ts
  - src/mcp-server/tools/dataEvmTransactionsListLatestTransactionsAllChains.ts
  - src/mcp-server/tools/dataEvmTransactionsListNativeTransactions.ts
  - src/mcp-server/tools/dataEvmTransactionsListTransactions.ts
  - src/mcp-server/tools/dataEvmTransactionsListTransfers.ts
  - src/mcp-server/tools/dataHealthCheckDataHealthCheck.ts
  - src/mcp-server/tools/dataIcmGetIcmMessage.ts
  - src/mcp-server/tools/dataIcmListIcmMessages.ts
  - src/mcp-server/tools/dataIcmListIcmMessagesByAddress.ts
  - src/mcp-server/tools/dataNftsGetTokenDetails.ts
  - src/mcp-server/tools/dataNftsListTokens.ts
  - src/mcp-server/tools/dataNftsReindexNft.ts
  - src/mcp-server/tools/dataOperationsGetOperationResult.ts
  - src/mcp-server/tools/dataOperationsPostTransactionExportJob.ts
  - src/mcp-server/tools/dataPrimaryNetworkBalancesGetBalancesByAddresses.ts
  - src/mcp-server/tools/dataPrimaryNetworkBlocksGetBlockById.ts
  - src/mcp-server/tools/dataPrimaryNetworkBlocksListLatestPrimaryNetworkBlocks.ts
  - src/mcp-server/tools/dataPrimaryNetworkBlocksListPrimaryNetworkBlocksByNodeId.ts
  - src/mcp-server/tools/dataPrimaryNetworkGetAssetDetails.ts
  - src/mcp-server/tools/dataPrimaryNetworkGetChainIdsForAddresses.ts
  - src/mcp-server/tools/dataPrimaryNetworkGetNetworkDetails.ts
  - src/mcp-server/tools/dataPrimaryNetworkGetSingleValidatorDetails.ts
  - src/mcp-server/tools/dataPrimaryNetworkGetSubnetById.ts
  - src/mcp-server/tools/dataPrimaryNetworkListBlockchains.ts
  - src/mcp-server/tools/dataPrimaryNetworkListDelegators.ts
  - src/mcp-server/tools/dataPrimaryNetworkListL1Validators.ts
  - src/mcp-server/tools/dataPrimaryNetworkListSubnets.ts
  - src/mcp-server/tools/dataPrimaryNetworkListValidators.ts
  - src/mcp-server/tools/dataPrimaryNetworkRewardsListHistoricalPrimaryNetworkRewards.ts
  - src/mcp-server/tools/dataPrimaryNetworkRewardsListPendingPrimaryNetworkRewards.ts
  - src/mcp-server/tools/dataPrimaryNetworkTransactionsGetTxByHash.ts
  - src/mcp-server/tools/dataPrimaryNetworkTransactionsListActivePrimaryNetworkStakingTransactions.ts
  - src/mcp-server/tools/dataPrimaryNetworkTransactionsListAssetTransactions.ts
  - src/mcp-server/tools/dataPrimaryNetworkTransactionsListLatestPrimaryNetworkTransactions.ts
  - src/mcp-server/tools/dataPrimaryNetworkUtxosGetUtxosByAddresses.ts
  - src/mcp-server/tools/dataPrimaryNetworkVerticesGetVertexByHash.ts
  - src/mcp-server/tools/dataPrimaryNetworkVerticesGetVertexByHeight.ts
  - src/mcp-server/tools/dataPrimaryNetworkVerticesListLatestXChainVertices.ts
  - src/mcp-server/tools/dataSignatureAggregatorAggregateSignatures.ts
  - src/mcp-server/tools/dataTeleporterGetTeleporterMessage.ts
  - src/mcp-server/tools/dataTeleporterListTeleporterMessages.ts
  - src/mcp-server/tools/dataTeleporterListTeleporterMessagesByAddress.ts
  - src/mcp-server/tools/dataUsageMetricsGetApiLogs.ts
  - src/mcp-server/tools/dataUsageMetricsGetApiUsageMetrics.ts
  - src/mcp-server/tools/dataUsageMetricsGetRpcUsageMetrics.ts
  - src/mcp-server/tools/dataUsageMetricsGetSubnetRpcUsageMetrics.ts
  - src/mcp-server/tools/dataWebhooksAddAddressesToWebhook.ts
  - src/mcp-server/tools/dataWebhooksCreateWebhook.ts
  - src/mcp-server/tools/dataWebhooksDeactivateWebhook.ts
  - src/mcp-server/tools/dataWebhooksGenerateOrRotateSharedSecret.ts
  - src/mcp-server/tools/dataWebhooksGetAddressesFromWebhook.ts
  - src/mcp-server/tools/dataWebhooksGetSharedSecret.ts
  - src/mcp-server/tools/dataWebhooksGetWebhook.ts
  - src/mcp-server/tools/dataWebhooksListWebhooks.ts
  - src/mcp-server/tools/dataWebhooksRemoveAddressesFromWebhook.ts
  - src/mcp-server/tools/dataWebhooksUpdateWebhook.ts
  - src/mcp-server/tools/metricsChainMetricsGetEvmChainMetrics.ts
  - src/mcp-server/tools/metricsChainMetricsGetEvmChainRollingWindowMetrics.ts
  - src/mcp-server/tools/metricsChainMetricsGetStakingMetrics.ts
  - src/mcp-server/tools/metricsChainMetricsGetTeleporterMetricsByChain.ts
  - src/mcp-server/tools/metricsEvmChainsGetChain.ts
  - src/mcp-server/tools/metricsEvmChainsListChains.ts
  - src/mcp-server/tools/metricsHealthCheckMetricsHealthCheck.ts
  - src/mcp-server/tools/metricsLookingGlassCompositeQuery.ts
  - src/mcp-server/tools/metricsLookingGlassGetAddressesByBalanceOverTime.ts
  - src/mcp-server/tools/metricsLookingGlassGetAddressesByBtcbBridged.ts
  - src/mcp-server/tools/metricsLookingGlassGetNftHoldersByContractAddress.ts
  - src/mcp-server/tools/metricsLookingGlassGetValidatorsByDateRange.ts
  - src/models/components/activedelegatordetails.ts
  - src/models/components/activevalidatordetails.ts
  - src/models/components/addressactivitymetadata.ts
  - src/models/components/addressdetails.ts
  - src/models/components/addresseschangerequest.ts
  - src/models/components/aggregatedassetamount.ts
  - src/models/components/alltimeerc20balancequerydto.ts
  - src/models/components/alltimenativebalancequerydto.ts
  - src/models/components/alltimenftholdersquerydto.ts
  - src/models/components/alltimestarsarenabalancequerydto.ts
  - src/models/components/anytimeerc20balancequerydto.ts
  - src/models/components/anytimenativebalancequerydto.ts
  - src/models/components/anytimenftholdersquerydto.ts
  - src/models/components/anytimestarsarenabalancequerydto.ts
  - src/models/components/apifeature.ts
  - src/models/components/assetamount.ts
  - src/models/components/assetwithpriceinfo.ts
  - src/models/components/balanceowner.ts
  - src/models/components/blockchain.ts
  - src/models/components/blockchainid.ts
  - src/models/components/blockchainids.ts
  - src/models/components/blockchaininfo.ts
  - src/models/components/blscredentials.ts
  - src/models/components/cchainatomicbalances.ts
  - src/models/components/cchainexporttransaction.ts
  - src/models/components/cchainimporttransaction.ts
  - src/models/components/cchainsharedassetbalance.ts
  - src/models/components/chain.ts
  - src/models/components/chainaddresschainidmap.ts
  - src/models/components/chainaddresschainidmaplistresponse.ts
  - src/models/components/chaininfo.ts
  - src/models/components/chainmetric.ts
  - src/models/components/chainrollingwindowmetric.ts
  - src/models/components/chainrollingwindowmetricsvalue.ts
  - src/models/components/chainstatus.ts
  - src/models/components/completeddelegatordetails.ts
  - src/models/components/completedvalidatordetails.ts
  - src/models/components/compositequeryrequestdto.ts
  - src/models/components/compositequeryresponse.ts
  - src/models/components/contractdeploymentdetails.ts
  - src/models/components/createevmtransactionexportrequest.ts
  - src/models/components/createprimarynetworktransactionexportrequest.ts
  - src/models/components/createwebhookrequest.ts
  - src/models/components/currencycode.ts
  - src/models/components/datalistchainsresponse.ts
  - src/models/components/daterangeerc20minbalanceparam.ts
  - src/models/components/daterangeminbalanceparam.ts
  - src/models/components/daterangenftholdersparam.ts
  - src/models/components/daterangestarsarenaminbalanceparam.ts
  - src/models/components/delegationstatustype.ts
  - src/models/components/delegatorsdetails.ts
  - src/models/components/deliveredicmmessage.ts
  - src/models/components/deliveredsourcenotindexedicmmessage.ts
  - src/models/components/deliveredsourcenotindexedteleportermessage.ts
  - src/models/components/deliveredteleportermessage.ts
  - src/models/components/erc1155contract.ts
  - src/models/components/erc1155token.ts
  - src/models/components/erc1155tokenbalance.ts
  - src/models/components/erc1155tokenmetadata.ts
  - src/models/components/erc1155transfer.ts
  - src/models/components/erc1155transferdetails.ts
  - src/models/components/erc20contract.ts
  - src/models/components/erc20token.ts
  - src/models/components/erc20tokenbalance.ts
  - src/models/components/erc20transfer.ts
  - src/models/components/erc20transferdetails.ts
  - src/models/components/erc721contract.ts
  - src/models/components/erc721token.ts
  - src/models/components/erc721tokenbalance.ts
  - src/models/components/erc721tokenmetadata.ts
  - src/models/components/erc721transfer.ts
  - src/models/components/erc721transferdetails.ts
  - src/models/components/eventtype.ts
  - src/models/components/evmblock.ts
  - src/models/components/evminput.ts
  - src/models/components/evmnetworkoptions.ts
  - src/models/components/evmoperationtype.ts
  - src/models/components/evmoutput.ts
  - src/models/components/fullnativetransactiondetails.ts
  - src/models/components/getchainresponse.ts
  - src/models/components/getevmblockresponse.ts
  - src/models/components/getnativebalanceresponse.ts
  - src/models/components/getnetworkdetailsresponse.ts
  - src/models/components/getprimarynetworkblockresponse.ts
  - src/models/components/gettransactionresponse.ts
  - src/models/components/globalparamnetwork.ts
  - src/models/components/healthcheckresultdto.ts
  - src/models/components/healthindicatorresultdto.ts
  - src/models/components/historicalreward.ts
  - src/models/components/icmdestinationtransaction.ts
  - src/models/components/icmreceipt.ts
  - src/models/components/icmrewarddetails.ts
  - src/models/components/icmsourcetransaction.ts
  - src/models/components/imageasset.ts
  - src/models/components/index.ts
  - src/models/components/internaltransaction.ts
  - src/models/components/internaltransactiondetails.ts
  - src/models/components/internaltransactionopcall.ts
  - src/models/components/l1validatordetailsfull.ts
  - src/models/components/l1validatordetailstransaction.ts
  - src/models/components/l1validatormanagerdetails.ts
  - src/models/components/latestbalanceparams.ts
  - src/models/components/latestbalancequerydto.ts
  - src/models/components/lateststarsarenabalanceparams.ts
  - src/models/components/lateststarsarenabalancequerydto.ts
  - src/models/components/listaddresschainsresponse.ts
  - src/models/components/listblockchainsresponse.ts
  - src/models/components/listcchainatomicbalancesresponse.ts
  - src/models/components/listcchainatomictransactionsresponse.ts
  - src/models/components/listcollectiblebalancesresponse.ts
  - src/models/components/listcontractsresponse.ts
  - src/models/components/listdelegatordetailsresponse.ts
  - src/models/components/listerc1155balancesresponse.ts
  - src/models/components/listerc1155transactionsresponse.ts
  - src/models/components/listerc20balancesresponse.ts
  - src/models/components/listerc20transactionsresponse.ts
  - src/models/components/listerc721balancesresponse.ts
  - src/models/components/listerc721transactionsresponse.ts
  - src/models/components/listevmblocksresponse.ts
  - src/models/components/listhistoricalrewardsresponse.ts
  - src/models/components/listicmmessagesresponse.ts
  - src/models/components/listinternaltransactionsresponse.ts
  - src/models/components/listl1validatorsresponse.ts
  - src/models/components/listnativetransactionsresponse.ts
  - src/models/components/listnfttokens.ts
  - src/models/components/listpchainbalancesresponse.ts
  - src/models/components/listpchaintransactionsresponse.ts
  - src/models/components/listpchainutxosresponse.ts
  - src/models/components/listpendingrewardsresponse.ts
  - src/models/components/listprimarynetworkblocksresponse.ts
  - src/models/components/listsubnetsresponse.ts
  - src/models/components/listteleportermessagesresponse.ts
  - src/models/components/listtransactiondetailsresponse.ts
  - src/models/components/listtransfersresponse.ts
  - src/models/components/listutxosresponse.ts
  - src/models/components/listvalidatordetailsresponse.ts
  - src/models/components/listwebhookaddressesresponse.ts
  - src/models/components/listwebhooksresponse.ts
  - src/models/components/listxchainbalancesresponse.ts
  - src/models/components/listxchaintransactionsresponse.ts
  - src/models/components/listxchainverticesresponse.ts
  - src/models/components/logsformat.ts
  - src/models/components/logsformatmetadata.ts
  - src/models/components/logsresponsedto.ts
  - src/models/components/lookingglassresponse.ts
  - src/models/components/method.ts
  - src/models/components/metric.ts
  - src/models/components/metricsapiresponse.ts
  - src/models/components/metricslistchainsresponse.ts
  - src/models/components/metricsvalue.ts
  - src/models/components/money.ts
  - src/models/components/nativetokenbalance.ts
  - src/models/components/nativetransaction.ts
  - src/models/components/network.ts
  - src/models/components/networkmetric.ts
  - src/models/components/networktoken.ts
  - src/models/components/networktokendetails.ts
  - src/models/components/networktype.ts
  - src/models/components/nftholdersresponse.ts
  - src/models/components/nfttokenmetadatastatus.ts
  - src/models/components/operationstatus.ts
  - src/models/components/operationstatuscode.ts
  - src/models/components/operationstatusresponse.ts
  - src/models/components/operationtype.ts
  - src/models/components/operator.ts
  - src/models/components/pchainaddressdetails.ts
  - src/models/components/pchainbalance.ts
  - src/models/components/pchainid.ts
  - src/models/components/pchainlookingglassresponse.ts
  - src/models/components/pchainsharedasset.ts
  - src/models/components/pchaintransaction.ts
  - src/models/components/pchaintransactiontype.ts
  - src/models/components/pchainutxo.ts
  - src/models/components/pendingdelegatordetails.ts
  - src/models/components/pendingicmmessage.ts
  - src/models/components/pendingreward.ts
  - src/models/components/pendingteleportermessage.ts
  - src/models/components/pendingvalidatordetails.ts
  - src/models/components/pricingproviders.ts
  - src/models/components/primarynetworkassetcap.ts
  - src/models/components/primarynetworkassettype.ts
  - src/models/components/primarynetworkblock.ts
  - src/models/components/primarynetworkchaininfo.ts
  - src/models/components/primarynetworkchainname.ts
  - src/models/components/primarynetworkoperationtype.ts
  - src/models/components/primarynetworkoptions.ts
  - src/models/components/primarynetworktxtype.ts
  - src/models/components/proposerdetails.ts
  - src/models/components/removedvalidatordetails.ts
  - src/models/components/requesttype.ts
  - src/models/components/resourcelink.ts
  - src/models/components/resourcelinktype.ts
  - src/models/components/rewards.ts
  - src/models/components/rewardtype.ts
  - src/models/components/richaddress.ts
  - src/models/components/rollingwindowmetricsapiresponse.ts
  - src/models/components/rpcmetrics.ts
  - src/models/components/rpcusagemetricsgroupbyenum.ts
  - src/models/components/rpcusagemetricsvalueaggregated.ts
  - src/models/components/security.ts
  - src/models/components/sharedsecretsresponse.ts
  - src/models/components/signatureaggregationresponse.ts
  - src/models/components/signatureaggregatorrequest.ts
  - src/models/components/sortbyoption.ts
  - src/models/components/sortorder.ts
  - src/models/components/stakingdistribution.ts
  - src/models/components/subnet.ts
  - src/models/components/subnetownershipinfo.ts
  - src/models/components/subnetrpctimeintervalgranularity.ts
  - src/models/components/subnetrpcusagemetricsresponsedto.ts
  - src/models/components/teleporterchainmetricsapiresponse.ts
  - src/models/components/teleporterdestinationtransaction.ts
  - src/models/components/teleportermessageinfo.ts
  - src/models/components/teleportermetric.ts
  - src/models/components/teleportermetricsvalue.ts
  - src/models/components/teleporterreceipt.ts
  - src/models/components/teleporterrewarddetails.ts
  - src/models/components/teleportersourcetransaction.ts
  - src/models/components/timeintervalgranularity.ts
  - src/models/components/timeintervalgranularityextended.ts
  - src/models/components/timestamprangenftholdersparam.ts
  - src/models/components/tokentype.ts
  - src/models/components/transactiondetails.ts
  - src/models/components/transactiondirectiontype.ts
  - src/models/components/transactionexportmetadata.ts
  - src/models/components/transactionmethodtype.ts
  - src/models/components/transactionstatus.ts
  - src/models/components/transactionvertexdetail.ts
  - src/models/components/unknowncontract.ts
  - src/models/components/updatewebhookrequest.ts
  - src/models/components/usagemetricsgroupbyenum.ts
  - src/models/components/usagemetricsresponsedto.ts
  - src/models/components/usagemetricsvaluedto.ts
  - src/models/components/utilityaddresses.ts
  - src/models/components/utxo.ts
  - src/models/components/utxocredential.ts
  - src/models/components/utxotype.ts
  - src/models/components/validationstatustype.ts
  - src/models/components/validatorhealthdetails.ts
  - src/models/components/validatorsdetails.ts
  - src/models/components/vmname.ts
  - src/models/components/webhookresponse.ts
  - src/models/components/webhookstatus.ts
  - src/models/components/webhookstatustype.ts
  - src/models/components/xchainassetdetails.ts
  - src/models/components/xchainbalances.ts
  - src/models/components/xchainid.ts
  - src/models/components/xchainlineartransaction.ts
  - src/models/components/xchainnonlineartransaction.ts
  - src/models/components/xchainsharedassetbalance.ts
  - src/models/components/xchaintransactiontype.ts
  - src/models/components/xchainvertex.ts
  - src/models/errors/badgateway.ts
  - src/models/errors/badrequest.ts
  - src/models/errors/forbidden.ts
  - src/models/errors/httpclienterrors.ts
  - src/models/errors/index.ts
  - src/models/errors/internalservererror.ts
  - src/models/errors/notfound.ts
  - src/models/errors/sdkerror.ts
  - src/models/errors/sdkvalidationerror.ts
  - src/models/errors/serviceunavailable.ts
  - src/models/errors/toomanyrequests.ts
  - src/models/errors/unauthorized.ts
  - src/models/operations/addaddressestowebhook.ts
  - src/models/operations/aggregatesignatures.ts
  - src/models/operations/compositequeryv2.ts
  - src/models/operations/createwebhook.ts
  - src/models/operations/datahealthcheck.ts
  - src/models/operations/deactivatewebhook.ts
  - src/models/operations/generateorrotatesharedsecret.ts
  - src/models/operations/getaddresschains.ts
  - src/models/operations/getaddressesbybalanceovertime.ts
  - src/models/operations/getaddressesbybtcbbridged.ts
  - src/models/operations/getaddressesfromwebhook.ts
  - src/models/operations/getapilogs.ts
  - src/models/operations/getapiusagemetrics.ts
  - src/models/operations/getassetdetails.ts
  - src/models/operations/getbalancesbyaddresses.ts
  - src/models/operations/getblock.ts
  - src/models/operations/getblockbyid.ts
  - src/models/operations/getchain.ts
  - src/models/operations/getchainidsforaddresses.ts
  - src/models/operations/getchaininfo.ts
  - src/models/operations/getcontractmetadata.ts
  - src/models/operations/getdeploymenttransaction.ts
  - src/models/operations/getevmchainmetrics.ts
  - src/models/operations/getevmchainrollingwindowmetrics.ts
  - src/models/operations/geticmmessage.ts
  - src/models/operations/getlatestblocks.ts
  - src/models/operations/getnativebalance.ts
  - src/models/operations/getnetworkdetails.ts
  - src/models/operations/getnftholdersbycontractaddress.ts
  - src/models/operations/getoperationresult.ts
  - src/models/operations/getrpcusagemetrics.ts
  - src/models/operations/getsharedsecret.ts
  - src/models/operations/getsinglevalidatordetails.ts
  - src/models/operations/getstakingmetrics.ts
  - src/models/operations/getsubnetbyid.ts
  - src/models/operations/getsubnetrpcusagemetrics.ts
  - src/models/operations/getteleportermessage.ts
  - src/models/operations/getteleportermetricsbychain.ts
  - src/models/operations/gettokendetails.ts
  - src/models/operations/gettransaction.ts
  - src/models/operations/gettransactionsforblock.ts
  - src/models/operations/gettxbyhash.ts
  - src/models/operations/getutxosbyaddresses.ts
  - src/models/operations/getvalidatorsbydaterange.ts
  - src/models/operations/getvertexbyhash.ts
  - src/models/operations/getvertexbyheight.ts
  - src/models/operations/getwebhook.ts
  - src/models/operations/index.ts
  - src/models/operations/listactiveprimarynetworkstakingtransactions.ts
  - src/models/operations/listaddresschains.ts
  - src/models/operations/listalllatestblocks.ts
  - src/models/operations/listalllatesttransactions.ts
  - src/models/operations/listassettransactions.ts
  - src/models/operations/listblockchains.ts
  - src/models/operations/listchains.ts
  - src/models/operations/listcollectiblebalances.ts
  - src/models/operations/listcontractdeployments.ts
  - src/models/operations/listdelegators.ts
  - src/models/operations/listerc1155balances.ts
  - src/models/operations/listerc1155transactions.ts
  - src/models/operations/listerc20balances.ts
  - src/models/operations/listerc20transactions.ts
  - src/models/operations/listerc721balances.ts
  - src/models/operations/listerc721transactions.ts
  - src/models/operations/listhistoricalprimarynetworkrewards.ts
  - src/models/operations/listicmmessages.ts
  - src/models/operations/listicmmessagesbyaddress.ts
  - src/models/operations/listinternaltransactions.ts
  - src/models/operations/listl1validators.ts
  - src/models/operations/listlatestblocksallchains.ts
  - src/models/operations/listlatestprimarynetworkblocks.ts
  - src/models/operations/listlatestprimarynetworktransactions.ts
  - src/models/operations/listlatesttransactions.ts
  - src/models/operations/listlatesttransactionsallchains.ts
  - src/models/operations/listlatestxchainvertices.ts
  - src/models/operations/listnativetransactions.ts
  - src/models/operations/listpendingprimarynetworkrewards.ts
  - src/models/operations/listprimarynetworkblocksbynodeid.ts
  - src/models/operations/listsubnets.ts
  - src/models/operations/listteleportermessages.ts
  - src/models/operations/listteleportermessagesbyaddress.ts
  - src/models/operations/listtokens.ts
  - src/models/operations/listtransactions.ts
  - src/models/operations/listtransfers.ts
  - src/models/operations/listvalidators.ts
  - src/models/operations/listwebhooks.ts
  - src/models/operations/metricshealthcheck.ts
  - src/models/operations/posttransactionexportjob.ts
  - src/models/operations/reindexnft.ts
  - src/models/operations/removeaddressesfromwebhook.ts
  - src/models/operations/supportedchains.ts
  - src/models/operations/updatewebhook.ts
  - src/sdk/avacloudsdkbalances.ts
  - src/sdk/avacloudsdkblocks.ts
  - src/sdk/avacloudsdkchains.ts
  - src/sdk/avacloudsdkevm.ts
  - src/sdk/avacloudsdkhealthcheck.ts
  - src/sdk/avacloudsdkmetrics.ts
  - src/sdk/avacloudsdktransactions.ts
  - src/sdk/balances.ts
  - src/sdk/blocks.ts
  - src/sdk/chain.ts
  - src/sdk/chains.ts
  - src/sdk/contracts.ts
  - src/sdk/data.ts
  - src/sdk/evm.ts
  - src/sdk/healthcheck.ts
  - src/sdk/icm.ts
  - src/sdk/index.ts
  - src/sdk/lookingglass.ts
  - src/sdk/metrics.ts
  - src/sdk/nfts.ts
  - src/sdk/operations.ts
  - src/sdk/primarynetwork.ts
  - src/sdk/rewards.ts
  - src/sdk/sdk.ts
  - src/sdk/signatureaggregator.ts
  - src/sdk/teleporter.ts
  - src/sdk/transactions.ts
  - src/sdk/usagemetrics.ts
  - src/sdk/utxos.ts
  - src/sdk/vertices.ts
  - src/sdk/webhooks.ts
  - src/types/async.ts
  - src/types/blobs.ts
  - src/types/constdatetime.ts
  - src/types/enums.ts
  - src/types/fp.ts
  - src/types/index.ts
  - src/types/operations.ts
  - src/types/rfcdate.ts
  - src/types/streams.ts
  - tsconfig.json
examples:
  metrics-health-check:
    speakeasy-default-metrics-health-check:
      responses:
        "200":
          application/json: {"status": "ok", "info": {"database": {"status": "up"}}, "details": {"database": {"status": "up"}}}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
  listChains:
    "":
      parameters:
        query:
          network: "mainnet"
      responses:
        "200":
          application/json: {"chains": [{"evmChainId": 43114, "chainName": "c_chain", "blockchainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5", "subnetId": "11111111111111111111111111111111LpoYY", "network": "mainnet"}, {"evmChainId": 43114, "chainName": "c_chain", "blockchainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5", "subnetId": "11111111111111111111111111111111LpoYY", "network": "testnet"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getChain:
    "":
      parameters:
        path:
          chainId: "43114"
      responses:
        "200":
          application/json: {"evmChainId": 43114, "chainName": "c_chain", "blockchainId": "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5", "subnetId": "11111111111111111111111111111111LpoYY", "network": "mainnet"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getEvmChainMetrics:
    "":
      parameters:
        path:
          metric: "activeAddresses"
          chainId: "43114"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          timeInterval: "day"
          pageSize: "10"
      responses:
        "200":
          application/json: {"results": []}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getTeleporterMetricsByChain:
    "":
      parameters:
        path:
          metric: "teleporterSourceTxnCount"
          chainId: "43114"
      responses:
        "200":
          application/json: {"result": {"value": 2345.82}}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getEvmChainRollingWindowMetrics:
    "":
      parameters:
        path:
          metric: "txCount"
          chainId: "43114"
      responses:
        "200":
          application/json: {"result": {"lastHour": 7983.08, "lastDay": 371.4, "lastMonth": 1946.22, "lastYear": 5530.22, "allTime": 2030.22}}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getStakingMetrics:
    "":
      parameters:
        path:
          metric: "validatorCount"
          network: "mainnet"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"results": [{"value": 2512.08, "timestamp": 9079.49}, {"value": 5878.55, "timestamp": 471.45}, {"value": 3716.7, "timestamp": 8933.57}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getNftHoldersByContractAddress:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x7a420AEFF902AAa2c85a190D7B91Ce8BEFffFE14"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"addresses": [{"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}], "nftCollectionName": ["NFT Project"], "nftSymbol": ["NFTPROJ"], "totalHolders": 10, "totalTokens": 10}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getAddressesByBalanceOverTime:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
        query:
          threshold: "1000000"
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
      responses:
        "200":
          application/json: {"addresses": [{"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}, {"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getAddressesByBtcbBridged:
    "":
      parameters:
        query:
          threshold: "1000000"
          pageSize: "10"
      responses:
        "200":
          application/json: {"addresses": [{"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}, {"address": "0x1234567890abcdef1234567890abcdef123456789", "sortKey": "123"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getValidatorsByDateRange:
    "":
      parameters:
        path:
          subnetId: "11111111111111111111111111111111LpoYY"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"addresses": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  compositeQueryV2:
    speakeasy-default-composite-query-v2:
      requestBody:
        application/json: {"pageSize": 1000, "queries": [{"id": "<id>", "type": "AllTimeStarsArenaBalance", "params": {"firstDate": "<value>", "lastDate": "<value>", "minBalance": "<value>", "subjectAddress": "<value>"}}, {"id": "<id>", "type": "AnyTimeStarsArenaBalance", "params": {"firstDate": "<value>", "lastDate": "<value>", "minBalance": "<value>", "subjectAddress": "<value>"}}, {"id": "<id>", "type": "AllTimeStarsArenaBalance", "params": {"firstDate": "<value>", "lastDate": "<value>", "minBalance": "<value>", "subjectAddress": "<value>"}}], "operator": "OR"}
      responses:
        "200":
          application/json: {"subQueryCounts": {"1": 1, "2": 2, "3": 2}, "totalCount": 2, "addresses": ["0x1234567890abcdef1234567890abcdef123456789"]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  data-health-check:
    speakeasy-default-data-health-check:
      responses:
        "200":
          application/json: {"status": "ok", "info": {"database": {"status": "up"}}, "details": {"database": {"status": "up"}}}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
  listAddressChains:
    "":
      parameters:
        path:
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
      responses:
        "200":
          application/json: {"indexedChains": [{"chainId": "<id>", "status": "OK", "chainName": "<value>", "description": "yet lumpy shell blah connect everlasting meh", "vmName": "BITCOIN", "rpcUrl": "https://juicy-popularity.com/", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listAllChainsLatestTransactions:
    "":
      parameters:
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CREATION", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listAllChainsLatestBlocks:
    "":
      parameters:
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"blocks": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  reindexNft:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
          tokenId: "145"
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listTokens:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"tokens": [{"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://witty-pop.org/", "metadata": {"indexStatus": "UNINDEXED"}}, {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://sunny-airport.org/", "metadata": {"indexStatus": "UNKNOWN"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://punctual-dependency.com/", "metadata": {"indexStatus": "METADATA_CONTENT_TOO_LARGE"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getTokenDetails:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
          tokenId: "145"
      responses:
        "200":
          application/json: {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://honorable-polarisation.org/", "metadata": {"indexStatus": "UNKNOWN"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getOperationResult:
    "":
      parameters:
        path:
          operationId: "aa22054a-cb7c-4a4e-9b83-59f2ede74138"
      responses:
        "200":
          application/json: {"operationId": "<id>", "operationType": "TRANSACTION_EXPORT_PRIMARY_NETWORK_SIMPLE", "operationStatus": "FAILED", "metadata": {}, "createdAtTimestamp": 9756.59, "updatedAtTimestamp": 3934.81}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  postTransactionExportJob:
    speakeasy-default-post-transaction-export-job:
      requestBody:
        application/json: {"type": "TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING", "firstDate": "2023-05-01", "lastDate": "2023-05-02", "options": {"includeChains": ["p-chain"]}}
      responses:
        "201":
          application/json: {"operationId": "<id>", "operationType": "TRANSACTION_EXPORT_PRIMARY_NETWORK_STAKING", "operationStatus": "FAILED", "metadata": {}, "createdAtTimestamp": 6126.88, "updatedAtTimestamp": 7535.94}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getAssetDetails:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
          assetId: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
      responses:
        "200":
          application/json: {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "createdAtTimestamp": 1675444720, "cap": "variable"}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getChainIdsForAddresses:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
      responses:
        "200":
          application/json: {"addresses": [{"address": "10994 The Ridings", "blockchainIds": []}, {"address": "3561 Smith Ramp", "blockchainIds": ["2JVSBoinj9C2J33VntvzYtVJNZdN2NKiwwKjcumHUWEb5DbBrm", "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5"]}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getNetworkDetails:
    "":
      parameters:
        path:
          network: "mainnet"
      responses:
        "200":
          application/json: {"validatorDetails": {"validatorCount": 2213.22, "totalAmountStaked": "<value>", "estimatedAnnualStakingReward": "<value>", "stakingDistributionByVersion": [{"version": "<value>", "amountStaked": "<value>", "validatorCount": 5616.35}, {"version": "<value>", "amountStaked": "<value>", "validatorCount": 2106.35}], "stakingRatio": "<value>"}, "delegatorDetails": {"delegatorCount": 9664.7, "totalAmountStaked": "<value>"}}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listBlockchains:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"blockchains": [{"createBlockTimestamp": 7392.07, "createBlockNumber": "<value>", "blockchainId": "<id>", "vmId": "<id>", "subnetId": "<id>", "blockchainName": "<value>"}, {"createBlockTimestamp": 9745.04, "createBlockNumber": "<value>", "blockchainId": "<id>", "vmId": "<id>", "subnetId": "<id>", "blockchainName": "<value>"}, {"createBlockTimestamp": 2959.85, "createBlockNumber": "<value>", "blockchainId": "<id>", "vmId": "<id>", "subnetId": "<id>", "blockchainName": "<value>"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listSubnets:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"subnets": [{"createBlockTimestamp": 7748.04, "createBlockIndex": "<value>", "subnetId": "<id>", "ownerAddresses": ["<value>"], "threshold": 3220.06, "locktime": 5584.58, "subnetOwnershipInfo": {"locktime": 0, "threshold": 1, "addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]}, "isL1": true, "blockchains": []}]}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getSubnetById:
    "":
      parameters:
        path:
          network: "mainnet"
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"createBlockTimestamp": 6811.96, "createBlockIndex": "<value>", "subnetId": "<id>", "ownerAddresses": ["<value>", "<value>", "<value>"], "threshold": 8549.3, "locktime": 8471.28, "subnetOwnershipInfo": {"locktime": 0, "threshold": 1, "addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]}, "isL1": true, "blockchains": [{"blockchainId": "<id>"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listValidators:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
          sortOrder: "asc"
          validationStatus: "completed"
          minDelegationCapacity: "0"
          maxDelegationCapacity: "720000000000000000"
          minTimeRemaining: 0
          maxTimeRemaining: 2147483647
          minFeePercentage: 2
          maxFeePercentage: 100
          minUptimePerformance: 90
          maxUptimePerformance: 100
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"validators": [{"txHash": "<value>", "nodeId": "<id>", "subnetId": "<id>", "amountStaked": "<value>", "startTimestamp": 6021.38, "endTimestamp": 7056.56, "removeTxHash": "<value>", "removeTimestamp": 5533.94, "validationStatus": "removed"}, {"txHash": "<value>", "nodeId": "<id>", "subnetId": "<id>", "amountStaked": "<value>", "startTimestamp": 8450.08, "endTimestamp": 6119.19, "delegatorCount": 7703.63, "rewards": {"validationRewardAmount": "<value>", "delegationRewardAmount": "<value>"}, "validationStatus": "completed"}, {"txHash": "<value>", "nodeId": "<id>", "subnetId": "<id>", "amountStaked": "<value>", "startTimestamp": 2663.72, "endTimestamp": 6896.76, "delegatorCount": 6942.01, "rewards": {"validationRewardAmount": "<value>", "delegationRewardAmount": "<value>"}, "validationStatus": "completed"}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getSingleValidatorDetails:
    "":
      parameters:
        path:
          network: "mainnet"
          nodeId: "NodeID-111111111111111111116DBWJs"
        query:
          pageSize: "10"
          validationStatus: "completed"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"validators": [{"txHash": "<value>", "nodeId": "<id>", "subnetId": "<id>", "amountStaked": "<value>", "startTimestamp": 1194.5, "endTimestamp": 2887.32, "stakePercentage": 6812.51, "delegatorCount": 539.79, "uptimePerformance": 1316.21, "potentialRewards": {"validationRewardAmount": "<value>", "delegationRewardAmount": "<value>"}, "validationStatus": "active", "validatorHealth": {"reachabilityPercent": 2842.47, "benchedPChainRequestsPercent": 5462.48, "benchedXChainRequestsPercent": 4339.17, "benchedCChainRequestsPercent": 5017.28}}]}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listDelegators:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          rewardAddresses: "P-avax1679zrp3z9mf7z4an42ddq47qzj36zv6ga20vwl,P-avax1s7kd0kfndlz6mh3l0etrrcmkg5y366k8e0s6cc"
          sortOrder: "asc"
          delegationStatus: "completed"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
      responses:
        "200":
          application/json: {"delegators": [{"txHash": "<value>", "nodeId": "<id>", "rewardAddresses": ["<value>"], "amountDelegated": "<value>", "delegationFee": "<value>", "startTimestamp": 55.71, "endTimestamp": 8066.64, "estimatedGrossReward": "<value>", "estimatedNetReward": "<value>", "delegationStatus": "pending"}, {"txHash": "<value>", "nodeId": "<id>", "rewardAddresses": ["<value>", "<value>", "<value>"], "amountDelegated": "<value>", "delegationFee": "<value>", "startTimestamp": 7414.91, "endTimestamp": 6169.36, "grossReward": "<value>", "netReward": "<value>", "delegationStatus": "completed"}, {"txHash": "<value>", "nodeId": "<id>", "rewardAddresses": ["<value>", "<value>", "<value>"], "amountDelegated": "<value>", "delegationFee": "<value>", "startTimestamp": 452.13, "endTimestamp": 8219.55, "estimatedGrossReward": "<value>", "estimatedNetReward": "<value>", "delegationStatus": "active"}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listL1Validators:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          pageSize: "10"
          l1ValidationId: "BsSpTd1SDvdhaoYAuKJvRj1WnoRyu8mAuMZeuz9g7brGj6KhX"
          nodeId: "NodeID-111111111111111111116DBWJs"
          subnetId: "11111111111111111111111111111111LpoYY"
      responses:
        "200":
          application/json: {"validators": [{"validationId": "<id>", "nodeId": "<id>", "subnetId": "<id>", "weight": 4613.88, "remainingBalance": 241.42, "creationTimestamp": 8967.16, "blsCredentials": {}, "remainingBalanceOwner": {"addresses": ["<value>", "<value>", "<value>"], "threshold": 1448.52}, "deactivationOwner": {"addresses": ["<value>", "<value>"], "threshold": 7781.19}}, {"validationId": "<id>", "nodeId": "<id>", "subnetId": "<id>", "weight": 9294.85, "remainingBalance": 4685.26, "creationTimestamp": 3021.81, "blsCredentials": {}, "remainingBalanceOwner": {"addresses": ["<value>", "<value>"], "threshold": 5391.48}, "deactivationOwner": {"addresses": ["<value>", "<value>", "<value>"], "threshold": 4292.21}}, {"validationId": "<id>", "nodeId": "<id>", "subnetId": "<id>", "weight": 3443.46, "remainingBalance": 474.49, "creationTimestamp": 8071.57, "blsCredentials": {}, "remainingBalanceOwner": {"addresses": [], "threshold": 8584.2}, "deactivationOwner": {"addresses": [], "threshold": 7094.65}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getTxByHash:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
          txHash: "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP"
      responses:
        "200":
          application/json: {"txHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "blockHeight": 1005, "blockHash": "0x57a5cb7704561d1d59bd563b6421021b7563960c05ba3ae0e36fc36917c742ee", "timestamp": 1600762738, "memo": "0x546865204176616c616e6368652050726f6a656374", "amountUnlocked": [], "amountCreated": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}], "sourceChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "destinationChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "txType": "ExportTx", "evmInputs": [{"fromAddress": "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c", "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}, "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}]}, {"fromAddress": "0xD0f2898e49d941D6d479B381d3C8F0bd8d983b4c", "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}, "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}]}], "emittedUtxos": [{"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "consumingTxTimestamp": 1599696000, "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z", "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}], "locktime": 0, "outputIndex": "38", "threshold": 1, "timestamp": 1599696000, "utxoType": "mint"}, {"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "consumingTxTimestamp": 1599696000, "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z", "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}], "locktime": 0, "outputIndex": "38", "threshold": 1, "timestamp": 1599696000, "utxoType": "mint"}, {"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "consumingTxTimestamp": 1599696000, "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z", "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}], "locktime": 0, "outputIndex": "38", "threshold": 1, "timestamp": 1599696000, "utxoType": "mint"}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listLatestPrimaryNetworkTransactions:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          txTypes: ["AddValidatorTx"]
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"transactions": [], "chainInfo": {"chainName": "p-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listActivePrimaryNetworkStakingTransactions:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          txTypes: ["AddValidatorTx"]
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"transactions": [{"txHash": "3P91K6nuDFvDodcRuJTsgdf9SvYe5pMiKk38HppsoeAiEztCP", "txType": "AddDelegatorTx", "blockTimestamp": 1648672486, "blockNumber": "<value>", "blockHash": "<value>", "consumedUtxos": [{"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "amount": "738.67", "assetId": "<id>", "blockNumber": "<value>", "blockTimestamp": 7550.95, "outputIndex": 541.85, "txHash": "<value>", "utxoType": "TRANSFER"}], "emittedUtxos": [], "sourceChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "destinationChain": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "value": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}], "amountBurned": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}], "amountStaked": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}], "amountL1ValidatorBalanceBurned": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}], "subnetOwnershipInfo": {"locktime": 0, "threshold": 1, "addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"]}}], "chainInfo": {"chainName": "p-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listAssetTransactions:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
          assetId: "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof"
        query:
          txTypes: ["AddValidatorTx"]
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": [], "chainInfo": {"chainName": "x-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listPendingPrimaryNetworkRewards:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          pageSize: "10"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"pendingRewards": [{"addresses": ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"], "txHash": "<value>", "amountStaked": "<value>", "nodeId": "<id>", "startTimestamp": 9307.52, "endTimestamp": 8209.74, "rewardType": "VALIDATOR", "progress": 8927.29, "estimatedReward": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}}, {"addresses": ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"], "txHash": "<value>", "amountStaked": "<value>", "nodeId": "<id>", "startTimestamp": 6011.69, "endTimestamp": 93.25, "rewardType": "DELEGATOR", "progress": 7829.45, "estimatedReward": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listHistoricalPrimaryNetworkRewards:
    "":
      parameters:
        path:
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          pageSize: "10"
          nodeIds: "NodeID-111111111111111111116DBWJs,NodeID-222222222222222222227DBWJs"
          sortOrder: "asc"
          currency: "usd"
      responses:
        "200":
          application/json: {"historicalRewards": [{"addresses": ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"], "txHash": "<value>", "amountStaked": "<value>", "nodeId": "<id>", "startTimestamp": 84.01, "endTimestamp": 9146.12, "rewardType": "VALIDATOR", "utxoId": "<id>", "outputIndex": 4411.77, "reward": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000", "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "rewardTxHash": "<value>"}, {"addresses": ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"], "txHash": "<value>", "amountStaked": "<value>", "nodeId": "<id>", "startTimestamp": 3789.09, "endTimestamp": 7246.01, "rewardType": "VALIDATOR", "utxoId": "<id>", "outputIndex": 305.14, "reward": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000", "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "rewardTxHash": "<value>"}, {"addresses": ["avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"], "txHash": "<value>", "amountStaked": "<value>", "nodeId": "<id>", "startTimestamp": 7231.92, "endTimestamp": 3936.75, "rewardType": "VALIDATOR_FEE", "utxoId": "<id>", "outputIndex": 7813.36, "reward": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000", "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "rewardTxHash": "<value>"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getUtxosByAddresses:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"utxos": [{"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "consumingTxTimestamp": 1599696000, "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z", "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}], "locktime": 0, "outputIndex": "38", "threshold": 1, "timestamp": 1599696000, "utxoType": "mint"}, {"addresses": ["avax1qm2a25eytsrj235hxg6jc0mwk99tss64eqevsw"], "asset": {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000"}, "consumedOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "consumingTxHash": "3j9JpF1aGuQtLLbo3YkvvKkWrCZViXZjdeJQWUSEY5hcqUn2c", "createdOnChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "utxoId": "68vLva9kfKUsX88ZPM8jdbf8qHUZRoZSFH6NdpAVTspkfrXDC", "consumingTxTimestamp": 1599696000, "creationTxHash": "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z", "credentials": [{"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}, {"signature": "bWWoZUu0Z3STjuk/+2az7M4vP0oqc9NtiA7kOdqINCIE/2+5va5R1KNCWwEX5jE1xVHLvAxU2LHTN5gK8m84HwA", "publicKey": "AdMQOtubgBFFJu++0faHPIIA6KmdZ2ERErMRGzyy6juI"}], "locktime": 0, "outputIndex": "38", "threshold": 1, "timestamp": 1599696000, "utxoType": "mint"}], "chainInfo": {"chainName": "p-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getBalancesByAddresses:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          blockTimestamp: "1599696000"
          addresses: "avax1h2ccj9f5ay5acl6tyn9mwmw32p8wref8vl8ctg"
      responses:
        "200":
          application/json: {"balances": {"unlockedUnstaked": [], "unlockedStaked": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1}], "lockedPlatform": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1}], "lockedStakeable": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000", "utxoCount": 1}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1}], "lockedStaked": [], "pendingStaked": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "secp256k1", "amount": "5001000", "utxoCount": 1}], "atomicMemoryUnlocked": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1, "sharedWithChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "status": "<value>"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1, "sharedWithChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "status": "<value>"}, {"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1, "sharedWithChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "status": "<value>"}], "atomicMemoryLocked": [{"assetId": "th5aLdWLi32yS9ED6uLGoMMubqHjzMsXhKWwzP6yZTYQKYzof", "name": "Avalanche", "symbol": "AVAX", "denomination": 9, "type": "nft", "amount": "5001000", "utxoCount": 1, "sharedWithChainId": "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM", "status": "<value>"}]}, "chainInfo": {"chainName": "x-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  getBlockById:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
          blockId: "5615di9ytxujackzaXNrVuWQy5y8Yrt8chPCscMr5Ku9YxJ1S"
      responses:
        "200":
          application/json: {"blockNumber": "<value>", "blockHash": "<value>", "parentHash": "<value>", "blockTimestamp": 8593.73, "blockType": "<value>", "txCount": 105.5, "transactions": ["<value>"], "blockSizeBytes": 6446}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listPrimaryNetworkBlocksByNodeId:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
          nodeId: "NodeID-111111111111111111116DBWJs"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
      responses:
        "200":
          application/json: {"blocks": [{"blockNumber": "<value>", "blockHash": "<value>", "parentHash": "<value>", "blockTimestamp": 7410.22, "blockType": "<value>", "txCount": 521.84, "transactions": ["<value>"], "blockSizeBytes": 6272.7}], "chainInfo": {"chainName": "p-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listLatestPrimaryNetworkBlocks:
    "":
      parameters:
        path:
          blockchainId: "p-chain"
          network: "mainnet"
        query:
          startTimestamp: 1689541049
          endTimestamp: 1689800249
          pageSize: "10"
      responses:
        "200":
          application/json: {"blocks": [{"blockNumber": "<value>", "blockHash": "<value>", "parentHash": "<value>", "blockTimestamp": 4580.28, "blockType": "<value>", "txCount": 4654.07, "transactions": [], "blockSizeBytes": 2317.01}, {"blockNumber": "<value>", "blockHash": "<value>", "parentHash": "<value>", "blockTimestamp": 40.08, "blockType": "<value>", "txCount": 4566.38, "transactions": ["<value>"], "blockSizeBytes": 7158.73}], "chainInfo": {"chainName": "p-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listLatestXChainVertices:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"vertices": [{"vertexHash": "<value>", "parentHashes": [], "vertexHeight": 4284.43, "vertexIndex": 118.89, "vertexTimestamp": 5507.26, "txCount": 7824.44, "transactions": ["<value>", "<value>", "<value>"], "vertexSizeBytes": 2597.11}, {"vertexHash": "<value>", "parentHashes": ["<value>"], "vertexHeight": 3625.01, "vertexIndex": 7599.37, "vertexTimestamp": 9166.48, "txCount": 2888, "transactions": ["<value>", "<value>", "<value>"], "vertexSizeBytes": 9584.46}, {"vertexHash": "<value>", "parentHashes": ["<value>", "<value>"], "vertexHeight": 6648.59, "vertexIndex": 3900.02, "vertexTimestamp": 4544.75, "txCount": 9958.03, "transactions": ["<value>", "<value>", "<value>"], "vertexSizeBytes": 5563.88}], "chainInfo": {"chainName": "p-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getVertexByHash:
    "":
      parameters:
        path:
          vertexHash: "haP1CW56cspZY7aEuqHNrtpvhqCaMTxQaYe6j5u2Mbn4L2Gqr"
          blockchainId: "x-chain"
          network: "mainnet"
      responses:
        "200":
          application/json: {"vertexHash": "<value>", "parentHashes": ["<value>"], "vertexHeight": 2810.46, "vertexIndex": 9438.79, "vertexTimestamp": 4548.78, "txCount": 6046.98, "transactions": ["<value>", "<value>", "<value>"], "vertexSizeBytes": 6524.63}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getVertexByHeight:
    "":
      parameters:
        path:
          blockchainId: "x-chain"
          network: "mainnet"
        query:
          vertexHeight: 123
          pageSize: "10"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"vertices": [], "chainInfo": {"chainName": "p-chain", "network": "mainnet"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getTeleporterMessage:
    "":
      parameters:
        path:
          messageId: "acf1c8b06f9aec48e9fcbefbbe576ae8a7ca3b327fcae111396e7cc99956674d"
      responses:
        "200":
          application/json: {"messageId": "<id>", "teleporterContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 2600.32, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered_source_not_indexed"}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listTeleporterMessages:
    "":
      parameters:
        query:
          pageSize: "10"
          sourceBlockchainId: "2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY"
          destinationBlockchainId: "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
          to: "0x664A4Be5Af2cFc824F9C0914CbAc4703396Da2DC"
          from: "0x321eDA69247566D662178feE695C7026c604Cd94"
          network: "mainnet"
      responses:
        "200":
          application/json: {"messages": [{"messageId": "<id>", "teleporterContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [], "receiptDelivered": false, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 9951.4, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 6155.66, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}, {"messageId": "<id>", "teleporterContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": true, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}, {"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": false, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 2532.53, "gasSpent": "<value>"}, "status": "pending"}]}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listTeleporterMessagesByAddress:
    "":
      parameters:
        path:
          address: "0x8578AE7723751446B196bD5124e1bF57B40EB7Bc"
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"messages": [{"messageId": "<id>", "teleporterContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": true, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": false, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 4201.1, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 3622.93, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}]}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getApiUsageMetrics:
    "":
      parameters:
        query:
          startTimestamp: 1739507200
          endTimestamp: 1739664000
          timeInterval: "daily"
          groupBy: "requestPath"
      responses:
        "200":
          application/json: {"aggregateDuration": "<value>", "orgId": "<id>", "metrics": [{"timestamp": 9324.84, "values": [{"groupedBy": "responseCode", "totalRequests": 4512.91, "requestsPerSecond": 5815.7, "successRatePercent": 8587.3, "medianResponseTimeMsecs": 6392.37, "invalidRequests": 9771.19, "apiCreditsUsed": 5974.22, "apiCreditsWasted": 7727.97}, {"groupedBy": "requestType", "totalRequests": 1076.75, "requestsPerSecond": 9006.08, "successRatePercent": 1490.01, "medianResponseTimeMsecs": 2896.24, "invalidRequests": 4753.01, "apiCreditsUsed": 5995.43, "apiCreditsWasted": 6337.65}, {"groupedBy": "requestPath", "totalRequests": 4617.17, "requestsPerSecond": 1972.66, "successRatePercent": 4673.32, "medianResponseTimeMsecs": 4375.96, "invalidRequests": 6056.45, "apiCreditsUsed": 9305.37, "apiCreditsWasted": 9092.11}]}, {"timestamp": 5072.94, "values": [{"groupedBy": "chainId", "totalRequests": 4499.75, "requestsPerSecond": 6491.37, "successRatePercent": 1181.52, "medianResponseTimeMsecs": 7069.27, "invalidRequests": 7947.87, "apiCreditsUsed": 4749.47, "apiCreditsWasted": 40.73}]}, {"timestamp": 7393.54, "values": [{"groupedBy": "None", "totalRequests": 6222.69, "requestsPerSecond": 2702.33, "successRatePercent": 9692.08, "medianResponseTimeMsecs": 1416, "invalidRequests": 9311.75, "apiCreditsUsed": 9414.11, "apiCreditsWasted": 3708.75}]}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getApiLogs:
    "":
      parameters:
        query:
          startTimestamp: 1739507200
          endTimestamp: 1739664000
          pageSize: 10
      responses:
        "200":
          application/json: {"orgId": "<id>", "logs": []}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listWebhooks:
    "":
      parameters:
        query:
          pageSize: "10"
          status: "active"
      responses:
        "200":
          application/json: {"webhooks": [{"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://sparse-embossing.com/", "chainId": "<id>", "status": "inactive", "createdAt": 8985.39, "name": "<value>", "description": "yowza geez against near shout vary pendant reluctantly"}, {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://productive-quart.net", "chainId": "<id>", "status": "inactive", "createdAt": 2406.74, "name": "<value>", "description": "although duh rebuff gosh whoa when utterly gee"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  createWebhook:
    speakeasy-default-create-webhook:
      requestBody:
        application/json: {"url": "https://woeful-yin.biz", "chainId": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}}
      responses:
        "201":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://linear-conversation.biz/", "chainId": "<id>", "status": "active", "createdAt": 6419.27, "name": "<value>", "description": "upbeat exactly disrespect bravely dissemble"}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://measly-asset.net", "chainId": "<id>", "status": "inactive", "createdAt": 5844.48, "name": "<value>", "description": "worthwhile for absent where mature how perfection decision"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  deactivateWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://nautical-wombat.net", "chainId": "<id>", "status": "active", "createdAt": 3920.67, "name": "<value>", "description": "stump favorable whisper netsuke"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  updateWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      requestBody:
        application/json: {}
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://sniveling-follower.com", "chainId": "<id>", "status": "active", "createdAt": 1332.69, "name": "<value>", "description": "nucleotidase scoff spirited yippee presume amnesty where via hypothesise"}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  generateSharedSecret:
    speakeasy-default-generate-shared-secret:
      responses:
        "201":
          application/json: {"secret": "<value>"}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getSharedSecret:
    speakeasy-default-get-shared-secret:
      responses:
        "200":
          application/json: {"secret": "<value>"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getAddressesFromWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"addresses": [], "totalAddresses": 175.66}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  removeAddressesFromWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      requestBody:
        application/json: {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"]}
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://messy-chainstay.info/", "chainId": "<id>", "status": "inactive", "createdAt": 2521.35, "name": "<value>", "description": "sizzling scarification rarely on scoop failing minus"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  addAddressesToWebhook:
    "":
      parameters:
        path:
          id: "f33de69c-d13b-4691-908f-870d6e2e6b04"
      requestBody:
        application/json: {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"]}
      responses:
        "200":
          application/json: {"id": "<id>", "eventType": "address_activity", "metadata": {"addresses": ["0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"], "eventSignatures": ["0x61cbb2a3dee0b6064c2e681aadd61677fb4ef319f0b547508d495626f5a62f64"]}, "url": "https://alarmed-reservation.org", "chainId": "<id>", "status": "inactive", "createdAt": 9740.88, "name": "<value>", "description": "charlatan around buzzing incinerate digestive upright"}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  aggregateSignatures:
    speakeasy-default-aggregate-signatures:
      requestBody:
        application/json: {"message": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003cc0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000", "justification": "0001abcdabcfff", "signingSubnetId": "7WtoAMPhrmh5KosDUsFL9yTcvw7YSxiKHPpdfs4JsgW47oZT5", "quorumPercentage": 50}
      responses:
        "201":
          application/json: {"signedMessage": "0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000103807355b21dd497ecc9f560dfbdefc64aeec72b226c70d3793273db01d1a0c0bfd74d095d6a9e0b4db2dc652245fd28ac032c0f1f6b7f761b912ad58c93cde2e337bef4a4e8175af69f226520cd1baedd2dd7db79bb5752cb50a465531e46e8af"}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
    "":
      parameters:
        path:
          network: "mainnet"
      requestBody:
        application/json: {"message": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000003cc0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000", "justification": "0001abcdabcfff", "signingSubnetId": "7WtoAMPhrmh5KosDUsFL9yTcvw7YSxiKHPpdfs4JsgW47oZT5", "quorumPercentage": 50}
      responses:
        "201":
          application/json: {"signedMessage": "0000000000059f3be606497285d0ffbb5ac9ba24aa60346a9b1812479ed66cb329f394a4b1c7000003a200000000000100000014253b2784c75e510dd0ff1da844684a1ac0aa5fcf00000380000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001150000000000000000000000008578ae7723751446b196bd5124e1bf57b40eb7bc7fc93d85c6d62c5b2ac0b519c87010ea5294012d1e407030d6acd0021cac10d50000000000000000000000009660ed66aef60dfba5467afe865f612edbfb5c710000000000000000000000000000000000000000000000000000000000014c080000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000011a00000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011a20000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011b50000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e80000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000011e90000000000000000000000007ec2afb0a06a73666adc24983ebdbf2b6f1d708200000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000400000000000000000000000001c07f66981b45056e5024eb6d51f9f30aa0d28fd00000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000103807355b21dd497ecc9f560dfbdefc64aeec72b226c70d3793273db01d1a0c0bfd74d095d6a9e0b4db2dc652245fd28ac032c0f1f6b7f761b912ad58c93cde2e337bef4a4e8175af69f226520cd1baedd2dd7db79bb5752cb50a465531e46e8af"}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getNativeBalance:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          blockNumber: "6479329"
          currency: "usd"
      responses:
        "200":
          application/json: {"nativeTokenBalance": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "chainId": "43114", "price": {"currencyCode": "usd", "value": "42.42"}, "balance": "2000000000000000000", "balanceValue": {"currencyCode": "usd", "value": "42.42"}}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listErc20Balances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          blockNumber: "6479329"
          pageSize: "10"
          filterSpamTokens: true
          contractAddresses: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7, 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB"
          currency: "usd"
      responses:
        "200":
          application/json: {"nativeTokenBalance": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "chainId": "43114", "price": {"currencyCode": "usd", "value": "42.42"}, "balance": "2000000000000000000", "balanceValue": {"currencyCode": "usd", "value": "42.42"}}, "erc20TokenBalances": [{"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "chainId": "43114", "balance": "2000000000000000000", "balanceValue": {"currencyCode": "usd", "value": "42.42"}, "tokenReputation": "Benign"}, {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "chainId": "43114", "balance": "2000000000000000000", "balanceValue": {"currencyCode": "usd", "value": "42.42"}, "tokenReputation": "Malicious"}]}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listErc721Balances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
          contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
      responses:
        "200":
          application/json: {"nativeTokenBalance": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "chainId": "43114", "price": {"currencyCode": "usd", "value": "42.42"}, "balance": "2000000000000000000", "balanceValue": {"currencyCode": "usd", "value": "42.42"}}, "erc721TokenBalances": [{"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://sweet-tomography.net", "metadata": {"indexStatus": "INVALID_TOKEN_URI_SCHEME"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "chainId": "43114"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listErc1155Balances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          blockNumber: "6479329"
          pageSize: "10"
          contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
      responses:
        "200":
          application/json: {"nativeTokenBalance": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "chainId": "43114", "price": {"currencyCode": "usd", "value": "42.42"}, "balance": "2000000000000000000", "balanceValue": {"currencyCode": "usd", "value": "42.42"}}, "erc1155TokenBalances": [{"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://grizzled-wafer.name", "metadata": {"indexStatus": "METADATA_CONTENT_TOO_LARGE"}, "chainId": "43114", "balance": "2000000000000000000"}, {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://gruesome-vibraphone.org", "metadata": {"indexStatus": "METADATA_CONTENT_TOO_LARGE"}, "chainId": "43114", "balance": "2000000000000000000"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listCollectibleBalances:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
          contractAddress: "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7"
      responses:
        "200":
          application/json: {"collectibleBalances": [{"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://yellow-devastation.net/", "metadata": {"indexStatus": "METADATA_CONTENT_TOO_LARGE"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "chainId": "43114"}, {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://zesty-pension.info/", "metadata": {"indexStatus": "INVALID_TOKEN_URI_SCHEME"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "chainId": "43114"}]}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getLatestBlocks:
    "":
      parameters:
        path:
          chainId: "43114"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"blocks": [{"chainId": "43114", "blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txCount": 4187.96, "baseFee": "<value>", "gasUsed": "<value>", "gasLimit": "<value>", "gasCost": "<value>", "parentHash": "<value>", "feesSpent": "<value>", "cumulativeTransactions": "<value>"}, {"chainId": "43114", "blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txCount": 7834.19, "baseFee": "<value>", "gasUsed": "<value>", "gasLimit": "<value>", "gasCost": "<value>", "parentHash": "<value>", "feesSpent": "<value>", "cumulativeTransactions": "<value>"}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getBlock:
    "":
      parameters:
        path:
          chainId: "43114"
          blockId: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
      responses:
        "200":
          application/json: {"chainId": "43114", "blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txCount": 2892.38, "baseFee": "<value>", "gasUsed": "<value>", "gasLimit": "<value>", "gasCost": "<value>", "parentHash": "<value>", "feesSpent": "<value>", "cumulativeTransactions": "<value>"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getDeploymentTransaction:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
        query:
          currency: "usd"
      responses:
        "200":
          application/json: {"erc20Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 5089.42, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 7389.4, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}], "erc721Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 7983.11, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://natural-hope.org", "metadata": {"indexStatus": "UNINDEXED"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4359.82, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://creamy-begonia.org/", "metadata": {"indexStatus": "UNKNOWN"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}], "erc1155Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4915.47, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://peaceful-final.biz/", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 5575.7, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://urban-nerve.info/", "metadata": {"indexStatus": "THROTTLED_TOKEN_URI"}}}], "internalTransactions": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "STATICCALL", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}], "networkTokenDetails": {"networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}, "currentPrice": {"currencyCode": "usd", "value": "42.42"}, "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "nativeTransaction": {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CREATION", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000", "input": "<value>", "baseFeePerGas": "<value>"}}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listContractDeployments:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"contracts": [{"name": "Wrapped AVAX", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "deploymentDetails": {"txHash": "<value>", "deployerAddress": "<value>"}, "ercType": "ERC-20", "symbol": "WAVAX", "decimals": 18}, {"name": "Wrapped AVAX", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "deploymentDetails": {"txHash": "<value>", "deployerAddress": "<value>"}, "ercType": "ERC-20", "symbol": "WAVAX", "decimals": 18}, {"name": "Wrapped AVAX", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "deploymentDetails": {"txHash": "<value>", "deployerAddress": "<value>"}, "ercType": "UNKNOWN"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listTransfers:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transfers": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 7085.05, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://expensive-daddy.org/", "metadata": {"indexStatus": "INVALID_TOKEN_URI_SCHEME"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4602.18, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://fixed-devil.biz", "metadata": {"indexStatus": "UNINDEXED"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          pageSize: "10"
          startBlock: "6479329"
          endBlock: "6479330"
          sortOrder: "asc"
      responses:
        "200":
          application/json: {"transactions": [{"nativeTransaction": {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CALL", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, "erc20Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 5337.92, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}], "erc721Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 6931.14, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://unfortunate-vol.biz", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 2704.12, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://cuddly-breastplate.name/", "metadata": {"indexStatus": "INVALID_METADATA"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 864.1, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://livid-vicinity.info", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}], "erc1155Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 1542.54, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://glittering-caption.biz/", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 1674.85, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://our-academics.name/", "metadata": {"indexStatus": "INVALID_METADATA_JSON"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 8854.31, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://thin-premise.name", "metadata": {"indexStatus": "METADATA_CONTENT_TOO_LARGE"}}}], "internalTransactions": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "STATICCALL", "value": "10000000000000000000", "isReverted": true, "gasUsed": "<value>", "gasLimit": "<value>"}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "CREATE", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "CALLCODE", "value": "10000000000000000000", "isReverted": true, "gasUsed": "<value>", "gasLimit": "<value>"}]}, {"nativeTransaction": {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CALL", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, "erc20Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 5837.57, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 7929.63, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 7591.89, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}], "erc721Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 9750.55, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://alert-airman.org", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 2862.8, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://dense-jet.name/", "metadata": {"indexStatus": "MISSING_TOKEN"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}], "erc1155Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 796.33, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://tedious-inspection.biz", "metadata": {"indexStatus": "INVALID_METADATA"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 5606.59, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://rewarding-completion.biz/", "metadata": {"indexStatus": "INVALID_TOKEN_URI_SCHEME"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4323.38, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://snappy-tomatillo.name", "metadata": {"indexStatus": "INVALID_TOKEN_URI"}}}], "internalTransactions": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "CREATE2", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "CREATE2", "value": "10000000000000000000", "isReverted": true, "gasUsed": "<value>", "gasLimit": "<value>"}]}]}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listNativeTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}]}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listErc20Transactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 1455.09, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}]}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listErc721Transactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listErc1155Transactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4468.52, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://uncommon-midwife.name", "metadata": {"indexStatus": "INVALID_TOKEN_URI"}}}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 200.51, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://wise-switchboard.org", "metadata": {"indexStatus": "UNKNOWN"}}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listInternalTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
        query:
          startBlock: "6479329"
          endBlock: "6479330"
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getTransaction:
    "":
      parameters:
        path:
          chainId: "43114"
          txHash: "0x8bf584d7b14b92a32a339872a66b134a70ba3ba7c305823f348db6f860253f45"
      responses:
        "200":
          application/json: {"erc20Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 3532.47, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 9210.43, "value": "10000000000000000000", "erc20Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}}}], "erc721Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 1653.83, "erc721Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "ercType": "ERC-721", "tokenId": "<id>", "tokenUri": "https://blond-lid.net", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}, "ownerAddress": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}}], "erc1155Transfers": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 8166.91, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://peaceful-management.org/", "metadata": {"indexStatus": "UNREACHABLE_TOKEN_URI"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 7253.32, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://probable-skean.net/", "metadata": {"indexStatus": "THROTTLED_TOKEN_URI"}}}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "logIndex": 4608.11, "value": "10000000000000000000", "erc1155Token": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "ercType": "ERC-1155", "tokenId": "<id>", "tokenUri": "https://unused-annual.net", "metadata": {"indexStatus": "INVALID_METADATA"}}}], "internalTransactions": [{"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "DELEGATECALL", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "DELEGATECALL", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}, {"from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "internalTxType": "CALL", "value": "10000000000000000000", "isReverted": false, "gasUsed": "<value>", "gasLimit": "<value>"}], "networkTokenDetails": {"networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}, "currentPrice": {"currencyCode": "usd", "value": "42.42"}, "historicalPrice": {"currencyCode": "usd", "value": "42.42"}}, "nativeTransaction": {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000", "input": "<value>", "baseFeePerGas": "<value>"}}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getTransactionsForBlock:
    "":
      parameters:
        path:
          chainId: "43114"
          blockId: "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CREATION", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CALL", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listLatestTransactions:
    "":
      parameters:
        path:
          chainId: "43114"
        query:
          pageSize: "10"
      responses:
        "200":
          application/json: {"transactions": []}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getContractMetadata:
    "":
      parameters:
        path:
          chainId: "43114"
          address: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
      responses:
        "200":
          application/json: {"name": "Wrapped AVAX", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "deploymentDetails": {"txHash": "<value>", "deployerAddress": "<value>"}, "ercType": "ERC-20", "symbol": "WAVAX", "decimals": 18}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": [], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  supportedChains:
    "":
      parameters:
        query:
          network: "mainnet"
          feature: "nftIndexing"
      responses:
        "200":
          application/json: {"chains": [{"chainId": "<id>", "status": "UNAVAILABLE", "chainName": "<value>", "description": "apropos why from", "vmName": "EVM", "rpcUrl": "https://burdensome-netsuke.com", "isTestnet": true, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "OK", "chainName": "<value>", "description": "unwritten oof yippee", "vmName": "EVM", "rpcUrl": "https://mature-coal.biz/", "isTestnet": true, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "OK", "chainName": "<value>", "description": "round beautifully haze tennis", "vmName": "EVM", "rpcUrl": "https://courteous-tectonics.info", "isTestnet": true, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": [], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getChainInfo:
    "":
      parameters:
        path:
          chainId: "43114"
      responses:
        "200":
          application/json: {"chainId": "<id>", "status": "UNAVAILABLE", "chainName": "<value>", "description": "masterpiece ew failing trusting", "vmName": "EVM", "rpcUrl": "https://our-omelet.net/", "isTestnet": true, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getAddressChains:
    "":
      parameters:
        path:
          address: "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"
      responses:
        "200":
          application/json: {"indexedChains": [{"chainId": "<id>", "status": "OK", "chainName": "<value>", "description": "fashion anti gracious although gadzooks huzzah settler uselessly reflate", "vmName": "ETHEREUM", "rpcUrl": "https://equatorial-sandbar.com", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "UNAVAILABLE", "chainName": "<value>", "description": "outside airline consequently lady mostly gosh duh excluding", "vmName": "ETHEREUM", "rpcUrl": "https://whirlwind-co-producer.name", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}, {"chainId": "<id>", "status": "OK", "chainName": "<value>", "description": "yuck quicker excluding", "vmName": "EVM", "rpcUrl": "https://smart-foodstuffs.net/", "isTestnet": false, "networkToken": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg"}}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  listAllLatestTransactions:
    "":
      parameters:
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CREATION", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listAllLatestBlocks:
    "":
      parameters:
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"blocks": []}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": [], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": [], "statusCode": 503, "error": "Service Unavailable"}
  listLatestTransactionsAllChains:
    "":
      parameters:
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"transactions": [{"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "CONTRACT_CALL", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}, {"blockNumber": "339", "blockTimestamp": 1648672486, "blockHash": "0x17533aeb5193378b9ff441d61728e7a2ebaf10f61fd5310759451627dfca2e7c", "chainId": "43114", "blockIndex": 0, "txHash": "0x3e9303f81be00b4af28515dab7b914bf3dbff209ea10e7071fa24d4af0a112d4", "txStatus": "1", "txType": 1, "gasLimit": "51373", "gasUsed": "51373", "gasPrice": "470000000000", "nonce": "1", "from": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "to": {"name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F"}, "method": {"callType": "NATIVE_TRANSFER", "methodHash": "0xa9059cbb", "methodName": "transfer(address,uint256)"}, "value": "10000000000000000000"}]}
        "400":
          application/json: {"message": ["<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listLatestBlocksAllChains:
    "":
      parameters:
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"blocks": []}
        "400":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  getRpcUsageMetrics:
    "":
      parameters:
        query:
          timeInterval: "daily"
          startTimestamp: 1739507200
          endTimestamp: 1739664000
          groupBy: "rpcMethod"
      responses:
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": [], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": [], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
        "200":
          application/json: {"aggregateDuration": "<value>", "metrics": [{"timestamp": 507.42, "values": []}], "chainId": "<id>"}
  getIcmMessage:
    "":
      parameters:
        path:
          messageId: "acf1c8b06f9aec48e9fcbefbbe576ae8a7ca3b327fcae111396e7cc99956674d"
      responses:
        "200":
          application/json: {"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 7196.24, "gasSpent": "<value>"}, "status": "pending"}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listIcmMessages:
    "":
      parameters:
        query:
          pageSize: "10"
          sourceBlockchainId: "2D8RG4UpSXbPbvPCAWppNJyqTG2i2CAXSkTgmTBBvs7GKNZjsY"
          destinationBlockchainId: "yH8D7ThNJkxmtkuv2jgBa4P1Rn3Qpr4pPr7QYNfcdoS6k6HWp"
          to: "0x664A4Be5Af2cFc824F9C0914CbAc4703396Da2DC"
          from: "0x321eDA69247566D662178feE695C7026c604Cd94"
          network: "mainnet"
      responses:
        "200":
          application/json: {"messages": [{"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 743.91, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 9468.86, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}, {"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": true, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}, {"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}, {"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 2750.55, "gasSpent": "<value>"}, "status": "pending"}, {"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": true, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}, {"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}, {"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 7526.7, "gasSpent": "<value>"}, "status": "pending"}]}
        "400":
          application/json: {"message": [], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": [], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": ["<value>"], "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": ["<value>"], "statusCode": 503, "error": "Service Unavailable"}
  listIcmMessagesByAddress:
    "":
      parameters:
        path:
          address: "0x8578AE7723751446B196bD5124e1bF57B40EB7Bc"
        query:
          pageSize: "10"
          network: "mainnet"
      responses:
        "200":
          application/json: {"messages": [{"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": true, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 8846.5, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 1913.77, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}, {"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": false, "receipts": [{"receivedMessageNonce": "<value>", "relayerRewardAddress": "<value>"}], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 4392.61, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 1058.51, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}, {"messageId": "<id>", "icmContractAddress": "<value>", "sourceBlockchainId": "<id>", "destinationBlockchainId": "<id>", "sourceEvmChainId": "<id>", "destinationEvmChainId": "<id>", "messageNonce": "<value>", "from": "<value>", "to": "<value>", "messageExecuted": true, "receipts": [], "receiptDelivered": true, "rewardDetails": {"address": "0x71C7656EC7ab88b098defB751B7401B5f6d8976F", "name": "Wrapped AVAX", "symbol": "WAVAX", "decimals": 18, "logoUri": "https://images.ctfassets.net/gcj8jwzm6086/5VHupNKwnDYJvqMENeV7iJ/fdd6326b7a82c8388e4ee9d4be7062d4/avalanche-avax-logo.svg", "ercType": "ERC-20", "price": {"currencyCode": "usd", "value": "42.42"}, "value": "<value>"}, "sourceTransaction": {"txHash": "<value>", "timestamp": 6082.2, "gasSpent": "<value>"}, "destinationTransaction": {"txHash": "<value>", "timestamp": 2387.61, "gasSpent": "<value>", "rewardRedeemer": "<value>", "delivererAddress": "<value>"}, "status": "delivered"}]}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": "<value>", "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  getSubnetRpcUsageMetrics:
    "":
      parameters:
        query:
          timeInterval: "daily"
          startTimestamp: 1739507200
          endTimestamp: 1739664000
          groupBy: "rpcMethod"
      responses:
        "200":
          application/json: {"aggregateDuration": "<value>", "metrics": [{"timestamp": 7145.4, "values": [{"totalRequests": 3035.03, "apiCreditsUsed": 4011.75, "requestsPerSecond": 1437.28, "successRatePercent": 7277.6, "medianResponseTimeMsecs": 5583.29, "invalidRequests": 718.21, "apiCreditsWasted": 4673.34, "groupedBy": "continent"}]}, {"timestamp": 7589.09, "values": [{"totalRequests": 580.17, "apiCreditsUsed": 9410.32, "requestsPerSecond": 2742.83, "successRatePercent": 8474.4, "medianResponseTimeMsecs": 6064.88, "invalidRequests": 1785.91, "apiCreditsWasted": 2615.03, "groupedBy": "rpcMethod"}, {"totalRequests": 5454.8, "apiCreditsUsed": 2809.84, "requestsPerSecond": 644.85, "successRatePercent": 9272.79, "medianResponseTimeMsecs": 6905.73, "invalidRequests": 7187.35, "apiCreditsWasted": 639.88, "groupedBy": "rlBypassToken"}]}], "chainId": "<id>"}
        "400":
          application/json: {"message": "<value>", "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": "<value>", "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
  generateOrRotateSharedSecret:
    speakeasy-default-generate-or-rotate-shared-secret:
      responses:
        "201":
          application/json: {"secret": "<value>"}
        "400":
          application/json: {"message": ["<value>", "<value>"], "statusCode": 400, "error": "Bad Request"}
        "401":
          application/json: {"message": ["<value>", "<value>", "<value>"], "statusCode": 401, "error": "Unauthorized"}
        "403":
          application/json: {"message": "<value>", "statusCode": 403, "error": "Forbidden"}
        "404":
          application/json: {"message": "<value>", "statusCode": 404, "error": "Not Found"}
        "429":
          application/json: {"message": "<value>", "statusCode": 429, "error": "Too Many Requests"}
        "500":
          application/json: {"message": ["<value>"], "statusCode": 500, "error": "Internal Server Error"}
        "502":
          application/json: {"message": "<value>", "statusCode": 502, "error": "Bad Gateway"}
        "503":
          application/json: {"message": "<value>", "statusCode": 503, "error": "Service Unavailable"}
examplesVersion: 1.0.0
generatedTests: {}
