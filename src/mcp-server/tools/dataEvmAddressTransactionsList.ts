/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataEvmAddressTransactionsList } from "../../funcs/dataEvmAddressTransactionsList.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.ListTransactionsRequest$inboundSchema,
};

export const tool$dataEvmAddressTransactionsList: ToolDefinition<typeof args> =
  {
    name: "data-evm-address-transactions-list",
    description: `List transactions

Returns a list of transactions where the given wallet address had an on-chain interaction for the given chain. The ERC-20 transfers, ERC-721 transfers, ERC-1155, and internal transactions returned are only those where the input address had an interaction. Specifically, those lists only inlcude entries where the input address was the sender (\`from\` field) or the receiver (\`to\` field) for the sub-transaction. Therefore the transactions returned from this list may not be complete representations of the on-chain data. For a complete view of a transaction use the \`/chains/:chainId/transactions/:txHash\` endpoint.

Filterable by block ranges.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await dataEvmAddressTransactionsList(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value.result;

      return formatResult(value, apiCall);
    },
  };
