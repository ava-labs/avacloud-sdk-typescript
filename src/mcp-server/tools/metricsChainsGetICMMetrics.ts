/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsChainsGetICMMetrics } from "../../funcs/metricsChainsGetICMMetrics.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetICMMetricsByChainRequest$inboundSchema,
};

export const tool$metricsChainsGetICMMetrics: ToolDefinition<typeof args> = {
  name: "metrics-chains-get-ICM-metrics",
  description: `Get Interchain Message (ICM) metrics

Interchain Message (ICM) metrics are available for all Avalanche L1s on _Mainnet_ and _Fuji_ (testnet). You can request metrics by source and/or destination blockchainId. Metrics are available on an hourly, daily, weekly, monthly, and yearly basis. See the \`/chains\` endpoint for all  supported chains. You can also request metrics grouped by mainnet or testnet.

### Metrics

<ins>ICMSrcDestMsgCount</ins>: The number of ICM messages sent from the source blockchain to the destination blockchain within the requested timeInterval starting at the timestamp.

<ins>ICMSrcMsgCount</ins>: The number of ICM messages sent from the source blockchain to each destination blockchain within the requested timeInterval starting at the timestamp.

<ins>ICMSrcAggMsgCount</ins>: The number of ICM messages sent from the source blockchain to all destination blockchain within the requested timeInterval starting at the timestamp.

<ins>ICMDestMsgCount</ins>: The number of ICM messages received from each blockchain to the destination blockchain within the requested timeInterval starting at the timestamp.

<ins>ICMDestAggMsgCount</ins>: The number of ICM messages received from any blockchain to all destination blockchain within the requested timeInterval starting at the timestamp.

<ins>ICMNetworkMsgCount</ins>: The number of ICM messages sent from any blockchain on the provided network.

<ins>ICMNetworkAggMsgCount</ins>: The number of ICM messages sent on the  provided network.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await metricsChainsGetICMMetrics(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
