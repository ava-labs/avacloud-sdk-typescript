/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataNftsGet } from "../funcs/dataNftsGet.js";
import { dataNftsList } from "../funcs/dataNftsList.js";
import { dataNftsReindex } from "../funcs/dataNftsReindex.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Nfts extends ClientSDK {
  /**
   * Reindex NFT metadata
   *
   * @remarks
   * Triggers reindexing of token metadata for an NFT token. Reindexing can only be called once per hour for each NFT token.
   */
  async reindex(
    request: operations.ReindexNftRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(dataNftsReindex(
      this,
      request,
      options,
    ));
  }

  /**
   * List tokens
   *
   * @remarks
   * Lists tokens for an NFT contract.
   */
  async list(
    request: operations.ListTokensRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.ListTokensResponse, { cursor: string }>> {
    return unwrapResultIterator(dataNftsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get token details
   *
   * @remarks
   * Gets token details for a specific token of an NFT contract.
   */
  async get(
    request: operations.GetTokenDetailsRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTokenDetailsResponseBody> {
    return unwrapAsync(dataNftsGet(
      this,
      request,
      options,
    ));
  }
}
