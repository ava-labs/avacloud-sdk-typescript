/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { glacierNftsGetTokenDetails } from "../funcs/glacierNftsGetTokenDetails.js";
import { glacierNftsListTokens } from "../funcs/glacierNftsListTokens.js";
import { glacierNftsReindexNft } from "../funcs/glacierNftsReindexNft.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Nfts extends ClientSDK {
    /**
     * Reindex NFT metadata
     *
     * @remarks
     * Triggers reindexing of token metadata for an NFT token. Reindexing can only be called once per hour for each NFT token.
     */
    async reindexNft(
        request: operations.ReindexNftRequest,
        options?: RequestOptions
    ): Promise<void> {
        return unwrapAsync(glacierNftsReindexNft(this, request, options));
    }

    /**
     * List tokens
     *
     * @remarks
     * Lists tokens for an NFT contract.
     */
    async listTokens(
        request: operations.ListTokensRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListTokensResponse>> {
        return unwrapResultIterator(glacierNftsListTokens(this, request, options));
    }

    /**
     * Get token details
     *
     * @remarks
     * Gets token details for a specific token of an NFT contract.
     */
    async getTokenDetails(
        request: operations.GetTokenDetailsRequest,
        options?: RequestOptions
    ): Promise<operations.GetTokenDetailsResponseBody> {
        return unwrapAsync(glacierNftsGetTokenDetails(this, request, options));
    }
}
