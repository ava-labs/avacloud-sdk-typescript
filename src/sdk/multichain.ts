/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataMultiChainListAddressChains } from "../funcs/dataMultiChainListAddressChains.js";
import { dataMultiChainListAllLatestBlocks } from "../funcs/dataMultiChainListAllLatestBlocks.js";
import { dataMultiChainListAllLatestTransactions } from "../funcs/dataMultiChainListAllLatestTransactions.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class MultiChain extends ClientSDK {
  /**
   * Get chains for address
   *
   * @remarks
   * Gets a list of all chains where the address was either a sender or receiver in a transaction or ERC transfer. The list is currently updated every 15 minutes.
   */
  async listAddressChains(
    request: operations.ListAddressChainsRequest,
    options?: RequestOptions,
  ): Promise<components.ListAddressChainsResponse> {
    return unwrapAsync(dataMultiChainListAddressChains(
      this,
      request,
      options,
    ));
  }

  /**
   * List latest transactions for all supported EVM chains
   *
   * @remarks
   * Lists the latest transactions for all supported EVM chains. Filterable by status.
   */
  async listAllLatestTransactions(
    request: operations.ListAllChainsLatestTransactionsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.ListAllChainsLatestTransactionsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(dataMultiChainListAllLatestTransactions(
      this,
      request,
      options,
    ));
  }

  /**
   * List latest blocks for all supported EVM chains
   *
   * @remarks
   * Lists the latest blocks for all supported EVM chains. Filterable by network.
   */
  async listAllLatestBlocks(
    request: operations.ListAllChainsLatestBlocksRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.ListAllChainsLatestBlocksResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(dataMultiChainListAllLatestBlocks(
      this,
      request,
      options,
    ));
  }
}
