/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataPrimaryNetworkVerticesGetByHash } from "../funcs/dataPrimaryNetworkVerticesGetByHash.js";
import { dataPrimaryNetworkVerticesListByHeight } from "../funcs/dataPrimaryNetworkVerticesListByHeight.js";
import { dataPrimaryNetworkVerticesListLatest } from "../funcs/dataPrimaryNetworkVerticesListLatest.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Vertices extends ClientSDK {
  /**
   * List vertices
   *
   * @remarks
   * Lists latest vertices on the X-Chain.
   */
  async listLatest(
    request: operations.ListLatestXChainVerticesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.ListLatestXChainVerticesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(dataPrimaryNetworkVerticesListLatest(
      this,
      request,
      options,
    ));
  }

  /**
   * Get vertex
   *
   * @remarks
   * Gets a single vertex on the X-Chain.
   */
  async getByHash(
    request: operations.GetVertexByHashRequest,
    options?: RequestOptions,
  ): Promise<components.XChainVertex> {
    return unwrapAsync(dataPrimaryNetworkVerticesGetByHash(
      this,
      request,
      options,
    ));
  }

  /**
   * List vertices by height
   *
   * @remarks
   * Lists vertices at the given vertex height on the X-Chain.
   */
  async listByHeight(
    request: operations.GetVertexByHeightRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetVertexByHeightResponse, { cursor: string }>
  > {
    return unwrapResultIterator(dataPrimaryNetworkVerticesListByHeight(
      this,
      request,
      options,
    ));
  }
}
