/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataPrimaryNetworkVerticesGetVertexByHash } from "../funcs/dataPrimaryNetworkVerticesGetVertexByHash.js";
import { dataPrimaryNetworkVerticesGetVertexByHeight } from "../funcs/dataPrimaryNetworkVerticesGetVertexByHeight.js";
import { dataPrimaryNetworkVerticesListLatestXChainVertices } from "../funcs/dataPrimaryNetworkVerticesListLatestXChainVertices.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Vertices extends ClientSDK {
  /**
   * List vertices
   *
   * @remarks
   * Lists latest vertices on the X-Chain.
   */
  async listLatestXChainVertices(
    request: operations.ListLatestXChainVerticesRequest,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<
    PageIterator<
      operations.ListLatestXChainVerticesResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(
      dataPrimaryNetworkVerticesListLatestXChainVertices(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get vertex
   *
   * @remarks
   * Gets a single vertex on the X-Chain.
   */
  async getVertexByHash(
    request: operations.GetVertexByHashRequest,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<components.XChainVertex> {
    return unwrapAsync(dataPrimaryNetworkVerticesGetVertexByHash(
      this,
      request,
      options,
    ));
  }

  /**
   * List vertices by height
   *
   * @remarks
   * Lists vertices at the given vertex height on the X-Chain.
   */
  async getVertexByHeight(
    request: operations.GetVertexByHeightRequest,
    options?: RequestOptions & { serverURL?: string },
  ): Promise<
    PageIterator<operations.GetVertexByHeightResponse, { cursor: string }>
  > {
    return unwrapResultIterator(dataPrimaryNetworkVerticesGetVertexByHeight(
      this,
      request,
      options,
    ));
  }
}
