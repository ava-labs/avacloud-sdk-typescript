/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsL1ValidatorsGetMetricsByNodeId } from "../funcs/metricsL1ValidatorsGetMetricsByNodeId.js";
import { metricsL1ValidatorsGetMetricsBySubnetId } from "../funcs/metricsL1ValidatorsGetMetricsBySubnetId.js";
import { metricsL1ValidatorsGetMetricsByValidationId } from "../funcs/metricsL1ValidatorsGetMetricsByValidationId.js";
import { metricsL1ValidatorsListMetrics } from "../funcs/metricsL1ValidatorsListMetrics.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class L1Validators extends ClientSDK {
  /**
   * Get given metric for all validators
   *
   * @remarks
   * Get given metric's value for all validators.
   */
  async listMetrics(
    request: operations.GetTotalL1ValidatorMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsApiResponse> {
    return unwrapAsync(metricsL1ValidatorsListMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get metric values with given validationId and timestamp range
   *
   * @remarks
   * Get given metric values for a given validationId with or without a timestamp range.
   */
  async getMetricsByValidationId(
    request: operations.GetMetricsByValidationIdRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsApiResponse> {
    return unwrapAsync(metricsL1ValidatorsGetMetricsByValidationId(
      this,
      request,
      options,
    ));
  }

  /**
   * Get metric values with given nodeId and timestamp range
   *
   * @remarks
   * Get given metric values for a given nodeId with or without a timestamp range.
   */
  async getMetricsByNodeId(
    request: operations.GetMetricsByNodeIdRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsApiResponse> {
    return unwrapAsync(metricsL1ValidatorsGetMetricsByNodeId(
      this,
      request,
      options,
    ));
  }

  /**
   * Get metric values with given subnetId and timestamp range
   *
   * @remarks
   * Get given metric values for a given subnetId with or without a timestamp range.
   */
  async getMetricsBySubnetId(
    request: operations.GetMetricsBySubnetIdRequest,
    options?: RequestOptions,
  ): Promise<components.MetricsApiResponse> {
    return unwrapAsync(metricsL1ValidatorsGetMetricsBySubnetId(
      this,
      request,
      options,
    ));
  }
}
