/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { primaryNetworkGetAssetDetails } from "../funcs/primaryNetworkGetAssetDetails.js";
import { primaryNetworkGetChainIdsForAddresses } from "../funcs/primaryNetworkGetChainIdsForAddresses.js";
import { primaryNetworkGetNetworkDetails } from "../funcs/primaryNetworkGetNetworkDetails.js";
import { primaryNetworkGetSingleValidatorDetails } from "../funcs/primaryNetworkGetSingleValidatorDetails.js";
import { primaryNetworkListBlockchains } from "../funcs/primaryNetworkListBlockchains.js";
import { primaryNetworkListDelegators } from "../funcs/primaryNetworkListDelegators.js";
import { primaryNetworkListSubnets } from "../funcs/primaryNetworkListSubnets.js";
import { primaryNetworkListValidators } from "../funcs/primaryNetworkListValidators.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class PrimaryNetwork extends ClientSDK {
    /**
     * Get asset details
     *
     * @remarks
     * Gets asset details corresponding to the given asset id on the X-Chain.
     */
    async getAssetDetails(
        request: operations.GetAssetDetailsRequest,
        options?: RequestOptions
    ): Promise<components.XChainAssetDetails> {
        return unwrapAsync(primaryNetworkGetAssetDetails(this, request, options));
    }

    /**
     * Get chain interactions for addresses
     *
     * @remarks
     * Returns Primary Network chains that each address has touched in the form of an address mapped array. If an address has had any on-chain interaction for a chain, that chain's chain id will be returned.
     */
    async getChainIdsForAddresses(
        request: operations.GetChainIdsForAddressesRequest,
        options?: RequestOptions
    ): Promise<components.ChainAddressChainIdMapListResponse> {
        return unwrapAsync(primaryNetworkGetChainIdsForAddresses(this, request, options));
    }

    /**
     * Get network details
     *
     * @remarks
     * Gets network details such as validator and delegator stats.
     */
    async getNetworkDetails(
        request: operations.GetNetworkDetailsRequest,
        options?: RequestOptions
    ): Promise<components.GetNetworkDetailsResponse> {
        return unwrapAsync(primaryNetworkGetNetworkDetails(this, request, options));
    }

    /**
     * List blockchains
     *
     * @remarks
     * Lists all blockchains registered on the network.
     */
    async listBlockchains(
        request: operations.ListBlockchainsRequest,
        options?: RequestOptions
    ): Promise<components.ListBlockchainsResponse> {
        return unwrapAsync(primaryNetworkListBlockchains(this, request, options));
    }

    /**
     * List subnets
     *
     * @remarks
     * Lists all subnets registered on the network.
     */
    async listSubnets(
        request: operations.ListSubnetsRequest,
        options?: RequestOptions
    ): Promise<components.ListSubnetsResponse> {
        return unwrapAsync(primaryNetworkListSubnets(this, request, options));
    }

    /**
     * List validators
     *
     * @remarks
     * Lists details for validators. By default, returns details for all validators. Filterable by validator node ids and minimum delegation capacity.
     */
    async listValidators(
        request: operations.ListValidatorsRequest,
        options?: RequestOptions
    ): Promise<components.ListValidatorDetailsResponse> {
        return unwrapAsync(primaryNetworkListValidators(this, request, options));
    }

    /**
     * Get single validator details
     *
     * @remarks
     * List validator details for a single validator.  Filterable by validation status.
     */
    async getSingleValidatorDetails(
        request: operations.GetSingleValidatorDetailsRequest,
        options?: RequestOptions
    ): Promise<components.ListValidatorDetailsResponse> {
        return unwrapAsync(primaryNetworkGetSingleValidatorDetails(this, request, options));
    }

    /**
     * List delegators
     *
     * @remarks
     * Lists details for delegators.
     */
    async listDelegators(
        request: operations.ListDelegatorsRequest,
        options?: RequestOptions
    ): Promise<components.ListDelegatorDetailsResponse> {
        return unwrapAsync(primaryNetworkListDelegators(this, request, options));
    }
}
