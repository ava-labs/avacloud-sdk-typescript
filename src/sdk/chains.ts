/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsChainsGet } from "../funcs/metricsChainsGet.js";
import { metricsChainsGetMetrics } from "../funcs/metricsChainsGetMetrics.js";
import { metricsChainsGetRollingWindowMetrics } from "../funcs/metricsChainsGetRollingWindowMetrics.js";
import { metricsChainsGetTeleporterMetrics } from "../funcs/metricsChainsGetTeleporterMetrics.js";
import { metricsChainsList } from "../funcs/metricsChainsList.js";
import { metricsChainsListBTCbBridgersAboveThreshold } from "../funcs/metricsChainsListBTCbBridgersAboveThreshold.js";
import { metricsChainsListNftHolders } from "../funcs/metricsChainsListNftHolders.js";
import { metricsChainsListTokenHoldersAboveThreshold } from "../funcs/metricsChainsListTokenHoldersAboveThreshold.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Chains extends ClientSDK {
  /**
   * Get a list of supported blockchains
   *
   * @remarks
   * Get a list of Metrics API supported blockchains.
   */
  async list(
    request: operations.ListChainsRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.ListChainsResponse, { cursor: string }>> {
    return unwrapResultIterator(metricsChainsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get chain information for supported blockchain
   *
   * @remarks
   * Get chain information for Metrics API supported blockchain.
   */
  async get(
    request: operations.GetChainRequest,
    options?: RequestOptions,
  ): Promise<components.Chain> {
    return unwrapAsync(metricsChainsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get metrics for EVM chains
   *
   * @remarks
   * Gets metrics for an EVM chain over a specified time interval aggregated at the specified time-interval granularity.
   */
  async getMetrics(
    request: operations.GetEvmChainMetricsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetEvmChainMetricsResponse, { cursor: string }>
  > {
    return unwrapResultIterator(metricsChainsGetMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get teleporter metrics for EVM chains
   *
   * @remarks
   * Gets teleporter metrics for an EVM chain.
   */
  async getTeleporterMetrics(
    request: operations.GetTeleporterMetricsByChainRequest,
    options?: RequestOptions,
  ): Promise<components.TeleporterChainMetricsApiResponse> {
    return unwrapAsync(metricsChainsGetTeleporterMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get rolling window metrics for EVM chains
   *
   * @remarks
   * Gets the rolling window metrics for an EVM chain for the last hour, day, month, year, and all time.
   */
  async getRollingWindowMetrics(
    request: operations.GetEvmChainRollingWindowMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.RollingWindowMetricsApiResponse> {
    return unwrapAsync(metricsChainsGetRollingWindowMetrics(
      this,
      request,
      options,
    ));
  }

  /**
   * Get NFT holders by contract address
   *
   * @remarks
   * Get list of NFT holders and number of NFTs held by contract address.
   */
  async listNftHolders(
    request: operations.GetNftHoldersByContractAddressRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetNftHoldersByContractAddressResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(metricsChainsListNftHolders(
      this,
      request,
      options,
    ));
  }

  /**
   * Get addresses by balance over time
   *
   * @remarks
   * Get list of addresses and their latest balances that have held more than a certain threshold of a given token during the specified time frame.
   */
  async listTokenHoldersAboveThreshold(
    request: operations.GetAddressesByBalanceOverTimeRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetAddressesByBalanceOverTimeResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(metricsChainsListTokenHoldersAboveThreshold(
      this,
      request,
      options,
    ));
  }

  /**
   * Get addresses by BTCb bridged balance
   *
   * @remarks
   * Get list of addresses and their net bridged amounts that have bridged more than a certain threshold.
   */
  async listBTCbBridgersAboveThreshold(
    request: operations.GetAddressesByBtcbBridgedRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetAddressesByBtcbBridgedResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(metricsChainsListBTCbBridgersAboveThreshold(
      this,
      request,
      options,
    ));
  }
}
