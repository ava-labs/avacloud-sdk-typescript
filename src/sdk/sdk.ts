/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { mediaControllerUploadImage } from "../funcs/mediaControllerUploadImage.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { unwrapAsync } from "../types/fp.js";
import { EVMBalances } from "./evmbalances.js";
import { EVMBlocks } from "./evmblocks.js";
import { EVMChains } from "./evmchains.js";
import { EVMContracts } from "./evmcontracts.js";
import { EVMTransactions } from "./evmtransactions.js";
import { HealthCheck } from "./healthcheck.js";
import { NFTs } from "./nfts.js";
import { Operations } from "./operations.js";
import { PrimaryNetwork } from "./primarynetwork.js";
import { PrimaryNetworkBalances } from "./primarynetworkbalances.js";
import { PrimaryNetworkBlocks } from "./primarynetworkblocks.js";
import { PrimaryNetworkRewards } from "./primarynetworkrewards.js";
import { PrimaryNetworkTransactions } from "./primarynetworktransactions.js";
import { PrimaryNetworkUTXOs } from "./primarynetworkutxos.js";
import { PrimaryNetworkVertices } from "./primarynetworkvertices.js";
import { Rpc } from "./rpc.js";
import { Teleporter } from "./teleporter.js";
import { Webhooks } from "./webhooks.js";

export class GlacierSDK extends ClientSDK {
    private _healthCheck?: HealthCheck;
    get healthCheck(): HealthCheck {
        return (this._healthCheck ??= new HealthCheck(this.options$));
    }

    private _nfTs?: NFTs;
    get nfTs(): NFTs {
        return (this._nfTs ??= new NFTs(this.options$));
    }

    private _operations?: Operations;
    get operations(): Operations {
        return (this._operations ??= new Operations(this.options$));
    }

    private _primaryNetworkTransactions?: PrimaryNetworkTransactions;
    get primaryNetworkTransactions(): PrimaryNetworkTransactions {
        return (this._primaryNetworkTransactions ??= new PrimaryNetworkTransactions(this.options$));
    }

    private _primaryNetworkRewards?: PrimaryNetworkRewards;
    get primaryNetworkRewards(): PrimaryNetworkRewards {
        return (this._primaryNetworkRewards ??= new PrimaryNetworkRewards(this.options$));
    }

    private _primaryNetworkUTXOs?: PrimaryNetworkUTXOs;
    get primaryNetworkUTXOs(): PrimaryNetworkUTXOs {
        return (this._primaryNetworkUTXOs ??= new PrimaryNetworkUTXOs(this.options$));
    }

    private _primaryNetworkBalances?: PrimaryNetworkBalances;
    get primaryNetworkBalances(): PrimaryNetworkBalances {
        return (this._primaryNetworkBalances ??= new PrimaryNetworkBalances(this.options$));
    }

    private _primaryNetworkBlocks?: PrimaryNetworkBlocks;
    get primaryNetworkBlocks(): PrimaryNetworkBlocks {
        return (this._primaryNetworkBlocks ??= new PrimaryNetworkBlocks(this.options$));
    }

    private _primaryNetworkVertices?: PrimaryNetworkVertices;
    get primaryNetworkVertices(): PrimaryNetworkVertices {
        return (this._primaryNetworkVertices ??= new PrimaryNetworkVertices(this.options$));
    }

    private _primaryNetwork?: PrimaryNetwork;
    get primaryNetwork(): PrimaryNetwork {
        return (this._primaryNetwork ??= new PrimaryNetwork(this.options$));
    }

    private _webhooks?: Webhooks;
    get webhooks(): Webhooks {
        return (this._webhooks ??= new Webhooks(this.options$));
    }

    private _teleporter?: Teleporter;
    get teleporter(): Teleporter {
        return (this._teleporter ??= new Teleporter(this.options$));
    }

    private _evmBalances?: EVMBalances;
    get evmBalances(): EVMBalances {
        return (this._evmBalances ??= new EVMBalances(this.options$));
    }

    private _evmBlocks?: EVMBlocks;
    get evmBlocks(): EVMBlocks {
        return (this._evmBlocks ??= new EVMBlocks(this.options$));
    }

    private _evmTransactions?: EVMTransactions;
    get evmTransactions(): EVMTransactions {
        return (this._evmTransactions ??= new EVMTransactions(this.options$));
    }

    private _evmContracts?: EVMContracts;
    get evmContracts(): EVMContracts {
        return (this._evmContracts ??= new EVMContracts(this.options$));
    }

    private _evmChains?: EVMChains;
    get evmChains(): EVMChains {
        return (this._evmChains ??= new EVMChains(this.options$));
    }

    private _rpc?: Rpc;
    get rpc(): Rpc {
        return (this._rpc ??= new Rpc(this.options$));
    }

    async mediaControllerUploadImage(options?: RequestOptions): Promise<void> {
        return unwrapAsync(mediaControllerUploadImage(this, options));
    }
}
