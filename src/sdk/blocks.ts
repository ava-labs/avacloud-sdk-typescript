/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataEvmBlocksGet } from "../funcs/dataEvmBlocksGet.js";
import { dataEvmBlocksListLatest } from "../funcs/dataEvmBlocksListLatest.js";
import { dataEvmBlocksListLatestAllChains } from "../funcs/dataEvmBlocksListLatestAllChains.js";
import { dataEvmBlocksListTransactions } from "../funcs/dataEvmBlocksListTransactions.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Blocks extends ClientSDK {
  /**
   * List latest blocks across all supported EVM chains
   *
   * @remarks
   * Lists the most recent blocks from all supported  EVM-compatible chains. The results can be filtered by network.
   */
  async listLatestAllChains(
    request: operations.ListLatestBlocksAllChainsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.ListLatestBlocksAllChainsResponse,
      { cursor: string }
    >
  > {
    return unwrapResultIterator(dataEvmBlocksListLatestAllChains(
      this,
      request,
      options,
    ));
  }

  /**
   * List latest blocks
   *
   * @remarks
   * Lists the latest indexed blocks on the EVM-compatible chain sorted in descending order by block timestamp.
   */
  async listLatest(
    request: operations.GetLatestBlocksRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetLatestBlocksResponse, { cursor: string }>
  > {
    return unwrapResultIterator(dataEvmBlocksListLatest(
      this,
      request,
      options,
    ));
  }

  /**
   * Get block
   *
   * @remarks
   * Gets the details of an individual block on the EVM-compatible chain.
   */
  async get(
    request: operations.GetBlockRequest,
    options?: RequestOptions,
  ): Promise<components.GetEvmBlockResponse> {
    return unwrapAsync(dataEvmBlocksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List transactions for a block
   *
   * @remarks
   * Lists the transactions that occured in a given block.
   */
  async listTransactions(
    request: operations.GetTransactionsForBlockRequest,
    options?: RequestOptions,
  ): Promise<components.ListNativeTransactionsResponse> {
    return unwrapAsync(dataEvmBlocksListTransactions(
      this,
      request,
      options,
    ));
  }
}
