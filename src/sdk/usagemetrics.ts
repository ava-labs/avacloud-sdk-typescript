/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataUsageMetricsGetLogs } from "../funcs/dataUsageMetricsGetLogs.js";
import { dataUsageMetricsGetRpcUsageMetrics } from "../funcs/dataUsageMetricsGetRpcUsageMetrics.js";
import { dataUsageMetricsGetSubnetRpcUsage } from "../funcs/dataUsageMetricsGetSubnetRpcUsage.js";
import { dataUsageMetricsGetUsage } from "../funcs/dataUsageMetricsGetUsage.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class UsageMetrics extends ClientSDK {
  /**
   * Get usage metrics for the Data API
   *
   * @remarks
   * Gets metrics for Data API usage over a specified time interval aggregated at the specified time-duration granularity.
   */
  async getUsage(
    request: operations.GetApiUsageMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.UsageMetricsResponseDTO> {
    return unwrapAsync(dataUsageMetricsGetUsage(
      this,
      request,
      options,
    ));
  }

  /**
   * Get logs for requests made by client
   *
   * @remarks
   * Gets logs for requests made by client over a specified time interval for a specific organization.
   */
  async getLogs(
    request: operations.GetApiLogsRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.GetApiLogsResponse, { cursor: string }>> {
    return unwrapResultIterator(dataUsageMetricsGetLogs(
      this,
      request,
      options,
    ));
  }

  /**
   * Get usage metrics for the Subnet RPC
   *
   * @remarks
   * Gets metrics for public Subnet RPC usage over a specified time interval aggregated at the specified time-duration granularity.
   */
  async getSubnetRpcUsage(
    request: operations.GetSubnetRpcUsageMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.SubnetRpcUsageMetricsResponseDTO> {
    return unwrapAsync(dataUsageMetricsGetSubnetRpcUsage(
      this,
      request,
      options,
    ));
  }

  /**
   * **[Deprecated]**  Gets metrics for public Subnet RPC usage over a specified time interval aggregated at the specified time-duration granularity.
   *
   * ⚠️ **This operation will be removed in a future release.  Please use /v1/subnetRpcUsageMetrics endpoint instead**.
   *
   * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  async getRpcUsageMetrics(
    request: operations.GetRpcUsageMetricsRequest,
    options?: RequestOptions,
  ): Promise<components.SubnetRpcUsageMetricsResponseDTO> {
    return unwrapAsync(dataUsageMetricsGetRpcUsageMetrics(
      this,
      request,
      options,
    ));
  }
}
