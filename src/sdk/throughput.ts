/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsChainThroughputGetActiveAddresses } from "../funcs/metricsChainThroughputGetActiveAddresses.js";
import { metricsChainThroughputGetActiveSenders } from "../funcs/metricsChainThroughputGetActiveSenders.js";
import { metricsChainThroughputGetAvgGasPrice } from "../funcs/metricsChainThroughputGetAvgGasPrice.js";
import { metricsChainThroughputGetAvgGps } from "../funcs/metricsChainThroughputGetAvgGps.js";
import { metricsChainThroughputGetAvgTps } from "../funcs/metricsChainThroughputGetAvgTps.js";
import { metricsChainThroughputGetGasUsed } from "../funcs/metricsChainThroughputGetGasUsed.js";
import { metricsChainThroughputGetMaxGasPrice } from "../funcs/metricsChainThroughputGetMaxGasPrice.js";
import { metricsChainThroughputGetMaxGps } from "../funcs/metricsChainThroughputGetMaxGps.js";
import { metricsChainThroughputGetMaxTps } from "../funcs/metricsChainThroughputGetMaxTps.js";
import { metricsChainThroughputGetRollingWindowAvgGasPrice } from "../funcs/metricsChainThroughputGetRollingWindowAvgGasPrice.js";
import { metricsChainThroughputGetRollingWindowAvgGps } from "../funcs/metricsChainThroughputGetRollingWindowAvgGps.js";
import { metricsChainThroughputGetRollingWindowAvgTps } from "../funcs/metricsChainThroughputGetRollingWindowAvgTps.js";
import { metricsChainThroughputGetRollingWindowGasUsed } from "../funcs/metricsChainThroughputGetRollingWindowGasUsed.js";
import { metricsChainThroughputGetRollingWindowMaxGasPrice } from "../funcs/metricsChainThroughputGetRollingWindowMaxGasPrice.js";
import { metricsChainThroughputGetRollingWindowMaxGps } from "../funcs/metricsChainThroughputGetRollingWindowMaxGps.js";
import { metricsChainThroughputGetRollingWindowMaxTps } from "../funcs/metricsChainThroughputGetRollingWindowMaxTps.js";
import { metricsChainThroughputGetRollingWindowTxCount } from "../funcs/metricsChainThroughputGetRollingWindowTxCount.js";
import { metricsChainThroughputGetTxCount } from "../funcs/metricsChainThroughputGetTxCount.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Throughput extends ClientSDK {
    /**
     * Active senders
     *
     * @remarks
     * Get the number of addresses that sent a transaction.
     */
    async getActiveSenders(
        request: operations.GetActiveSendersRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.LegacyEvmMetricsResponse> {
        return unwrapAsync(metricsChainThroughputGetActiveSenders(this, request, options));
    }

    /**
     * Active addresses
     *
     * @remarks
     * Get the number of active addresses.
     */
    async getActiveAddresses(
        request: operations.GetActiveAddressesRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.LegacyEvmMetricsResponse> {
        return unwrapAsync(metricsChainThroughputGetActiveAddresses(this, request, options));
    }

    /**
     * Gas used
     *
     * @remarks
     * Get the total gas consumed.
     */
    async getGasUsed(
        request: operations.GetGasUsedRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.LegacyEvmMetricsResponse> {
        return unwrapAsync(metricsChainThroughputGetGasUsed(this, request, options));
    }

    /**
     * Transaction count
     *
     * @remarks
     * Get the number of transactions.
     */
    async getTxCount(
        request: operations.GetTxCountRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.LegacyEvmMetricsResponse> {
        return unwrapAsync(metricsChainThroughputGetTxCount(this, request, options));
    }

    /**
     * Average gas consumed per second
     *
     * @remarks
     * Get the average gas consumed per second.
     */
    async getAvgGps(
        request: operations.GetAvgGpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.LegacyEvmMetricsResponse> {
        return unwrapAsync(metricsChainThroughputGetAvgGps(this, request, options));
    }

    /**
     * Maxumum gas consumed per second
     *
     * @remarks
     * Get the maximum gas consumed per second.
     */
    async getMaxGps(
        request: operations.GetMaxGpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.LegacyEvmMetricsResponse> {
        return unwrapAsync(metricsChainThroughputGetMaxGps(this, request, options));
    }

    /**
     * Average transactions per second
     *
     * @remarks
     * Get the average number of transactions per second.
     */
    async getAvgTps(
        request: operations.GetAvgTpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.LegacyEvmMetricsResponse> {
        return unwrapAsync(metricsChainThroughputGetAvgTps(this, request, options));
    }

    /**
     * Maximum transactions per second
     *
     * @remarks
     * Get the maximum number of transactions per second.
     */
    async getMaxTps(
        request: operations.GetMaxTpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.LegacyEvmMetricsResponse> {
        return unwrapAsync(metricsChainThroughputGetMaxTps(this, request, options));
    }

    /**
     * Average gas price
     *
     * @remarks
     * Get the average gas price.
     */
    async getAvgGasPrice(
        request: operations.GetAvgGasPriceRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.LegacyEvmMetricsResponse> {
        return unwrapAsync(metricsChainThroughputGetAvgGasPrice(this, request, options));
    }

    /**
     * Maximum gas price
     *
     * @remarks
     * Get the maximum gas price.
     */
    async getMaxGasPrice(
        request: operations.GetMaxGasPriceRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.LegacyEvmMetricsResponse> {
        return unwrapAsync(metricsChainThroughputGetMaxGasPrice(this, request, options));
    }

    /**
     * Rolling window of gas used
     *
     * @remarks
     * Get rolling window of gas used.
     */
    async getRollingWindowGasUsed(
        request: operations.GetRollingWindowGasUsedRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowGasUsed(this, request, options));
    }

    /**
     * Rolling window of tx count
     *
     * @remarks
     * Get rolling window of tx count.
     */
    async getRollingWindowTxCount(
        request: operations.GetRollingWindowTxCountRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowTxCount(this, request, options));
    }

    /**
     * Rolling window of average gps consumed
     *
     * @remarks
     * Get rolling window of average gas per second consumed.
     */
    async getRollingWindowAvgGps(
        request: operations.GetRollingWindowAvgGpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowAvgGps(this, request, options));
    }

    /**
     * Rolling window of max gps
     *
     * @remarks
     * Get rolling window of max gas per second.
     */
    async getRollingWindowMaxGps(
        request: operations.GetRollingWindowMaxGpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowMaxGps(this, request, options));
    }

    /**
     * Rolling window of average tps
     *
     * @remarks
     * Get rolling window of average transactions per second.
     */
    async getRollingWindowAvgTps(
        request: operations.GetRollingWindowAvgTpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowAvgTps(this, request, options));
    }

    /**
     * Rolling window of max tps
     *
     * @remarks
     * Get rolling window of max transactions per second.
     */
    async getRollingWindowMaxTps(
        request: operations.GetRollingWindowMaxTpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowMaxTps(this, request, options));
    }

    /**
     * Rolling window of average gas price
     *
     * @remarks
     * Get rolling window of average gas price.
     */
    async getRollingWindowAvgGasPrice(
        request: operations.GetRollingWindowAvgGasPriceRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(
            metricsChainThroughputGetRollingWindowAvgGasPrice(this, request, options)
        );
    }

    /**
     * Rolling window of max gas price
     *
     * @remarks
     * Get rolling window of max gas price.
     */
    async getRollingWindowMaxGasPrice(
        request: operations.GetRollingWindowMaxGasPriceRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(
            metricsChainThroughputGetRollingWindowMaxGasPrice(this, request, options)
        );
    }
}
