/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsChainThroughputGetRollingWindowAvgGasPrice } from "../funcs/metricsChainThroughputGetRollingWindowAvgGasPrice.js";
import { metricsChainThroughputGetRollingWindowAvgGps } from "../funcs/metricsChainThroughputGetRollingWindowAvgGps.js";
import { metricsChainThroughputGetRollingWindowAvgTps } from "../funcs/metricsChainThroughputGetRollingWindowAvgTps.js";
import { metricsChainThroughputGetRollingWindowGasUsed } from "../funcs/metricsChainThroughputGetRollingWindowGasUsed.js";
import { metricsChainThroughputGetRollingWindowMaxGasPrice } from "../funcs/metricsChainThroughputGetRollingWindowMaxGasPrice.js";
import { metricsChainThroughputGetRollingWindowMaxGps } from "../funcs/metricsChainThroughputGetRollingWindowMaxGps.js";
import { metricsChainThroughputGetRollingWindowMaxTps } from "../funcs/metricsChainThroughputGetRollingWindowMaxTps.js";
import { metricsChainThroughputGetRollingWindowTxCount } from "../funcs/metricsChainThroughputGetRollingWindowTxCount.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Throughput extends ClientSDK {
    /**
     * Rolling window of gas used
     *
     * @remarks
     * Get rolling window of gas used.
     */
    async getRollingWindowGasUsed(
        request: operations.GetRollingWindowGasUsedRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowGasUsed(this, request, options));
    }

    /**
     * Rolling window of tx count
     *
     * @remarks
     * Get rolling window of tx count.
     */
    async getRollingWindowTxCount(
        request: operations.GetRollingWindowTxCountRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowTxCount(this, request, options));
    }

    /**
     * Rolling window of average gps consumed
     *
     * @remarks
     * Get rolling window of average gas per second consumed.
     */
    async getRollingWindowAvgGps(
        request: operations.GetRollingWindowAvgGpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowAvgGps(this, request, options));
    }

    /**
     * Rolling window of max gps
     *
     * @remarks
     * Get rolling window of max gas per second.
     */
    async getRollingWindowMaxGps(
        request: operations.GetRollingWindowMaxGpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowMaxGps(this, request, options));
    }

    /**
     * Rolling window of average tps
     *
     * @remarks
     * Get rolling window of average transactions per second.
     */
    async getRollingWindowAvgTps(
        request: operations.GetRollingWindowAvgTpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowAvgTps(this, request, options));
    }

    /**
     * Rolling window of max tps
     *
     * @remarks
     * Get rolling window of max transactions per second.
     */
    async getRollingWindowMaxTps(
        request: operations.GetRollingWindowMaxTpsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(metricsChainThroughputGetRollingWindowMaxTps(this, request, options));
    }

    /**
     * Rolling window of average gas price
     *
     * @remarks
     * Get rolling window of average gas price.
     */
    async getRollingWindowAvgGasPrice(
        request: operations.GetRollingWindowAvgGasPriceRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(
            metricsChainThroughputGetRollingWindowAvgGasPrice(this, request, options)
        );
    }

    /**
     * Rolling window of max gas price
     *
     * @remarks
     * Get rolling window of max gas price.
     */
    async getRollingWindowMaxGasPrice(
        request: operations.GetRollingWindowMaxGasPriceRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.RollingWindowResponse> {
        return unwrapAsync(
            metricsChainThroughputGetRollingWindowMaxGasPrice(this, request, options)
        );
    }
}
