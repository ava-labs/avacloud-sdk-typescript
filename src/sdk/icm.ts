/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { dataIcmGet } from "../funcs/dataIcmGet.js";
import { dataIcmList } from "../funcs/dataIcmList.js";
import { dataIcmListByAddress } from "../funcs/dataIcmListByAddress.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Icm extends ClientSDK {
  /**
   * Get an ICM message
   *
   * @remarks
   * Gets an ICM message by teleporter message ID.
   */
  async get(
    request: operations.GetIcmMessageRequest,
    options?: RequestOptions,
  ): Promise<operations.GetIcmMessageResponseBody> {
    return unwrapAsync(dataIcmGet(
      this,
      request,
      options,
    ));
  }

  /**
   * List ICM messages
   *
   * @remarks
   * Lists ICM messages. Ordered by timestamp in descending order.
   */
  async list(
    request: operations.ListIcmMessagesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.ListIcmMessagesResponse, { cursor: string }>
  > {
    return unwrapResultIterator(dataIcmList(
      this,
      request,
      options,
    ));
  }

  /**
   * List ICM messages by address
   *
   * @remarks
   * Lists ICM messages by address. Ordered by timestamp in descending order.
   */
  async listByAddress(
    request: operations.ListIcmMessagesByAddressRequest,
    options?: RequestOptions,
  ): Promise<components.ListIcmMessagesResponse> {
    return unwrapAsync(dataIcmListByAddress(
      this,
      request,
      options,
    ));
  }
}
