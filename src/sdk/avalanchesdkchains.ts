/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { metricsEvmChainsGetChain } from "../funcs/metricsEvmChainsGetChain.js";
import { metricsEvmChainsGetChainInformationByNetwork } from "../funcs/metricsEvmChainsGetChainInformationByNetwork.js";
import { metricsEvmChainsGetChainInformationByNetworkAndSubnetId } from "../funcs/metricsEvmChainsGetChainInformationByNetworkAndSubnetId.js";
import { metricsEvmChainsGetMappings } from "../funcs/metricsEvmChainsGetMappings.js";
import { metricsEvmChainsGetMappingsBySubnetId } from "../funcs/metricsEvmChainsGetMappingsBySubnetId.js";
import { metricsEvmChainsGetSubnetInformationByNetwork } from "../funcs/metricsEvmChainsGetSubnetInformationByNetwork.js";
import { metricsEvmChainsGetSubnetInformationByNetworkAndSubnetId } from "../funcs/metricsEvmChainsGetSubnetInformationByNetworkAndSubnetId.js";
import { metricsEvmChainsListChains } from "../funcs/metricsEvmChainsListChains.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class AvalancheSDKChains extends ClientSDK {
    /**
     * Get a list of supported blockchains
     *
     * @remarks
     * Get a list of Popsicle API supported blockchains.
     */
    async listChains(
        request: operations.ListChainsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.ListChainsResponse>> {
        return unwrapResultIterator(metricsEvmChainsListChains(this, request, options));
    }

    /**
     * Get chain information for supported blockchain
     *
     * @remarks
     * Get chain information for Popsicle API supported blockchain.
     */
    async getChain(
        request: operations.GetChainRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.Chain> {
        return unwrapAsync(metricsEvmChainsGetChain(this, request, options));
    }

    /**
     * Subnet ID to EVM Chain ID mappings
     *
     * @remarks
     * Get a list of Popsicle API supported mappings.
     */
    async getMappings(
        request: operations.GetMappingsRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.GetMappingsResponse>> {
        return unwrapResultIterator(metricsEvmChainsGetMappings(this, request, options));
    }

    /**
     * Subnet ID to EVM Chain ID mappings
     *
     * @remarks
     * Get a Popsicle API supported mapping by subnet ID.
     */
    async getMappingsBySubnetId(
        request: operations.GetMappingsBySubnetIdRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.GetMappingsBySubnetIdResponse>> {
        return unwrapResultIterator(metricsEvmChainsGetMappingsBySubnetId(this, request, options));
    }

    /**
     * Chain information by network
     *
     * @remarks
     * Get chain information by network.
     */
    async getChainInformationByNetwork(
        request: operations.GetChainInformationByNetworkRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.GetChainInformationByNetworkResponse>> {
        return unwrapResultIterator(
            metricsEvmChainsGetChainInformationByNetwork(this, request, options)
        );
    }

    /**
     * Chain information by network and subnet ID
     *
     * @remarks
     * Get chain information by network and subnet ID.
     */
    async getChainInformationByNetworkAndSubnetId(
        request: operations.GetChainInformationByNetworkAndSubnetIdRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.GetChainInformationByNetworkAndSubnetIdResponse>> {
        return unwrapResultIterator(
            metricsEvmChainsGetChainInformationByNetworkAndSubnetId(this, request, options)
        );
    }

    /**
     * Subnet information by network
     *
     * @remarks
     * Get subnet information by network.
     */
    async getSubnetInformationByNetwork(
        request: operations.GetSubnetInformationByNetworkRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.GetSubnetInformationByNetworkResponse>> {
        return unwrapResultIterator(
            metricsEvmChainsGetSubnetInformationByNetwork(this, request, options)
        );
    }

    /**
     * Subnet information by network and subnet ID
     *
     * @remarks
     * Get subnet information by network and subnet ID.
     */
    async getSubnetInformationByNetworkAndSubnetId(
        request: operations.GetSubnetInformationByNetworkAndSubnetIdRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.GetSubnetInformationByNetworkAndSubnetIdResponse>> {
        return unwrapResultIterator(
            metricsEvmChainsGetSubnetInformationByNetworkAndSubnetId(this, request, options)
        );
    }
}
