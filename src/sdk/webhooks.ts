/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksCreate } from "../funcs/webhooksCreate.js";
import { webhooksDeactivate } from "../funcs/webhooksDeactivate.js";
import { webhooksGenerateOrRotateSharedSecret } from "../funcs/webhooksGenerateOrRotateSharedSecret.js";
import { webhooksGet } from "../funcs/webhooksGet.js";
import { webhooksGetSharedSecret } from "../funcs/webhooksGetSharedSecret.js";
import { webhooksList } from "../funcs/webhooksList.js";
import { webhooksUpdate } from "../funcs/webhooksUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { Addresses } from "./addresses.js";

export class Webhooks extends ClientSDK {
  private _addresses?: Addresses;
  get addresses(): Addresses {
    return (this._addresses ??= new Addresses(this._options));
  }

  /**
   * List webhooks
   *
   * @remarks
   * Lists webhooks for the user.
   */
  async list(
    request: operations.ListWebhooksRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.ListWebhooksResponse, { cursor: string }>
  > {
    return unwrapResultIterator(webhooksList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a webhook
   *
   * @remarks
   * Create a new webhook.
   */
  async create(
    request: operations.CreateWebhookRequestBody,
    options?: RequestOptions,
  ): Promise<operations.CreateWebhookResponseBody> {
    return unwrapAsync(webhooksCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a webhook by ID
   *
   * @remarks
   * Retrieves a webhook by ID.
   */
  async get(
    request: operations.GetWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.GetWebhookResponseBody> {
    return unwrapAsync(webhooksGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Deactivate a webhook
   *
   * @remarks
   * Deactivates a webhook by ID.
   */
  async deactivate(
    request: operations.DeactivateWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.DeactivateWebhookResponseBody> {
    return unwrapAsync(webhooksDeactivate(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a webhook
   *
   * @remarks
   * Updates an existing webhook.
   */
  async update(
    request: operations.UpdateWebhookRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateWebhookResponseBody> {
    return unwrapAsync(webhooksUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate or rotate a shared secret
   *
   * @remarks
   * Generates a new shared secret or rotate an existing one.
   */
  async generateOrRotateSharedSecret(
    options?: RequestOptions,
  ): Promise<components.SharedSecretsResponse> {
    return unwrapAsync(webhooksGenerateOrRotateSharedSecret(
      this,
      options,
    ));
  }

  /**
   * Get a shared secret
   *
   * @remarks
   * Get a previously generated shared secret.
   */
  async getSharedSecret(
    options?: RequestOptions,
  ): Promise<components.SharedSecretsResponse> {
    return unwrapAsync(webhooksGetSharedSecret(
      this,
      options,
    ));
  }
}
