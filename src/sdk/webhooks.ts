/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhooksAddAddressesToWebhook } from "../funcs/webhooksAddAddressesToWebhook.js";
import { webhooksCreateWebhook } from "../funcs/webhooksCreateWebhook.js";
import { webhooksDeactivateWebhook } from "../funcs/webhooksDeactivateWebhook.js";
import { webhooksGenerateSharedSecret } from "../funcs/webhooksGenerateSharedSecret.js";
import { webhooksGetAddressesFromWebhook } from "../funcs/webhooksGetAddressesFromWebhook.js";
import { webhooksGetSharedSecret } from "../funcs/webhooksGetSharedSecret.js";
import { webhooksGetWebhook } from "../funcs/webhooksGetWebhook.js";
import { webhooksListWebhooks } from "../funcs/webhooksListWebhooks.js";
import { webhooksRemoveAddressesFromWebhook } from "../funcs/webhooksRemoveAddressesFromWebhook.js";
import { webhooksUpdateWebhook } from "../funcs/webhooksUpdateWebhook.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Webhooks extends ClientSDK {
    /**
     * List webhooks
     *
     * @remarks
     * Lists webhooks for the user.
     */
    async listWebhooks(
        request: operations.ListWebhooksRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.ListWebhooksResponse>> {
        return unwrapResultIterator(webhooksListWebhooks(this, request, options));
    }

    /**
     * Create a webhook
     *
     * @remarks
     * Create a new webhook.
     */
    async createWebhook(
        request: components.CreateWebhookRequest,
        options?: RequestOptions
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(webhooksCreateWebhook(this, request, options));
    }

    /**
     * Get a webhook by ID
     *
     * @remarks
     * Retrieves a webhook by ID.
     */
    async getWebhook(
        request: operations.GetWebhookRequest,
        options?: RequestOptions
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(webhooksGetWebhook(this, request, options));
    }

    /**
     * Deactivate a webhook
     *
     * @remarks
     * Deactivates a webhook by ID.
     */
    async deactivateWebhook(
        request: operations.DeactivateWebhookRequest,
        options?: RequestOptions
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(webhooksDeactivateWebhook(this, request, options));
    }

    /**
     * Update a webhook
     *
     * @remarks
     * Updates an existing webhook.
     */
    async updateWebhook(
        request: operations.UpdateWebhookRequest,
        options?: RequestOptions
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(webhooksUpdateWebhook(this, request, options));
    }

    /**
     * Generate a shared secret
     *
     * @remarks
     * Generates a new shared secret.
     */
    async generateSharedSecret(
        options?: RequestOptions
    ): Promise<components.SharedSecretsResponse> {
        return unwrapAsync(webhooksGenerateSharedSecret(this, options));
    }

    /**
     * Get a shared secret
     *
     * @remarks
     * Get a previously generated shared secret.
     */
    async getSharedSecret(options?: RequestOptions): Promise<components.SharedSecretsResponse> {
        return unwrapAsync(webhooksGetSharedSecret(this, options));
    }

    /**
     * List adresses by webhook
     *
     * @remarks
     * List adresses by webhook.
     */
    async getAddressesFromWebhook(
        request: operations.GetAddressesFromWebhookRequest,
        options?: RequestOptions
    ): Promise<PageIterator<operations.GetAddressesFromWebhookResponse>> {
        return unwrapResultIterator(webhooksGetAddressesFromWebhook(this, request, options));
    }

    /**
     * Remove addresses from webhook
     *
     * @remarks
     * Remove addresses from webhook.
     */
    async removeAddressesFromWebhook(
        request: operations.RemoveAddressesFromWebhookRequest,
        options?: RequestOptions
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(webhooksRemoveAddressesFromWebhook(this, request, options));
    }

    /**
     * Add addresses to webhook
     *
     * @remarks
     * Add addresses to webhook.
     */
    async addAddressesToWebhook(
        request: operations.AddAddressesToWebhookRequest,
        options?: RequestOptions
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(webhooksAddAddressesToWebhook(this, request, options));
    }
}
