/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { glacierWebhooksAddAddressesToWebhook } from "../funcs/glacierWebhooksAddAddressesToWebhook.js";
import { glacierWebhooksCreateWebhook } from "../funcs/glacierWebhooksCreateWebhook.js";
import { glacierWebhooksDeactivateWebhook } from "../funcs/glacierWebhooksDeactivateWebhook.js";
import { glacierWebhooksGenerateSharedSecret } from "../funcs/glacierWebhooksGenerateSharedSecret.js";
import { glacierWebhooksGetAddressesFromWebhook } from "../funcs/glacierWebhooksGetAddressesFromWebhook.js";
import { glacierWebhooksGetSharedSecret } from "../funcs/glacierWebhooksGetSharedSecret.js";
import { glacierWebhooksGetWebhook } from "../funcs/glacierWebhooksGetWebhook.js";
import { glacierWebhooksListWebhooks } from "../funcs/glacierWebhooksListWebhooks.js";
import { glacierWebhooksRemoveAddressesFromWebhook } from "../funcs/glacierWebhooksRemoveAddressesFromWebhook.js";
import { glacierWebhooksUpdateWebhook } from "../funcs/glacierWebhooksUpdateWebhook.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Webhooks extends ClientSDK {
    /**
     * List webhooks
     *
     * @remarks
     * Lists webhooks for the user.
     */
    async listWebhooks(
        request: operations.ListWebhooksRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.ListWebhooksResponse>> {
        return unwrapResultIterator(glacierWebhooksListWebhooks(this, request, options));
    }

    /**
     * Create a webhook
     *
     * @remarks
     * Create a new webhook.
     */
    async createWebhook(
        request: components.CreateWebhookRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(glacierWebhooksCreateWebhook(this, request, options));
    }

    /**
     * Get a webhook by ID
     *
     * @remarks
     * Retrieves a webhook by ID.
     */
    async getWebhook(
        request: operations.GetWebhookRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(glacierWebhooksGetWebhook(this, request, options));
    }

    /**
     * Deactivate a webhook
     *
     * @remarks
     * Deactivates a webhook by ID.
     */
    async deactivateWebhook(
        request: operations.DeactivateWebhookRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(glacierWebhooksDeactivateWebhook(this, request, options));
    }

    /**
     * Update a webhook
     *
     * @remarks
     * Updates an existing webhook.
     */
    async updateWebhook(
        request: operations.UpdateWebhookRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(glacierWebhooksUpdateWebhook(this, request, options));
    }

    /**
     * Generate a shared secret
     *
     * @remarks
     * Generates a new shared secret.
     */
    async generateSharedSecret(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.SharedSecretsResponse> {
        return unwrapAsync(glacierWebhooksGenerateSharedSecret(this, options));
    }

    /**
     * Get a shared secret
     *
     * @remarks
     * Get a previously generated shared secret.
     */
    async getSharedSecret(
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.SharedSecretsResponse> {
        return unwrapAsync(glacierWebhooksGetSharedSecret(this, options));
    }

    /**
     * List adresses by webhook
     *
     * @remarks
     * List adresses by webhook.
     */
    async getAddressesFromWebhook(
        request: operations.GetAddressesFromWebhookRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<PageIterator<operations.GetAddressesFromWebhookResponse>> {
        return unwrapResultIterator(glacierWebhooksGetAddressesFromWebhook(this, request, options));
    }

    /**
     * Remove addresses from webhook
     *
     * @remarks
     * Remove addresses from webhook.
     */
    async removeAddressesFromWebhook(
        request: operations.RemoveAddressesFromWebhookRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(glacierWebhooksRemoveAddressesFromWebhook(this, request, options));
    }

    /**
     * Add addresses to webhook
     *
     * @remarks
     * Add addresses to webhook.
     */
    async addAddressesToWebhook(
        request: operations.AddAddressesToWebhookRequest,
        options?: RequestOptions & { serverURL?: string }
    ): Promise<components.WebhookResponse> {
        return unwrapAsync(glacierWebhooksAddAddressesToWebhook(this, request, options));
    }
}
