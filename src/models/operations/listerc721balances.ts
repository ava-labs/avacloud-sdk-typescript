/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListErc721BalancesServerList = [
  "https://glacier-api.avax.network",
] as const;

export type ListErc721BalancesGlobals = {
  /**
   * A supported EVM chain id, chain alias, or blockchain id.
   */
  chainId?: string | undefined;
};

export type ListErc721BalancesRequest = {
  /**
   * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
   */
  pageToken?: string | undefined;
  /**
   * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 500.
   */
  pageSize?: number | undefined;
  /**
   * A supported evm chain id or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
   */
  chainId?: string | undefined;
  /**
   * A wallet address.
   */
  address: string;
  /**
   * A contract addresses to filter by.
   */
  contractAddress?: string | undefined;
};

export type ListErc721BalancesResponse = {
  result: components.ListErc721BalancesResponse;
};

/** @internal */
export const ListErc721BalancesGlobals$inboundSchema: z.ZodType<
  ListErc721BalancesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string().optional(),
});

/** @internal */
export type ListErc721BalancesGlobals$Outbound = {
  chainId?: string | undefined;
};

/** @internal */
export const ListErc721BalancesGlobals$outboundSchema: z.ZodType<
  ListErc721BalancesGlobals$Outbound,
  z.ZodTypeDef,
  ListErc721BalancesGlobals
> = z.object({
  chainId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc721BalancesGlobals$ {
  /** @deprecated use `ListErc721BalancesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListErc721BalancesGlobals$inboundSchema;
  /** @deprecated use `ListErc721BalancesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListErc721BalancesGlobals$outboundSchema;
  /** @deprecated use `ListErc721BalancesGlobals$Outbound` instead. */
  export type Outbound = ListErc721BalancesGlobals$Outbound;
}

export function listErc721BalancesGlobalsToJSON(
  listErc721BalancesGlobals: ListErc721BalancesGlobals,
): string {
  return JSON.stringify(
    ListErc721BalancesGlobals$outboundSchema.parse(listErc721BalancesGlobals),
  );
}

export function listErc721BalancesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListErc721BalancesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListErc721BalancesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListErc721BalancesGlobals' from JSON`,
  );
}

/** @internal */
export const ListErc721BalancesRequest$inboundSchema: z.ZodType<
  ListErc721BalancesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  chainId: z.string().optional(),
  address: z.string(),
  contractAddress: z.string().optional(),
});

/** @internal */
export type ListErc721BalancesRequest$Outbound = {
  pageToken?: string | undefined;
  pageSize: number;
  chainId?: string | undefined;
  address: string;
  contractAddress?: string | undefined;
};

/** @internal */
export const ListErc721BalancesRequest$outboundSchema: z.ZodType<
  ListErc721BalancesRequest$Outbound,
  z.ZodTypeDef,
  ListErc721BalancesRequest
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  chainId: z.string().optional(),
  address: z.string(),
  contractAddress: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc721BalancesRequest$ {
  /** @deprecated use `ListErc721BalancesRequest$inboundSchema` instead. */
  export const inboundSchema = ListErc721BalancesRequest$inboundSchema;
  /** @deprecated use `ListErc721BalancesRequest$outboundSchema` instead. */
  export const outboundSchema = ListErc721BalancesRequest$outboundSchema;
  /** @deprecated use `ListErc721BalancesRequest$Outbound` instead. */
  export type Outbound = ListErc721BalancesRequest$Outbound;
}

export function listErc721BalancesRequestToJSON(
  listErc721BalancesRequest: ListErc721BalancesRequest,
): string {
  return JSON.stringify(
    ListErc721BalancesRequest$outboundSchema.parse(listErc721BalancesRequest),
  );
}

export function listErc721BalancesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListErc721BalancesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListErc721BalancesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListErc721BalancesRequest' from JSON`,
  );
}

/** @internal */
export const ListErc721BalancesResponse$inboundSchema: z.ZodType<
  ListErc721BalancesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListErc721BalancesResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListErc721BalancesResponse$Outbound = {
  Result: components.ListErc721BalancesResponse$Outbound;
};

/** @internal */
export const ListErc721BalancesResponse$outboundSchema: z.ZodType<
  ListErc721BalancesResponse$Outbound,
  z.ZodTypeDef,
  ListErc721BalancesResponse
> = z.object({
  result: components.ListErc721BalancesResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc721BalancesResponse$ {
  /** @deprecated use `ListErc721BalancesResponse$inboundSchema` instead. */
  export const inboundSchema = ListErc721BalancesResponse$inboundSchema;
  /** @deprecated use `ListErc721BalancesResponse$outboundSchema` instead. */
  export const outboundSchema = ListErc721BalancesResponse$outboundSchema;
  /** @deprecated use `ListErc721BalancesResponse$Outbound` instead. */
  export type Outbound = ListErc721BalancesResponse$Outbound;
}

export function listErc721BalancesResponseToJSON(
  listErc721BalancesResponse: ListErc721BalancesResponse,
): string {
  return JSON.stringify(
    ListErc721BalancesResponse$outboundSchema.parse(listErc721BalancesResponse),
  );
}

export function listErc721BalancesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListErc721BalancesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListErc721BalancesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListErc721BalancesResponse' from JSON`,
  );
}
