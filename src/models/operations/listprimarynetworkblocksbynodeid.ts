/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type ListPrimaryNetworkBlocksByNodeIdRequest = {
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    pageToken?: string | undefined;
    /**
     * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
     */
    pageSize?: number | undefined;
    /**
     * A primary network blockchain id or alias.
     */
    blockchainId: components.BlockchainId;
    /**
     * Either mainnet or a testnet.
     */
    network: components.Network;
    /**
     * A primary network (P or X chain) nodeId.
     */
    nodeId: string;
};

/** @internal */
export const ListPrimaryNetworkBlocksByNodeIdRequest$inboundSchema: z.ZodType<
    ListPrimaryNetworkBlocksByNodeIdRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    blockchainId: components.BlockchainId$inboundSchema,
    network: components.Network$inboundSchema,
    nodeId: z.string(),
});

/** @internal */
export type ListPrimaryNetworkBlocksByNodeIdRequest$Outbound = {
    pageToken?: string | undefined;
    pageSize: number;
    blockchainId: string;
    network: string;
    nodeId: string;
};

/** @internal */
export const ListPrimaryNetworkBlocksByNodeIdRequest$outboundSchema: z.ZodType<
    ListPrimaryNetworkBlocksByNodeIdRequest$Outbound,
    z.ZodTypeDef,
    ListPrimaryNetworkBlocksByNodeIdRequest
> = z.object({
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    blockchainId: components.BlockchainId$outboundSchema,
    network: components.Network$outboundSchema,
    nodeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPrimaryNetworkBlocksByNodeIdRequest$ {
    /** @deprecated use `ListPrimaryNetworkBlocksByNodeIdRequest$inboundSchema` instead. */
    export const inboundSchema = ListPrimaryNetworkBlocksByNodeIdRequest$inboundSchema;
    /** @deprecated use `ListPrimaryNetworkBlocksByNodeIdRequest$outboundSchema` instead. */
    export const outboundSchema = ListPrimaryNetworkBlocksByNodeIdRequest$outboundSchema;
    /** @deprecated use `ListPrimaryNetworkBlocksByNodeIdRequest$Outbound` instead. */
    export type Outbound = ListPrimaryNetworkBlocksByNodeIdRequest$Outbound;
}
