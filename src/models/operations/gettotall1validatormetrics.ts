/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetTotalL1ValidatorMetricsServerList = [
  "https://metrics.avax.network",
] as const;

/**
 * Which network level metric to fetch for L1 validator.
 */
export const Metric = {
  TotalCumulativeFeesDaily: "totalCumulativeFeesDaily",
  TotalValidatorFeesDaily: "totalValidatorFeesDaily",
  TotalPayingValidatorsDaily: "totalPayingValidatorsDaily",
} as const;
/**
 * Which network level metric to fetch for L1 validator.
 */
export type Metric = ClosedEnum<typeof Metric>;

export type GetTotalL1ValidatorMetricsRequest = {
  /**
   * Which network level metric to fetch for L1 validator.
   */
  metric: Metric;
  /**
   * Query param for retrieving items after a specific timestamp.
   */
  startTimestamp?: number | undefined;
  /**
   * Query param for retrieving items before a specific timestamp.
   */
  endTimestamp?: number | undefined;
};

/** @internal */
export const Metric$inboundSchema: z.ZodNativeEnum<typeof Metric> = z
  .nativeEnum(Metric);

/** @internal */
export const Metric$outboundSchema: z.ZodNativeEnum<typeof Metric> =
  Metric$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metric$ {
  /** @deprecated use `Metric$inboundSchema` instead. */
  export const inboundSchema = Metric$inboundSchema;
  /** @deprecated use `Metric$outboundSchema` instead. */
  export const outboundSchema = Metric$outboundSchema;
}

/** @internal */
export const GetTotalL1ValidatorMetricsRequest$inboundSchema: z.ZodType<
  GetTotalL1ValidatorMetricsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  metric: Metric$inboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
});

/** @internal */
export type GetTotalL1ValidatorMetricsRequest$Outbound = {
  metric: string;
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
};

/** @internal */
export const GetTotalL1ValidatorMetricsRequest$outboundSchema: z.ZodType<
  GetTotalL1ValidatorMetricsRequest$Outbound,
  z.ZodTypeDef,
  GetTotalL1ValidatorMetricsRequest
> = z.object({
  metric: Metric$outboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTotalL1ValidatorMetricsRequest$ {
  /** @deprecated use `GetTotalL1ValidatorMetricsRequest$inboundSchema` instead. */
  export const inboundSchema = GetTotalL1ValidatorMetricsRequest$inboundSchema;
  /** @deprecated use `GetTotalL1ValidatorMetricsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetTotalL1ValidatorMetricsRequest$outboundSchema;
  /** @deprecated use `GetTotalL1ValidatorMetricsRequest$Outbound` instead. */
  export type Outbound = GetTotalL1ValidatorMetricsRequest$Outbound;
}

export function getTotalL1ValidatorMetricsRequestToJSON(
  getTotalL1ValidatorMetricsRequest: GetTotalL1ValidatorMetricsRequest,
): string {
  return JSON.stringify(
    GetTotalL1ValidatorMetricsRequest$outboundSchema.parse(
      getTotalL1ValidatorMetricsRequest,
    ),
  );
}

export function getTotalL1ValidatorMetricsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTotalL1ValidatorMetricsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTotalL1ValidatorMetricsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTotalL1ValidatorMetricsRequest' from JSON`,
  );
}
