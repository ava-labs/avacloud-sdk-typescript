/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetTransactionServerList = [
  "https://glacier-api.avax.network",
] as const;

export type GetTransactionGlobals = {
  /**
   * A supported EVM chain id, chain alias, or blockchain id.
   */
  chainId?: string | undefined;
};

export type GetTransactionRequest = {
  /**
   * A supported evm chain id or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
   */
  chainId?: string | undefined;
  /**
   * A transaction hash.
   */
  txHash: string;
};

/** @internal */
export const GetTransactionGlobals$inboundSchema: z.ZodType<
  GetTransactionGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string().optional(),
});

/** @internal */
export type GetTransactionGlobals$Outbound = {
  chainId?: string | undefined;
};

/** @internal */
export const GetTransactionGlobals$outboundSchema: z.ZodType<
  GetTransactionGlobals$Outbound,
  z.ZodTypeDef,
  GetTransactionGlobals
> = z.object({
  chainId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionGlobals$ {
  /** @deprecated use `GetTransactionGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTransactionGlobals$inboundSchema;
  /** @deprecated use `GetTransactionGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTransactionGlobals$outboundSchema;
  /** @deprecated use `GetTransactionGlobals$Outbound` instead. */
  export type Outbound = GetTransactionGlobals$Outbound;
}

export function getTransactionGlobalsToJSON(
  getTransactionGlobals: GetTransactionGlobals,
): string {
  return JSON.stringify(
    GetTransactionGlobals$outboundSchema.parse(getTransactionGlobals),
  );
}

export function getTransactionGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionGlobals' from JSON`,
  );
}

/** @internal */
export const GetTransactionRequest$inboundSchema: z.ZodType<
  GetTransactionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string().optional(),
  txHash: z.string(),
});

/** @internal */
export type GetTransactionRequest$Outbound = {
  chainId?: string | undefined;
  txHash: string;
};

/** @internal */
export const GetTransactionRequest$outboundSchema: z.ZodType<
  GetTransactionRequest$Outbound,
  z.ZodTypeDef,
  GetTransactionRequest
> = z.object({
  chainId: z.string().optional(),
  txHash: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionRequest$ {
  /** @deprecated use `GetTransactionRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransactionRequest$inboundSchema;
  /** @deprecated use `GetTransactionRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransactionRequest$outboundSchema;
  /** @deprecated use `GetTransactionRequest$Outbound` instead. */
  export type Outbound = GetTransactionRequest$Outbound;
}

export function getTransactionRequestToJSON(
  getTransactionRequest: GetTransactionRequest,
): string {
  return JSON.stringify(
    GetTransactionRequest$outboundSchema.parse(getTransactionRequest),
  );
}

export function getTransactionRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionRequest' from JSON`,
  );
}
