/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListErc1155BalancesServerList = [
  "https://glacier-api.avax.network",
] as const;

export type ListErc1155BalancesGlobals = {
  /**
   * A supported EVM chain id, chain alias, or blockchain id.
   */
  chainId?: string | undefined;
};

export type ListErc1155BalancesRequest = {
  /**
   * The block number, if not defined the block number will be the latest block.
   */
  blockNumber?: string | undefined;
  /**
   * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
   */
  pageToken?: string | undefined;
  /**
   * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 500.
   */
  pageSize?: number | undefined;
  /**
   * A supported evm chain id or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
   */
  chainId?: string | undefined;
  /**
   * A wallet address.
   */
  address: string;
  /**
   * A contract addresses to filter by.
   */
  contractAddress?: string | undefined;
};

export type ListErc1155BalancesResponse = {
  result: components.ListErc1155BalancesResponse;
};

/** @internal */
export const ListErc1155BalancesGlobals$inboundSchema: z.ZodType<
  ListErc1155BalancesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string().optional(),
});

/** @internal */
export type ListErc1155BalancesGlobals$Outbound = {
  chainId?: string | undefined;
};

/** @internal */
export const ListErc1155BalancesGlobals$outboundSchema: z.ZodType<
  ListErc1155BalancesGlobals$Outbound,
  z.ZodTypeDef,
  ListErc1155BalancesGlobals
> = z.object({
  chainId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc1155BalancesGlobals$ {
  /** @deprecated use `ListErc1155BalancesGlobals$inboundSchema` instead. */
  export const inboundSchema = ListErc1155BalancesGlobals$inboundSchema;
  /** @deprecated use `ListErc1155BalancesGlobals$outboundSchema` instead. */
  export const outboundSchema = ListErc1155BalancesGlobals$outboundSchema;
  /** @deprecated use `ListErc1155BalancesGlobals$Outbound` instead. */
  export type Outbound = ListErc1155BalancesGlobals$Outbound;
}

export function listErc1155BalancesGlobalsToJSON(
  listErc1155BalancesGlobals: ListErc1155BalancesGlobals,
): string {
  return JSON.stringify(
    ListErc1155BalancesGlobals$outboundSchema.parse(listErc1155BalancesGlobals),
  );
}

export function listErc1155BalancesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListErc1155BalancesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListErc1155BalancesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListErc1155BalancesGlobals' from JSON`,
  );
}

/** @internal */
export const ListErc1155BalancesRequest$inboundSchema: z.ZodType<
  ListErc1155BalancesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  blockNumber: z.string().optional(),
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  chainId: z.string().optional(),
  address: z.string(),
  contractAddress: z.string().optional(),
});

/** @internal */
export type ListErc1155BalancesRequest$Outbound = {
  blockNumber?: string | undefined;
  pageToken?: string | undefined;
  pageSize: number;
  chainId?: string | undefined;
  address: string;
  contractAddress?: string | undefined;
};

/** @internal */
export const ListErc1155BalancesRequest$outboundSchema: z.ZodType<
  ListErc1155BalancesRequest$Outbound,
  z.ZodTypeDef,
  ListErc1155BalancesRequest
> = z.object({
  blockNumber: z.string().optional(),
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  chainId: z.string().optional(),
  address: z.string(),
  contractAddress: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc1155BalancesRequest$ {
  /** @deprecated use `ListErc1155BalancesRequest$inboundSchema` instead. */
  export const inboundSchema = ListErc1155BalancesRequest$inboundSchema;
  /** @deprecated use `ListErc1155BalancesRequest$outboundSchema` instead. */
  export const outboundSchema = ListErc1155BalancesRequest$outboundSchema;
  /** @deprecated use `ListErc1155BalancesRequest$Outbound` instead. */
  export type Outbound = ListErc1155BalancesRequest$Outbound;
}

export function listErc1155BalancesRequestToJSON(
  listErc1155BalancesRequest: ListErc1155BalancesRequest,
): string {
  return JSON.stringify(
    ListErc1155BalancesRequest$outboundSchema.parse(listErc1155BalancesRequest),
  );
}

export function listErc1155BalancesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListErc1155BalancesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListErc1155BalancesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListErc1155BalancesRequest' from JSON`,
  );
}

/** @internal */
export const ListErc1155BalancesResponse$inboundSchema: z.ZodType<
  ListErc1155BalancesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListErc1155BalancesResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListErc1155BalancesResponse$Outbound = {
  Result: components.ListErc1155BalancesResponse$Outbound;
};

/** @internal */
export const ListErc1155BalancesResponse$outboundSchema: z.ZodType<
  ListErc1155BalancesResponse$Outbound,
  z.ZodTypeDef,
  ListErc1155BalancesResponse
> = z.object({
  result: components.ListErc1155BalancesResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc1155BalancesResponse$ {
  /** @deprecated use `ListErc1155BalancesResponse$inboundSchema` instead. */
  export const inboundSchema = ListErc1155BalancesResponse$inboundSchema;
  /** @deprecated use `ListErc1155BalancesResponse$outboundSchema` instead. */
  export const outboundSchema = ListErc1155BalancesResponse$outboundSchema;
  /** @deprecated use `ListErc1155BalancesResponse$Outbound` instead. */
  export type Outbound = ListErc1155BalancesResponse$Outbound;
}

export function listErc1155BalancesResponseToJSON(
  listErc1155BalancesResponse: ListErc1155BalancesResponse,
): string {
  return JSON.stringify(
    ListErc1155BalancesResponse$outboundSchema.parse(
      listErc1155BalancesResponse,
    ),
  );
}

export function listErc1155BalancesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListErc1155BalancesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListErc1155BalancesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListErc1155BalancesResponse' from JSON`,
  );
}
