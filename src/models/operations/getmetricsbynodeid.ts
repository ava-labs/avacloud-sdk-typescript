/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetMetricsByNodeIdServerList = [
  "https://metrics.avax.network",
] as const;

/**
 * Which metric to fetch for given L1 validator(node) ID.
 */
export const GetMetricsByNodeIdPathParamMetric = {
  PerNodeCumulativeFeesPaid: "perNodeCumulativeFeesPaid",
  PerNodeDailyFeesPaid: "perNodeDailyFeesPaid",
} as const;
/**
 * Which metric to fetch for given L1 validator(node) ID.
 */
export type GetMetricsByNodeIdPathParamMetric = ClosedEnum<
  typeof GetMetricsByNodeIdPathParamMetric
>;

export type GetMetricsByNodeIdRequest = {
  /**
   * Which metric to fetch for given L1 validator(node) ID.
   */
  metric: GetMetricsByNodeIdPathParamMetric;
  /**
   * Query param for retrieving items after a specific timestamp.
   */
  startTimestamp?: number | undefined;
  /**
   * Query param for retrieving items before a specific timestamp.
   */
  endTimestamp?: number | undefined;
  /**
   * A primary network (P or X chain) nodeId.
   */
  nodeId: string;
};

/** @internal */
export const GetMetricsByNodeIdPathParamMetric$inboundSchema: z.ZodNativeEnum<
  typeof GetMetricsByNodeIdPathParamMetric
> = z.nativeEnum(GetMetricsByNodeIdPathParamMetric);

/** @internal */
export const GetMetricsByNodeIdPathParamMetric$outboundSchema: z.ZodNativeEnum<
  typeof GetMetricsByNodeIdPathParamMetric
> = GetMetricsByNodeIdPathParamMetric$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetricsByNodeIdPathParamMetric$ {
  /** @deprecated use `GetMetricsByNodeIdPathParamMetric$inboundSchema` instead. */
  export const inboundSchema = GetMetricsByNodeIdPathParamMetric$inboundSchema;
  /** @deprecated use `GetMetricsByNodeIdPathParamMetric$outboundSchema` instead. */
  export const outboundSchema =
    GetMetricsByNodeIdPathParamMetric$outboundSchema;
}

/** @internal */
export const GetMetricsByNodeIdRequest$inboundSchema: z.ZodType<
  GetMetricsByNodeIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  metric: GetMetricsByNodeIdPathParamMetric$inboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
  nodeId: z.string(),
});

/** @internal */
export type GetMetricsByNodeIdRequest$Outbound = {
  metric: string;
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
  nodeId: string;
};

/** @internal */
export const GetMetricsByNodeIdRequest$outboundSchema: z.ZodType<
  GetMetricsByNodeIdRequest$Outbound,
  z.ZodTypeDef,
  GetMetricsByNodeIdRequest
> = z.object({
  metric: GetMetricsByNodeIdPathParamMetric$outboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
  nodeId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetricsByNodeIdRequest$ {
  /** @deprecated use `GetMetricsByNodeIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetMetricsByNodeIdRequest$inboundSchema;
  /** @deprecated use `GetMetricsByNodeIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetMetricsByNodeIdRequest$outboundSchema;
  /** @deprecated use `GetMetricsByNodeIdRequest$Outbound` instead. */
  export type Outbound = GetMetricsByNodeIdRequest$Outbound;
}

export function getMetricsByNodeIdRequestToJSON(
  getMetricsByNodeIdRequest: GetMetricsByNodeIdRequest,
): string {
  return JSON.stringify(
    GetMetricsByNodeIdRequest$outboundSchema.parse(getMetricsByNodeIdRequest),
  );
}

export function getMetricsByNodeIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMetricsByNodeIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMetricsByNodeIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMetricsByNodeIdRequest' from JSON`,
  );
}
