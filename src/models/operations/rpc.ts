/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type RpcRequestBody = components.RpcRequestBodyDto | Array<components.RpcRequestBodyDto>;

export type RpcRequest = {
    /**
     * A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
     */
    chainId: string;
    requestBody: components.RpcRequestBodyDto | Array<components.RpcRequestBodyDto>;
};

export type Three = components.RpcSuccessResponseDto | components.RpcErrorResponseDto;

export type RpcResponseBody =
    | components.RpcSuccessResponseDto
    | components.RpcErrorResponseDto
    | Array<components.RpcSuccessResponseDto | components.RpcErrorResponseDto>;

/** @internal */
export const RpcRequestBody$inboundSchema: z.ZodType<RpcRequestBody, z.ZodTypeDef, unknown> =
    z.union([
        components.RpcRequestBodyDto$inboundSchema,
        z.array(components.RpcRequestBodyDto$inboundSchema),
    ]);

/** @internal */
export type RpcRequestBody$Outbound =
    | components.RpcRequestBodyDto$Outbound
    | Array<components.RpcRequestBodyDto$Outbound>;

/** @internal */
export const RpcRequestBody$outboundSchema: z.ZodType<
    RpcRequestBody$Outbound,
    z.ZodTypeDef,
    RpcRequestBody
> = z.union([
    components.RpcRequestBodyDto$outboundSchema,
    z.array(components.RpcRequestBodyDto$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcRequestBody$ {
    /** @deprecated use `RpcRequestBody$inboundSchema` instead. */
    export const inboundSchema = RpcRequestBody$inboundSchema;
    /** @deprecated use `RpcRequestBody$outboundSchema` instead. */
    export const outboundSchema = RpcRequestBody$outboundSchema;
    /** @deprecated use `RpcRequestBody$Outbound` instead. */
    export type Outbound = RpcRequestBody$Outbound;
}

/** @internal */
export const RpcRequest$inboundSchema: z.ZodType<RpcRequest, z.ZodTypeDef, unknown> = z
    .object({
        chainId: z.string(),
        RequestBody: z.union([
            components.RpcRequestBodyDto$inboundSchema,
            z.array(components.RpcRequestBodyDto$inboundSchema),
        ]),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type RpcRequest$Outbound = {
    chainId: string;
    RequestBody:
        | components.RpcRequestBodyDto$Outbound
        | Array<components.RpcRequestBodyDto$Outbound>;
};

/** @internal */
export const RpcRequest$outboundSchema: z.ZodType<RpcRequest$Outbound, z.ZodTypeDef, RpcRequest> = z
    .object({
        chainId: z.string(),
        requestBody: z.union([
            components.RpcRequestBodyDto$outboundSchema,
            z.array(components.RpcRequestBodyDto$outboundSchema),
        ]),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcRequest$ {
    /** @deprecated use `RpcRequest$inboundSchema` instead. */
    export const inboundSchema = RpcRequest$inboundSchema;
    /** @deprecated use `RpcRequest$outboundSchema` instead. */
    export const outboundSchema = RpcRequest$outboundSchema;
    /** @deprecated use `RpcRequest$Outbound` instead. */
    export type Outbound = RpcRequest$Outbound;
}

/** @internal */
export const Three$inboundSchema: z.ZodType<Three, z.ZodTypeDef, unknown> = z.union([
    components.RpcSuccessResponseDto$inboundSchema,
    components.RpcErrorResponseDto$inboundSchema,
]);

/** @internal */
export type Three$Outbound =
    | components.RpcSuccessResponseDto$Outbound
    | components.RpcErrorResponseDto$Outbound;

/** @internal */
export const Three$outboundSchema: z.ZodType<Three$Outbound, z.ZodTypeDef, Three> = z.union([
    components.RpcSuccessResponseDto$outboundSchema,
    components.RpcErrorResponseDto$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Three$ {
    /** @deprecated use `Three$inboundSchema` instead. */
    export const inboundSchema = Three$inboundSchema;
    /** @deprecated use `Three$outboundSchema` instead. */
    export const outboundSchema = Three$outboundSchema;
    /** @deprecated use `Three$Outbound` instead. */
    export type Outbound = Three$Outbound;
}

/** @internal */
export const RpcResponseBody$inboundSchema: z.ZodType<RpcResponseBody, z.ZodTypeDef, unknown> =
    z.union([
        components.RpcSuccessResponseDto$inboundSchema,
        components.RpcErrorResponseDto$inboundSchema,
        z.array(
            z.union([
                components.RpcSuccessResponseDto$inboundSchema,
                components.RpcErrorResponseDto$inboundSchema,
            ])
        ),
    ]);

/** @internal */
export type RpcResponseBody$Outbound =
    | components.RpcSuccessResponseDto$Outbound
    | components.RpcErrorResponseDto$Outbound
    | Array<components.RpcSuccessResponseDto$Outbound | components.RpcErrorResponseDto$Outbound>;

/** @internal */
export const RpcResponseBody$outboundSchema: z.ZodType<
    RpcResponseBody$Outbound,
    z.ZodTypeDef,
    RpcResponseBody
> = z.union([
    components.RpcSuccessResponseDto$outboundSchema,
    components.RpcErrorResponseDto$outboundSchema,
    z.array(
        z.union([
            components.RpcSuccessResponseDto$outboundSchema,
            components.RpcErrorResponseDto$outboundSchema,
        ])
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcResponseBody$ {
    /** @deprecated use `RpcResponseBody$inboundSchema` instead. */
    export const inboundSchema = RpcResponseBody$inboundSchema;
    /** @deprecated use `RpcResponseBody$outboundSchema` instead. */
    export const outboundSchema = RpcResponseBody$outboundSchema;
    /** @deprecated use `RpcResponseBody$Outbound` instead. */
    export type Outbound = RpcResponseBody$Outbound;
}
