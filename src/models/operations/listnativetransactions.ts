/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export const ListNativeTransactionsServerList = ["http://localhost:3000"] as const;

export type ListNativeTransactionsGlobals = {
    chainId?: string | undefined;
};

export type ListNativeTransactionsRequest = {
    /**
     * The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block.
     */
    startBlock?: number | undefined;
    /**
     * The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block.
     */
    endBlock?: number | undefined;
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    pageToken?: string | undefined;
    /**
     * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
     */
    pageSize?: number | undefined;
    /**
     * A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
     */
    chainId?: string | undefined;
    /**
     * A wallet address.
     */
    address: string;
};

export type ListNativeTransactionsResponse = {
    result: components.ListNativeTransactionsResponse;
};

/** @internal */
export const ListNativeTransactionsGlobals$inboundSchema: z.ZodType<
    ListNativeTransactionsGlobals,
    z.ZodTypeDef,
    unknown
> = z.object({
    chainId: z.string().optional(),
});

/** @internal */
export type ListNativeTransactionsGlobals$Outbound = {
    chainId?: string | undefined;
};

/** @internal */
export const ListNativeTransactionsGlobals$outboundSchema: z.ZodType<
    ListNativeTransactionsGlobals$Outbound,
    z.ZodTypeDef,
    ListNativeTransactionsGlobals
> = z.object({
    chainId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListNativeTransactionsGlobals$ {
    /** @deprecated use `ListNativeTransactionsGlobals$inboundSchema` instead. */
    export const inboundSchema = ListNativeTransactionsGlobals$inboundSchema;
    /** @deprecated use `ListNativeTransactionsGlobals$outboundSchema` instead. */
    export const outboundSchema = ListNativeTransactionsGlobals$outboundSchema;
    /** @deprecated use `ListNativeTransactionsGlobals$Outbound` instead. */
    export type Outbound = ListNativeTransactionsGlobals$Outbound;
}

/** @internal */
export const ListNativeTransactionsRequest$inboundSchema: z.ZodType<
    ListNativeTransactionsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    startBlock: z.number().optional(),
    endBlock: z.number().optional(),
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    chainId: z.string().optional(),
    address: z.string(),
});

/** @internal */
export type ListNativeTransactionsRequest$Outbound = {
    startBlock?: number | undefined;
    endBlock?: number | undefined;
    pageToken?: string | undefined;
    pageSize: number;
    chainId?: string | undefined;
    address: string;
};

/** @internal */
export const ListNativeTransactionsRequest$outboundSchema: z.ZodType<
    ListNativeTransactionsRequest$Outbound,
    z.ZodTypeDef,
    ListNativeTransactionsRequest
> = z.object({
    startBlock: z.number().optional(),
    endBlock: z.number().optional(),
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    chainId: z.string().optional(),
    address: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListNativeTransactionsRequest$ {
    /** @deprecated use `ListNativeTransactionsRequest$inboundSchema` instead. */
    export const inboundSchema = ListNativeTransactionsRequest$inboundSchema;
    /** @deprecated use `ListNativeTransactionsRequest$outboundSchema` instead. */
    export const outboundSchema = ListNativeTransactionsRequest$outboundSchema;
    /** @deprecated use `ListNativeTransactionsRequest$Outbound` instead. */
    export type Outbound = ListNativeTransactionsRequest$Outbound;
}

/** @internal */
export const ListNativeTransactionsResponse$inboundSchema: z.ZodType<
    ListNativeTransactionsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: components.ListNativeTransactionsResponse$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type ListNativeTransactionsResponse$Outbound = {
    Result: components.ListNativeTransactionsResponse$Outbound;
};

/** @internal */
export const ListNativeTransactionsResponse$outboundSchema: z.ZodType<
    ListNativeTransactionsResponse$Outbound,
    z.ZodTypeDef,
    ListNativeTransactionsResponse
> = z
    .object({
        result: components.ListNativeTransactionsResponse$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListNativeTransactionsResponse$ {
    /** @deprecated use `ListNativeTransactionsResponse$inboundSchema` instead. */
    export const inboundSchema = ListNativeTransactionsResponse$inboundSchema;
    /** @deprecated use `ListNativeTransactionsResponse$outboundSchema` instead. */
    export const outboundSchema = ListNativeTransactionsResponse$outboundSchema;
    /** @deprecated use `ListNativeTransactionsResponse$Outbound` instead. */
    export type Outbound = ListNativeTransactionsResponse$Outbound;
}
