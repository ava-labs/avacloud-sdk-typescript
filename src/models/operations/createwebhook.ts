/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateWebhookServerList = [
  "https://glacier-api.avax.network",
] as const;

export type CreateWebhookRequestBody =
  | components.PrimaryNetworkAddressActivityRequest
  | components.EVMAddressActivityRequest
  | components.ValidatorActivityRequest;

/**
 * Successful response
 */
export type CreateWebhookResponseBody =
  | components.EVMAddressActivityResponse
  | components.PrimaryNetworkAddressActivityResponse
  | components.ValidatorActivityResponse;

/** @internal */
export const CreateWebhookRequestBody$inboundSchema: z.ZodType<
  CreateWebhookRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.PrimaryNetworkAddressActivityRequest$inboundSchema,
  components.EVMAddressActivityRequest$inboundSchema,
  components.ValidatorActivityRequest$inboundSchema,
]);

/** @internal */
export type CreateWebhookRequestBody$Outbound =
  | components.PrimaryNetworkAddressActivityRequest$Outbound
  | components.EVMAddressActivityRequest$Outbound
  | components.ValidatorActivityRequest$Outbound;

/** @internal */
export const CreateWebhookRequestBody$outboundSchema: z.ZodType<
  CreateWebhookRequestBody$Outbound,
  z.ZodTypeDef,
  CreateWebhookRequestBody
> = z.union([
  components.PrimaryNetworkAddressActivityRequest$outboundSchema,
  components.EVMAddressActivityRequest$outboundSchema,
  components.ValidatorActivityRequest$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookRequestBody$ {
  /** @deprecated use `CreateWebhookRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookRequestBody$inboundSchema;
  /** @deprecated use `CreateWebhookRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookRequestBody$outboundSchema;
  /** @deprecated use `CreateWebhookRequestBody$Outbound` instead. */
  export type Outbound = CreateWebhookRequestBody$Outbound;
}

export function createWebhookRequestBodyToJSON(
  createWebhookRequestBody: CreateWebhookRequestBody,
): string {
  return JSON.stringify(
    CreateWebhookRequestBody$outboundSchema.parse(createWebhookRequestBody),
  );
}

export function createWebhookRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateWebhookResponseBody$inboundSchema: z.ZodType<
  CreateWebhookResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.EVMAddressActivityResponse$inboundSchema,
  components.PrimaryNetworkAddressActivityResponse$inboundSchema,
  components.ValidatorActivityResponse$inboundSchema,
]);

/** @internal */
export type CreateWebhookResponseBody$Outbound =
  | components.EVMAddressActivityResponse$Outbound
  | components.PrimaryNetworkAddressActivityResponse$Outbound
  | components.ValidatorActivityResponse$Outbound;

/** @internal */
export const CreateWebhookResponseBody$outboundSchema: z.ZodType<
  CreateWebhookResponseBody$Outbound,
  z.ZodTypeDef,
  CreateWebhookResponseBody
> = z.union([
  components.EVMAddressActivityResponse$outboundSchema,
  components.PrimaryNetworkAddressActivityResponse$outboundSchema,
  components.ValidatorActivityResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateWebhookResponseBody$ {
  /** @deprecated use `CreateWebhookResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateWebhookResponseBody$inboundSchema;
  /** @deprecated use `CreateWebhookResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateWebhookResponseBody$outboundSchema;
  /** @deprecated use `CreateWebhookResponseBody$Outbound` instead. */
  export type Outbound = CreateWebhookResponseBody$Outbound;
}

export function createWebhookResponseBodyToJSON(
  createWebhookResponseBody: CreateWebhookResponseBody,
): string {
  return JSON.stringify(
    CreateWebhookResponseBody$outboundSchema.parse(createWebhookResponseBody),
  );
}

export function createWebhookResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateWebhookResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateWebhookResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateWebhookResponseBody' from JSON`,
  );
}
