/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListErc20TransactionsGlobals = {
    /**
     * A supported EVM chain id, chain alias, or blockchain id.
     */
    chainId?: string | undefined;
};

export type ListErc20TransactionsRequest = {
    /**
     * The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block.
     */
    startBlock?: number | undefined;
    /**
     * The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block.
     */
    endBlock?: number | undefined;
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    pageToken?: string | undefined;
    /**
     * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
     */
    pageSize?: number | undefined;
    /**
     * A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
     */
    chainId?: string | undefined;
    /**
     * A wallet address.
     */
    address: string;
};

export type ListErc20TransactionsResponse = {
    result: components.ListErc20TransactionsResponse;
};

/** @internal */
export const ListErc20TransactionsGlobals$inboundSchema: z.ZodType<
    ListErc20TransactionsGlobals,
    z.ZodTypeDef,
    unknown
> = z.object({
    chainId: z.string().optional(),
});

/** @internal */
export type ListErc20TransactionsGlobals$Outbound = {
    chainId?: string | undefined;
};

/** @internal */
export const ListErc20TransactionsGlobals$outboundSchema: z.ZodType<
    ListErc20TransactionsGlobals$Outbound,
    z.ZodTypeDef,
    ListErc20TransactionsGlobals
> = z.object({
    chainId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc20TransactionsGlobals$ {
    /** @deprecated use `ListErc20TransactionsGlobals$inboundSchema` instead. */
    export const inboundSchema = ListErc20TransactionsGlobals$inboundSchema;
    /** @deprecated use `ListErc20TransactionsGlobals$outboundSchema` instead. */
    export const outboundSchema = ListErc20TransactionsGlobals$outboundSchema;
    /** @deprecated use `ListErc20TransactionsGlobals$Outbound` instead. */
    export type Outbound = ListErc20TransactionsGlobals$Outbound;
}

/** @internal */
export const ListErc20TransactionsRequest$inboundSchema: z.ZodType<
    ListErc20TransactionsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    startBlock: z.number().optional(),
    endBlock: z.number().optional(),
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    chainId: z.string().optional(),
    address: z.string(),
});

/** @internal */
export type ListErc20TransactionsRequest$Outbound = {
    startBlock?: number | undefined;
    endBlock?: number | undefined;
    pageToken?: string | undefined;
    pageSize: number;
    chainId?: string | undefined;
    address: string;
};

/** @internal */
export const ListErc20TransactionsRequest$outboundSchema: z.ZodType<
    ListErc20TransactionsRequest$Outbound,
    z.ZodTypeDef,
    ListErc20TransactionsRequest
> = z.object({
    startBlock: z.number().optional(),
    endBlock: z.number().optional(),
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    chainId: z.string().optional(),
    address: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc20TransactionsRequest$ {
    /** @deprecated use `ListErc20TransactionsRequest$inboundSchema` instead. */
    export const inboundSchema = ListErc20TransactionsRequest$inboundSchema;
    /** @deprecated use `ListErc20TransactionsRequest$outboundSchema` instead. */
    export const outboundSchema = ListErc20TransactionsRequest$outboundSchema;
    /** @deprecated use `ListErc20TransactionsRequest$Outbound` instead. */
    export type Outbound = ListErc20TransactionsRequest$Outbound;
}

/** @internal */
export const ListErc20TransactionsResponse$inboundSchema: z.ZodType<
    ListErc20TransactionsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: components.ListErc20TransactionsResponse$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type ListErc20TransactionsResponse$Outbound = {
    Result: components.ListErc20TransactionsResponse$Outbound;
};

/** @internal */
export const ListErc20TransactionsResponse$outboundSchema: z.ZodType<
    ListErc20TransactionsResponse$Outbound,
    z.ZodTypeDef,
    ListErc20TransactionsResponse
> = z
    .object({
        result: components.ListErc20TransactionsResponse$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc20TransactionsResponse$ {
    /** @deprecated use `ListErc20TransactionsResponse$inboundSchema` instead. */
    export const inboundSchema = ListErc20TransactionsResponse$inboundSchema;
    /** @deprecated use `ListErc20TransactionsResponse$outboundSchema` instead. */
    export const outboundSchema = ListErc20TransactionsResponse$outboundSchema;
    /** @deprecated use `ListErc20TransactionsResponse$Outbound` instead. */
    export type Outbound = ListErc20TransactionsResponse$Outbound;
}
