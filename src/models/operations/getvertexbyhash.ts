/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetVertexByHashServerList = [
  "https://glacier-api.avax.network",
] as const;

export type GetVertexByHashGlobals = {
  /**
   * A supported network type mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
};

export type GetVertexByHashRequest = {
  /**
   * A vertex hash string.
   */
  vertexHash: string;
  /**
   * A primary network blockchain id or alias.
   */
  blockchainId: components.XChainId;
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
};

/** @internal */
export const GetVertexByHashGlobals$inboundSchema: z.ZodType<
  GetVertexByHashGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type GetVertexByHashGlobals$Outbound = {
  network?: string | undefined;
};

/** @internal */
export const GetVertexByHashGlobals$outboundSchema: z.ZodType<
  GetVertexByHashGlobals$Outbound,
  z.ZodTypeDef,
  GetVertexByHashGlobals
> = z.object({
  network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVertexByHashGlobals$ {
  /** @deprecated use `GetVertexByHashGlobals$inboundSchema` instead. */
  export const inboundSchema = GetVertexByHashGlobals$inboundSchema;
  /** @deprecated use `GetVertexByHashGlobals$outboundSchema` instead. */
  export const outboundSchema = GetVertexByHashGlobals$outboundSchema;
  /** @deprecated use `GetVertexByHashGlobals$Outbound` instead. */
  export type Outbound = GetVertexByHashGlobals$Outbound;
}

export function getVertexByHashGlobalsToJSON(
  getVertexByHashGlobals: GetVertexByHashGlobals,
): string {
  return JSON.stringify(
    GetVertexByHashGlobals$outboundSchema.parse(getVertexByHashGlobals),
  );
}

export function getVertexByHashGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetVertexByHashGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVertexByHashGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVertexByHashGlobals' from JSON`,
  );
}

/** @internal */
export const GetVertexByHashRequest$inboundSchema: z.ZodType<
  GetVertexByHashRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  vertexHash: z.string(),
  blockchainId: components.XChainId$inboundSchema,
  network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type GetVertexByHashRequest$Outbound = {
  vertexHash: string;
  blockchainId: string;
  network?: string | undefined;
};

/** @internal */
export const GetVertexByHashRequest$outboundSchema: z.ZodType<
  GetVertexByHashRequest$Outbound,
  z.ZodTypeDef,
  GetVertexByHashRequest
> = z.object({
  vertexHash: z.string(),
  blockchainId: components.XChainId$outboundSchema,
  network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetVertexByHashRequest$ {
  /** @deprecated use `GetVertexByHashRequest$inboundSchema` instead. */
  export const inboundSchema = GetVertexByHashRequest$inboundSchema;
  /** @deprecated use `GetVertexByHashRequest$outboundSchema` instead. */
  export const outboundSchema = GetVertexByHashRequest$outboundSchema;
  /** @deprecated use `GetVertexByHashRequest$Outbound` instead. */
  export type Outbound = GetVertexByHashRequest$Outbound;
}

export function getVertexByHashRequestToJSON(
  getVertexByHashRequest: GetVertexByHashRequest,
): string {
  return JSON.stringify(
    GetVertexByHashRequest$outboundSchema.parse(getVertexByHashRequest),
  );
}

export function getVertexByHashRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetVertexByHashRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetVertexByHashRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetVertexByHashRequest' from JSON`,
  );
}
