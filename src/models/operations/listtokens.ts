/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ListTokensRequest = {
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    pageToken?: string | undefined;
    /**
     * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
     */
    pageSize?: number | undefined;
    /**
     * A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
     */
    chainId: string;
    /**
     * Contract address on the relevant chain.
     */
    address: string;
};

export type ListTokensResponse = {
    result: components.ListNftTokens;
};

/** @internal */
export const ListTokensRequest$inboundSchema: z.ZodType<ListTokensRequest, z.ZodTypeDef, unknown> =
    z.object({
        pageToken: z.string().optional(),
        pageSize: z.number().int().default(10),
        chainId: z.string(),
        address: z.string(),
    });

/** @internal */
export type ListTokensRequest$Outbound = {
    pageToken?: string | undefined;
    pageSize: number;
    chainId: string;
    address: string;
};

/** @internal */
export const ListTokensRequest$outboundSchema: z.ZodType<
    ListTokensRequest$Outbound,
    z.ZodTypeDef,
    ListTokensRequest
> = z.object({
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    chainId: z.string(),
    address: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTokensRequest$ {
    /** @deprecated use `ListTokensRequest$inboundSchema` instead. */
    export const inboundSchema = ListTokensRequest$inboundSchema;
    /** @deprecated use `ListTokensRequest$outboundSchema` instead. */
    export const outboundSchema = ListTokensRequest$outboundSchema;
    /** @deprecated use `ListTokensRequest$Outbound` instead. */
    export type Outbound = ListTokensRequest$Outbound;
}

/** @internal */
export const ListTokensResponse$inboundSchema: z.ZodType<
    ListTokensResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: components.ListNftTokens$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type ListTokensResponse$Outbound = {
    Result: components.ListNftTokens$Outbound;
};

/** @internal */
export const ListTokensResponse$outboundSchema: z.ZodType<
    ListTokensResponse$Outbound,
    z.ZodTypeDef,
    ListTokensResponse
> = z
    .object({
        result: components.ListNftTokens$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTokensResponse$ {
    /** @deprecated use `ListTokensResponse$inboundSchema` instead. */
    export const inboundSchema = ListTokensResponse$inboundSchema;
    /** @deprecated use `ListTokensResponse$outboundSchema` instead. */
    export const outboundSchema = ListTokensResponse$outboundSchema;
    /** @deprecated use `ListTokensResponse$Outbound` instead. */
    export type Outbound = ListTokensResponse$Outbound;
}
