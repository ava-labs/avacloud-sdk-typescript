/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export const ListTokensServerList = [
  "https://glacier-api.avax.network",
] as const;

export type ListTokensGlobals = {
  /**
   * A supported EVM chain id, chain alias, or blockchain id.
   */
  chainId?: string | undefined;
};

export type ListTokensRequest = {
  /**
   * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
   */
  pageToken?: string | undefined;
  /**
   * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
   */
  pageSize?: number | undefined;
  /**
   * A supported evm chain id or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
   */
  chainId?: string | undefined;
  /**
   * Contract address on the relevant chain.
   */
  address: string;
};

export type ListTokensResponse = {
  result: components.ListNftTokens;
};

/** @internal */
export const ListTokensGlobals$inboundSchema: z.ZodType<
  ListTokensGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string().optional(),
});

/** @internal */
export type ListTokensGlobals$Outbound = {
  chainId?: string | undefined;
};

/** @internal */
export const ListTokensGlobals$outboundSchema: z.ZodType<
  ListTokensGlobals$Outbound,
  z.ZodTypeDef,
  ListTokensGlobals
> = z.object({
  chainId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTokensGlobals$ {
  /** @deprecated use `ListTokensGlobals$inboundSchema` instead. */
  export const inboundSchema = ListTokensGlobals$inboundSchema;
  /** @deprecated use `ListTokensGlobals$outboundSchema` instead. */
  export const outboundSchema = ListTokensGlobals$outboundSchema;
  /** @deprecated use `ListTokensGlobals$Outbound` instead. */
  export type Outbound = ListTokensGlobals$Outbound;
}

/** @internal */
export const ListTokensRequest$inboundSchema: z.ZodType<
  ListTokensRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  chainId: z.string().optional(),
  address: z.string(),
});

/** @internal */
export type ListTokensRequest$Outbound = {
  pageToken?: string | undefined;
  pageSize: number;
  chainId?: string | undefined;
  address: string;
};

/** @internal */
export const ListTokensRequest$outboundSchema: z.ZodType<
  ListTokensRequest$Outbound,
  z.ZodTypeDef,
  ListTokensRequest
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  chainId: z.string().optional(),
  address: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTokensRequest$ {
  /** @deprecated use `ListTokensRequest$inboundSchema` instead. */
  export const inboundSchema = ListTokensRequest$inboundSchema;
  /** @deprecated use `ListTokensRequest$outboundSchema` instead. */
  export const outboundSchema = ListTokensRequest$outboundSchema;
  /** @deprecated use `ListTokensRequest$Outbound` instead. */
  export type Outbound = ListTokensRequest$Outbound;
}

/** @internal */
export const ListTokensResponse$inboundSchema: z.ZodType<
  ListTokensResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListNftTokens$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListTokensResponse$Outbound = {
  Result: components.ListNftTokens$Outbound;
};

/** @internal */
export const ListTokensResponse$outboundSchema: z.ZodType<
  ListTokensResponse$Outbound,
  z.ZodTypeDef,
  ListTokensResponse
> = z.object({
  result: components.ListNftTokens$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTokensResponse$ {
  /** @deprecated use `ListTokensResponse$inboundSchema` instead. */
  export const inboundSchema = ListTokensResponse$inboundSchema;
  /** @deprecated use `ListTokensResponse$outboundSchema` instead. */
  export const outboundSchema = ListTokensResponse$outboundSchema;
  /** @deprecated use `ListTokensResponse$Outbound` instead. */
  export type Outbound = ListTokensResponse$Outbound;
}
