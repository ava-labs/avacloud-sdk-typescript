/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListIcmMessagesServerList = [
  "https://glacier-api.avax.network",
] as const;

export type ListIcmMessagesRequest = {
  /**
   * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
   */
  pageToken?: string | undefined;
  /**
   * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
   */
  pageSize?: number | undefined;
  /**
   * The base58 encoded blockchain ID or evm chain ID of the source chain that the ICM message was sent from.
   */
  sourceBlockchainId?: string | undefined;
  /**
   * The base58 encoded blockchain ID or evm chain ID of the destination chain that the ICM message was sent to.
   */
  destinationBlockchainId?: string | undefined;
  /**
   * The base58 encoded blockchain ID of either source or destination chain that one ICM message interacts with.
   */
  blockchainId?: string | undefined;
  /**
   * The address of the recipient of the ICM message.
   */
  to?: string | undefined;
  /**
   * The address of the sender of the ICM message.
   */
  from?: string | undefined;
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.Network | undefined;
};

export type ListIcmMessagesResponse = {
  result: components.ListIcmMessagesResponse;
};

/** @internal */
export const ListIcmMessagesRequest$inboundSchema: z.ZodType<
  ListIcmMessagesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  sourceBlockchainId: z.string().optional(),
  destinationBlockchainId: z.string().optional(),
  blockchainId: z.string().optional(),
  to: z.string().optional(),
  from: z.string().optional(),
  network: components.Network$inboundSchema.optional(),
});

/** @internal */
export type ListIcmMessagesRequest$Outbound = {
  pageToken?: string | undefined;
  pageSize: number;
  sourceBlockchainId?: string | undefined;
  destinationBlockchainId?: string | undefined;
  blockchainId?: string | undefined;
  to?: string | undefined;
  from?: string | undefined;
  network?: string | undefined;
};

/** @internal */
export const ListIcmMessagesRequest$outboundSchema: z.ZodType<
  ListIcmMessagesRequest$Outbound,
  z.ZodTypeDef,
  ListIcmMessagesRequest
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  sourceBlockchainId: z.string().optional(),
  destinationBlockchainId: z.string().optional(),
  blockchainId: z.string().optional(),
  to: z.string().optional(),
  from: z.string().optional(),
  network: components.Network$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIcmMessagesRequest$ {
  /** @deprecated use `ListIcmMessagesRequest$inboundSchema` instead. */
  export const inboundSchema = ListIcmMessagesRequest$inboundSchema;
  /** @deprecated use `ListIcmMessagesRequest$outboundSchema` instead. */
  export const outboundSchema = ListIcmMessagesRequest$outboundSchema;
  /** @deprecated use `ListIcmMessagesRequest$Outbound` instead. */
  export type Outbound = ListIcmMessagesRequest$Outbound;
}

export function listIcmMessagesRequestToJSON(
  listIcmMessagesRequest: ListIcmMessagesRequest,
): string {
  return JSON.stringify(
    ListIcmMessagesRequest$outboundSchema.parse(listIcmMessagesRequest),
  );
}

export function listIcmMessagesRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListIcmMessagesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIcmMessagesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIcmMessagesRequest' from JSON`,
  );
}

/** @internal */
export const ListIcmMessagesResponse$inboundSchema: z.ZodType<
  ListIcmMessagesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListIcmMessagesResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListIcmMessagesResponse$Outbound = {
  Result: components.ListIcmMessagesResponse$Outbound;
};

/** @internal */
export const ListIcmMessagesResponse$outboundSchema: z.ZodType<
  ListIcmMessagesResponse$Outbound,
  z.ZodTypeDef,
  ListIcmMessagesResponse
> = z.object({
  result: components.ListIcmMessagesResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListIcmMessagesResponse$ {
  /** @deprecated use `ListIcmMessagesResponse$inboundSchema` instead. */
  export const inboundSchema = ListIcmMessagesResponse$inboundSchema;
  /** @deprecated use `ListIcmMessagesResponse$outboundSchema` instead. */
  export const outboundSchema = ListIcmMessagesResponse$outboundSchema;
  /** @deprecated use `ListIcmMessagesResponse$Outbound` instead. */
  export type Outbound = ListIcmMessagesResponse$Outbound;
}

export function listIcmMessagesResponseToJSON(
  listIcmMessagesResponse: ListIcmMessagesResponse,
): string {
  return JSON.stringify(
    ListIcmMessagesResponse$outboundSchema.parse(listIcmMessagesResponse),
  );
}

export function listIcmMessagesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListIcmMessagesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListIcmMessagesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListIcmMessagesResponse' from JSON`,
  );
}
