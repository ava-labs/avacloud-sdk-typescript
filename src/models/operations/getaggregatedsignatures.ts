/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetAggregatedSignaturesServerList = [
  "https://glacier-api.avax.network",
] as const;

export type GetAggregatedSignaturesGlobals = {
  /**
   * A supported network type mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
};

export type GetAggregatedSignaturesRequest = {
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
  /**
   * A primary network (P or X chain) transaction hash.
   */
  txHash: string;
};

/** @internal */
export const GetAggregatedSignaturesGlobals$inboundSchema: z.ZodType<
  GetAggregatedSignaturesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type GetAggregatedSignaturesGlobals$Outbound = {
  network?: string | undefined;
};

/** @internal */
export const GetAggregatedSignaturesGlobals$outboundSchema: z.ZodType<
  GetAggregatedSignaturesGlobals$Outbound,
  z.ZodTypeDef,
  GetAggregatedSignaturesGlobals
> = z.object({
  network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAggregatedSignaturesGlobals$ {
  /** @deprecated use `GetAggregatedSignaturesGlobals$inboundSchema` instead. */
  export const inboundSchema = GetAggregatedSignaturesGlobals$inboundSchema;
  /** @deprecated use `GetAggregatedSignaturesGlobals$outboundSchema` instead. */
  export const outboundSchema = GetAggregatedSignaturesGlobals$outboundSchema;
  /** @deprecated use `GetAggregatedSignaturesGlobals$Outbound` instead. */
  export type Outbound = GetAggregatedSignaturesGlobals$Outbound;
}

export function getAggregatedSignaturesGlobalsToJSON(
  getAggregatedSignaturesGlobals: GetAggregatedSignaturesGlobals,
): string {
  return JSON.stringify(
    GetAggregatedSignaturesGlobals$outboundSchema.parse(
      getAggregatedSignaturesGlobals,
    ),
  );
}

export function getAggregatedSignaturesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetAggregatedSignaturesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAggregatedSignaturesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAggregatedSignaturesGlobals' from JSON`,
  );
}

/** @internal */
export const GetAggregatedSignaturesRequest$inboundSchema: z.ZodType<
  GetAggregatedSignaturesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: components.GlobalParamNetwork$inboundSchema.optional(),
  txHash: z.string(),
});

/** @internal */
export type GetAggregatedSignaturesRequest$Outbound = {
  network?: string | undefined;
  txHash: string;
};

/** @internal */
export const GetAggregatedSignaturesRequest$outboundSchema: z.ZodType<
  GetAggregatedSignaturesRequest$Outbound,
  z.ZodTypeDef,
  GetAggregatedSignaturesRequest
> = z.object({
  network: components.GlobalParamNetwork$outboundSchema.optional(),
  txHash: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAggregatedSignaturesRequest$ {
  /** @deprecated use `GetAggregatedSignaturesRequest$inboundSchema` instead. */
  export const inboundSchema = GetAggregatedSignaturesRequest$inboundSchema;
  /** @deprecated use `GetAggregatedSignaturesRequest$outboundSchema` instead. */
  export const outboundSchema = GetAggregatedSignaturesRequest$outboundSchema;
  /** @deprecated use `GetAggregatedSignaturesRequest$Outbound` instead. */
  export type Outbound = GetAggregatedSignaturesRequest$Outbound;
}

export function getAggregatedSignaturesRequestToJSON(
  getAggregatedSignaturesRequest: GetAggregatedSignaturesRequest,
): string {
  return JSON.stringify(
    GetAggregatedSignaturesRequest$outboundSchema.parse(
      getAggregatedSignaturesRequest,
    ),
  );
}

export function getAggregatedSignaturesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAggregatedSignaturesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAggregatedSignaturesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAggregatedSignaturesRequest' from JSON`,
  );
}
