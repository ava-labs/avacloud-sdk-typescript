/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListInternalTransactionsServerList = [
  "https://glacier-api.avax.network",
] as const;

export type ListInternalTransactionsGlobals = {
  /**
   * A supported EVM chain id, chain alias, or blockchain id.
   */
  chainId?: string | undefined;
};

export type ListInternalTransactionsRequest = {
  /**
   * The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block.
   */
  startBlock?: number | undefined;
  /**
   * The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block.
   */
  endBlock?: number | undefined;
  /**
   * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
   */
  pageToken?: string | undefined;
  /**
   * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
   */
  pageSize?: number | undefined;
  /**
   * A supported evm chain id or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
   */
  chainId?: string | undefined;
  /**
   * A wallet address.
   */
  address: string;
};

export type ListInternalTransactionsResponse = {
  result: components.ListInternalTransactionsResponse;
};

/** @internal */
export const ListInternalTransactionsGlobals$inboundSchema: z.ZodType<
  ListInternalTransactionsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string().optional(),
});

/** @internal */
export type ListInternalTransactionsGlobals$Outbound = {
  chainId?: string | undefined;
};

/** @internal */
export const ListInternalTransactionsGlobals$outboundSchema: z.ZodType<
  ListInternalTransactionsGlobals$Outbound,
  z.ZodTypeDef,
  ListInternalTransactionsGlobals
> = z.object({
  chainId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInternalTransactionsGlobals$ {
  /** @deprecated use `ListInternalTransactionsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListInternalTransactionsGlobals$inboundSchema;
  /** @deprecated use `ListInternalTransactionsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListInternalTransactionsGlobals$outboundSchema;
  /** @deprecated use `ListInternalTransactionsGlobals$Outbound` instead. */
  export type Outbound = ListInternalTransactionsGlobals$Outbound;
}

export function listInternalTransactionsGlobalsToJSON(
  listInternalTransactionsGlobals: ListInternalTransactionsGlobals,
): string {
  return JSON.stringify(
    ListInternalTransactionsGlobals$outboundSchema.parse(
      listInternalTransactionsGlobals,
    ),
  );
}

export function listInternalTransactionsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListInternalTransactionsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInternalTransactionsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInternalTransactionsGlobals' from JSON`,
  );
}

/** @internal */
export const ListInternalTransactionsRequest$inboundSchema: z.ZodType<
  ListInternalTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  startBlock: z.number().optional(),
  endBlock: z.number().optional(),
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  chainId: z.string().optional(),
  address: z.string(),
});

/** @internal */
export type ListInternalTransactionsRequest$Outbound = {
  startBlock?: number | undefined;
  endBlock?: number | undefined;
  pageToken?: string | undefined;
  pageSize: number;
  chainId?: string | undefined;
  address: string;
};

/** @internal */
export const ListInternalTransactionsRequest$outboundSchema: z.ZodType<
  ListInternalTransactionsRequest$Outbound,
  z.ZodTypeDef,
  ListInternalTransactionsRequest
> = z.object({
  startBlock: z.number().optional(),
  endBlock: z.number().optional(),
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  chainId: z.string().optional(),
  address: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInternalTransactionsRequest$ {
  /** @deprecated use `ListInternalTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListInternalTransactionsRequest$inboundSchema;
  /** @deprecated use `ListInternalTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListInternalTransactionsRequest$outboundSchema;
  /** @deprecated use `ListInternalTransactionsRequest$Outbound` instead. */
  export type Outbound = ListInternalTransactionsRequest$Outbound;
}

export function listInternalTransactionsRequestToJSON(
  listInternalTransactionsRequest: ListInternalTransactionsRequest,
): string {
  return JSON.stringify(
    ListInternalTransactionsRequest$outboundSchema.parse(
      listInternalTransactionsRequest,
    ),
  );
}

export function listInternalTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListInternalTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInternalTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInternalTransactionsRequest' from JSON`,
  );
}

/** @internal */
export const ListInternalTransactionsResponse$inboundSchema: z.ZodType<
  ListInternalTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListInternalTransactionsResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListInternalTransactionsResponse$Outbound = {
  Result: components.ListInternalTransactionsResponse$Outbound;
};

/** @internal */
export const ListInternalTransactionsResponse$outboundSchema: z.ZodType<
  ListInternalTransactionsResponse$Outbound,
  z.ZodTypeDef,
  ListInternalTransactionsResponse
> = z.object({
  result: components.ListInternalTransactionsResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListInternalTransactionsResponse$ {
  /** @deprecated use `ListInternalTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListInternalTransactionsResponse$inboundSchema;
  /** @deprecated use `ListInternalTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListInternalTransactionsResponse$outboundSchema;
  /** @deprecated use `ListInternalTransactionsResponse$Outbound` instead. */
  export type Outbound = ListInternalTransactionsResponse$Outbound;
}

export function listInternalTransactionsResponseToJSON(
  listInternalTransactionsResponse: ListInternalTransactionsResponse,
): string {
  return JSON.stringify(
    ListInternalTransactionsResponse$outboundSchema.parse(
      listInternalTransactionsResponse,
    ),
  );
}

export function listInternalTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListInternalTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListInternalTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListInternalTransactionsResponse' from JSON`,
  );
}
