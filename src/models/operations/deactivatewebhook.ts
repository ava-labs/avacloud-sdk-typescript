/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DeactivateWebhookServerList = [
  "https://glacier-api.avax.network",
] as const;

export type DeactivateWebhookRequest = {
  /**
   * The webhook identifier.
   */
  id: string;
};

/**
 * Successful response
 */
export type DeactivateWebhookResponseBody =
  | components.EVMAddressActivityResponse
  | components.PrimaryNetworkAddressActivityResponse
  | components.ValidatorActivityResponse;

/** @internal */
export const DeactivateWebhookRequest$inboundSchema: z.ZodType<
  DeactivateWebhookRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeactivateWebhookRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeactivateWebhookRequest$outboundSchema: z.ZodType<
  DeactivateWebhookRequest$Outbound,
  z.ZodTypeDef,
  DeactivateWebhookRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeactivateWebhookRequest$ {
  /** @deprecated use `DeactivateWebhookRequest$inboundSchema` instead. */
  export const inboundSchema = DeactivateWebhookRequest$inboundSchema;
  /** @deprecated use `DeactivateWebhookRequest$outboundSchema` instead. */
  export const outboundSchema = DeactivateWebhookRequest$outboundSchema;
  /** @deprecated use `DeactivateWebhookRequest$Outbound` instead. */
  export type Outbound = DeactivateWebhookRequest$Outbound;
}

export function deactivateWebhookRequestToJSON(
  deactivateWebhookRequest: DeactivateWebhookRequest,
): string {
  return JSON.stringify(
    DeactivateWebhookRequest$outboundSchema.parse(deactivateWebhookRequest),
  );
}

export function deactivateWebhookRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeactivateWebhookRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeactivateWebhookRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeactivateWebhookRequest' from JSON`,
  );
}

/** @internal */
export const DeactivateWebhookResponseBody$inboundSchema: z.ZodType<
  DeactivateWebhookResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.EVMAddressActivityResponse$inboundSchema,
  components.PrimaryNetworkAddressActivityResponse$inboundSchema,
  components.ValidatorActivityResponse$inboundSchema,
]);

/** @internal */
export type DeactivateWebhookResponseBody$Outbound =
  | components.EVMAddressActivityResponse$Outbound
  | components.PrimaryNetworkAddressActivityResponse$Outbound
  | components.ValidatorActivityResponse$Outbound;

/** @internal */
export const DeactivateWebhookResponseBody$outboundSchema: z.ZodType<
  DeactivateWebhookResponseBody$Outbound,
  z.ZodTypeDef,
  DeactivateWebhookResponseBody
> = z.union([
  components.EVMAddressActivityResponse$outboundSchema,
  components.PrimaryNetworkAddressActivityResponse$outboundSchema,
  components.ValidatorActivityResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeactivateWebhookResponseBody$ {
  /** @deprecated use `DeactivateWebhookResponseBody$inboundSchema` instead. */
  export const inboundSchema = DeactivateWebhookResponseBody$inboundSchema;
  /** @deprecated use `DeactivateWebhookResponseBody$outboundSchema` instead. */
  export const outboundSchema = DeactivateWebhookResponseBody$outboundSchema;
  /** @deprecated use `DeactivateWebhookResponseBody$Outbound` instead. */
  export type Outbound = DeactivateWebhookResponseBody$Outbound;
}

export function deactivateWebhookResponseBodyToJSON(
  deactivateWebhookResponseBody: DeactivateWebhookResponseBody,
): string {
  return JSON.stringify(
    DeactivateWebhookResponseBody$outboundSchema.parse(
      deactivateWebhookResponseBody,
    ),
  );
}

export function deactivateWebhookResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeactivateWebhookResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeactivateWebhookResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeactivateWebhookResponseBody' from JSON`,
  );
}
