/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export const ListValidatorsServerList = ["https://glacier-api.avax.network"] as const;

export type ListValidatorsGlobals = {
    /**
     * A supported network type mainnet or a testnet.
     */
    network?: components.GlobalParamNetwork | undefined;
};

export type ListValidatorsRequest = {
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    pageToken?: string | undefined;
    /**
     * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
     */
    pageSize?: number | undefined;
    /**
     * Either mainnet or a testnet.
     */
    network?: components.GlobalParamNetwork | undefined;
    /**
     * A comma separated list of node ids to filter by.
     */
    nodeIds?: string | undefined;
    /**
     * Which property to sort by, in conjunction with sortOrder.
     *
     * @remarks
     *
     * Note: Delegation fee is only available for mainnet validators. Set `subnetId` to `11111111111111111111111111111111LpoYY`  to use this option.
     */
    sortBy?: components.SortByOption | undefined;
    /**
     * The order by which to sort results. Use "asc" for ascending order, "desc" for descending order. Sorted by timestamp or the `sortBy` query parameter, if provided.
     */
    sortOrder?: components.SortOrder | undefined;
    /**
     * Validation status of the node.
     */
    validationStatus?: components.ValidationStatusType | undefined;
    /**
     * The minimum delegation capacity, in nAVAX, used to filter the set of nodes being returned. Accepts values between 0 and 720,000,000,000,000,000
     */
    minDelegationCapacity?: string | undefined;
    /**
     * The maximum delegation capacity, in nAVAX, used to filter the set of nodes being returned. Accepts values between 0 and 720,000,000,000,000,000.
     */
    maxDelegationCapacity?: string | undefined;
    /**
     * The minimum validation time remaining, in seconds, used to filter the set of nodes being returned.
     */
    minTimeRemaining?: number | undefined;
    /**
     * The maximum validation time remaining, in seconds, used to filter the set of nodes being returned.
     */
    maxTimeRemaining?: number | undefined;
    /**
     * The minimum fee percentage, used to filter the set of nodes being returned. If this field is populated no subnet validations will be returned, as their fee percentage is null, since subnet delegations are not supported. Default is 2.0, as per the Avalanche spec.
     */
    minFeePercentage?: number | undefined;
    /**
     * The maximum fee percentage, used to filter the set of nodes being returned. If this field is populated no subnet validations will be returned, as their fee percentage is null, since subnet delegations are not supported. Default is 100.0.
     */
    maxFeePercentage?: number | undefined;
    /**
     * The minimum node uptime performance percentage, which represents node health, used to filter the set of nodes being returned Default is 90.
     */
    minUptimePerformance?: number | undefined;
    /**
     * The maximum node uptime performance percentage, which represents node health, used to filter the set of nodes being returned. Default is 100.
     */
    maxUptimePerformance?: number | undefined;
    /**
     * The subnet ID to filter by. If not provided, then all subnets will be returned.
     */
    subnetId?: any | undefined;
};

export type ListValidatorsResponse = {
    result: components.ListValidatorDetailsResponse;
};

/** @internal */
export const ListValidatorsGlobals$inboundSchema: z.ZodType<
    ListValidatorsGlobals,
    z.ZodTypeDef,
    unknown
> = z.object({
    network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type ListValidatorsGlobals$Outbound = {
    network?: string | undefined;
};

/** @internal */
export const ListValidatorsGlobals$outboundSchema: z.ZodType<
    ListValidatorsGlobals$Outbound,
    z.ZodTypeDef,
    ListValidatorsGlobals
> = z.object({
    network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListValidatorsGlobals$ {
    /** @deprecated use `ListValidatorsGlobals$inboundSchema` instead. */
    export const inboundSchema = ListValidatorsGlobals$inboundSchema;
    /** @deprecated use `ListValidatorsGlobals$outboundSchema` instead. */
    export const outboundSchema = ListValidatorsGlobals$outboundSchema;
    /** @deprecated use `ListValidatorsGlobals$Outbound` instead. */
    export type Outbound = ListValidatorsGlobals$Outbound;
}

/** @internal */
export const ListValidatorsRequest$inboundSchema: z.ZodType<
    ListValidatorsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    network: components.GlobalParamNetwork$inboundSchema.optional(),
    nodeIds: z.string().optional(),
    sortBy: components.SortByOption$inboundSchema.optional(),
    sortOrder: components.SortOrder$inboundSchema.optional(),
    validationStatus: components.ValidationStatusType$inboundSchema.optional(),
    minDelegationCapacity: z.string().optional(),
    maxDelegationCapacity: z.string().optional(),
    minTimeRemaining: z.number().optional(),
    maxTimeRemaining: z.number().optional(),
    minFeePercentage: z.number().optional(),
    maxFeePercentage: z.number().optional(),
    minUptimePerformance: z.number().optional(),
    maxUptimePerformance: z.number().optional(),
    subnetId: z.any().optional(),
});

/** @internal */
export type ListValidatorsRequest$Outbound = {
    pageToken?: string | undefined;
    pageSize: number;
    network?: string | undefined;
    nodeIds?: string | undefined;
    sortBy?: string | undefined;
    sortOrder?: string | undefined;
    validationStatus?: string | undefined;
    minDelegationCapacity?: string | undefined;
    maxDelegationCapacity?: string | undefined;
    minTimeRemaining?: number | undefined;
    maxTimeRemaining?: number | undefined;
    minFeePercentage?: number | undefined;
    maxFeePercentage?: number | undefined;
    minUptimePerformance?: number | undefined;
    maxUptimePerformance?: number | undefined;
    subnetId?: any | undefined;
};

/** @internal */
export const ListValidatorsRequest$outboundSchema: z.ZodType<
    ListValidatorsRequest$Outbound,
    z.ZodTypeDef,
    ListValidatorsRequest
> = z.object({
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    network: components.GlobalParamNetwork$outboundSchema.optional(),
    nodeIds: z.string().optional(),
    sortBy: components.SortByOption$outboundSchema.optional(),
    sortOrder: components.SortOrder$outboundSchema.optional(),
    validationStatus: components.ValidationStatusType$outboundSchema.optional(),
    minDelegationCapacity: z.string().optional(),
    maxDelegationCapacity: z.string().optional(),
    minTimeRemaining: z.number().optional(),
    maxTimeRemaining: z.number().optional(),
    minFeePercentage: z.number().optional(),
    maxFeePercentage: z.number().optional(),
    minUptimePerformance: z.number().optional(),
    maxUptimePerformance: z.number().optional(),
    subnetId: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListValidatorsRequest$ {
    /** @deprecated use `ListValidatorsRequest$inboundSchema` instead. */
    export const inboundSchema = ListValidatorsRequest$inboundSchema;
    /** @deprecated use `ListValidatorsRequest$outboundSchema` instead. */
    export const outboundSchema = ListValidatorsRequest$outboundSchema;
    /** @deprecated use `ListValidatorsRequest$Outbound` instead. */
    export type Outbound = ListValidatorsRequest$Outbound;
}

/** @internal */
export const ListValidatorsResponse$inboundSchema: z.ZodType<
    ListValidatorsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: components.ListValidatorDetailsResponse$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type ListValidatorsResponse$Outbound = {
    Result: components.ListValidatorDetailsResponse$Outbound;
};

/** @internal */
export const ListValidatorsResponse$outboundSchema: z.ZodType<
    ListValidatorsResponse$Outbound,
    z.ZodTypeDef,
    ListValidatorsResponse
> = z
    .object({
        result: components.ListValidatorDetailsResponse$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListValidatorsResponse$ {
    /** @deprecated use `ListValidatorsResponse$inboundSchema` instead. */
    export const inboundSchema = ListValidatorsResponse$inboundSchema;
    /** @deprecated use `ListValidatorsResponse$outboundSchema` instead. */
    export const outboundSchema = ListValidatorsResponse$outboundSchema;
    /** @deprecated use `ListValidatorsResponse$Outbound` instead. */
    export type Outbound = ListValidatorsResponse$Outbound;
}
