/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type ListWebhooksRequest = {
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    pageToken?: string | undefined;
    /**
     * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
     */
    pageSize?: number | undefined;
    /**
     * Status of the webhook. Use "active" to return only active webhooks, "inactive" to return only inactive webhooks. Else if no status is provided, all configured webhooks will be returned.
     */
    status?: components.WebhookStatus | undefined;
};

/** @internal */
export const ListWebhooksRequest$inboundSchema: z.ZodType<
    ListWebhooksRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    status: components.WebhookStatus$inboundSchema.optional(),
});

/** @internal */
export type ListWebhooksRequest$Outbound = {
    pageToken?: string | undefined;
    pageSize: number;
    status?: string | undefined;
};

/** @internal */
export const ListWebhooksRequest$outboundSchema: z.ZodType<
    ListWebhooksRequest$Outbound,
    z.ZodTypeDef,
    ListWebhooksRequest
> = z.object({
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    status: components.WebhookStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWebhooksRequest$ {
    /** @deprecated use `ListWebhooksRequest$inboundSchema` instead. */
    export const inboundSchema = ListWebhooksRequest$inboundSchema;
    /** @deprecated use `ListWebhooksRequest$outboundSchema` instead. */
    export const outboundSchema = ListWebhooksRequest$outboundSchema;
    /** @deprecated use `ListWebhooksRequest$Outbound` instead. */
    export type Outbound = ListWebhooksRequest$Outbound;
}
