/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export const GetStakingMetricsServerList = ["http://localhost:3001"] as const;

export type GetStakingMetricsRequest = {
    /**
     * Query param for retrieving items after a specific timestamp.
     */
    startTimestamp?: number | undefined;
    /**
     * Query param for retrieving items before a specific timestamp.
     */
    endTimestamp?: number | undefined;
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    pageToken?: string | undefined;
    /**
     * Which network level metric to fetch.
     */
    metric: components.NetworkMetric;
    /**
     * mainnet or testnet.
     */
    network: components.NetworkType;
    /**
     * The subnet ID to filter by. If not provided, then all subnets will be returned.
     */
    subnetId?: any | undefined;
};

export type GetStakingMetricsResponse = {
    result: components.MetricsApiResponse;
};

/** @internal */
export const GetStakingMetricsRequest$inboundSchema: z.ZodType<
    GetStakingMetricsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    startTimestamp: z.number().int().optional(),
    endTimestamp: z.number().int().optional(),
    pageToken: z.string().optional(),
    metric: components.NetworkMetric$inboundSchema,
    network: components.NetworkType$inboundSchema,
    subnetId: z.any().optional(),
});

/** @internal */
export type GetStakingMetricsRequest$Outbound = {
    startTimestamp?: number | undefined;
    endTimestamp?: number | undefined;
    pageToken?: string | undefined;
    metric: string;
    network: string;
    subnetId?: any | undefined;
};

/** @internal */
export const GetStakingMetricsRequest$outboundSchema: z.ZodType<
    GetStakingMetricsRequest$Outbound,
    z.ZodTypeDef,
    GetStakingMetricsRequest
> = z.object({
    startTimestamp: z.number().int().optional(),
    endTimestamp: z.number().int().optional(),
    pageToken: z.string().optional(),
    metric: components.NetworkMetric$outboundSchema,
    network: components.NetworkType$outboundSchema,
    subnetId: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStakingMetricsRequest$ {
    /** @deprecated use `GetStakingMetricsRequest$inboundSchema` instead. */
    export const inboundSchema = GetStakingMetricsRequest$inboundSchema;
    /** @deprecated use `GetStakingMetricsRequest$outboundSchema` instead. */
    export const outboundSchema = GetStakingMetricsRequest$outboundSchema;
    /** @deprecated use `GetStakingMetricsRequest$Outbound` instead. */
    export type Outbound = GetStakingMetricsRequest$Outbound;
}

/** @internal */
export const GetStakingMetricsResponse$inboundSchema: z.ZodType<
    GetStakingMetricsResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        Result: components.MetricsApiResponse$inboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            Result: "result",
        });
    });

/** @internal */
export type GetStakingMetricsResponse$Outbound = {
    Result: components.MetricsApiResponse$Outbound;
};

/** @internal */
export const GetStakingMetricsResponse$outboundSchema: z.ZodType<
    GetStakingMetricsResponse$Outbound,
    z.ZodTypeDef,
    GetStakingMetricsResponse
> = z
    .object({
        result: components.MetricsApiResponse$outboundSchema,
    })
    .transform((v) => {
        return remap$(v, {
            result: "Result",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStakingMetricsResponse$ {
    /** @deprecated use `GetStakingMetricsResponse$inboundSchema` instead. */
    export const inboundSchema = GetStakingMetricsResponse$inboundSchema;
    /** @deprecated use `GetStakingMetricsResponse$outboundSchema` instead. */
    export const outboundSchema = GetStakingMetricsResponse$outboundSchema;
    /** @deprecated use `GetStakingMetricsResponse$Outbound` instead. */
    export type Outbound = GetStakingMetricsResponse$Outbound;
}
