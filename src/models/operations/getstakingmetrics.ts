/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetStakingMetricsServerList = [
  "https://metrics.avax.network",
] as const;

export type GetStakingMetricsGlobals = {
  /**
   * A supported network type mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
};

export type GetStakingMetricsRequest = {
  /**
   * Which network level metric to fetch.
   */
  metric: components.NetworkMetric;
  /**
   * Query param for retrieving items after a specific timestamp.
   */
  startTimestamp?: number | undefined;
  /**
   * Query param for retrieving items before a specific timestamp.
   */
  endTimestamp?: number | undefined;
  /**
   * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
   */
  pageToken?: string | undefined;
  /**
   * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 2160.
   */
  pageSize?: number | undefined;
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
  /**
   * The subnet ID to filter by. If not provided, then all subnets will be returned.
   */
  subnetId?: any | undefined;
};

export type GetStakingMetricsResponse = {
  result: components.MetricsApiResponse;
};

/** @internal */
export const GetStakingMetricsGlobals$inboundSchema: z.ZodType<
  GetStakingMetricsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type GetStakingMetricsGlobals$Outbound = {
  network?: string | undefined;
};

/** @internal */
export const GetStakingMetricsGlobals$outboundSchema: z.ZodType<
  GetStakingMetricsGlobals$Outbound,
  z.ZodTypeDef,
  GetStakingMetricsGlobals
> = z.object({
  network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStakingMetricsGlobals$ {
  /** @deprecated use `GetStakingMetricsGlobals$inboundSchema` instead. */
  export const inboundSchema = GetStakingMetricsGlobals$inboundSchema;
  /** @deprecated use `GetStakingMetricsGlobals$outboundSchema` instead. */
  export const outboundSchema = GetStakingMetricsGlobals$outboundSchema;
  /** @deprecated use `GetStakingMetricsGlobals$Outbound` instead. */
  export type Outbound = GetStakingMetricsGlobals$Outbound;
}

export function getStakingMetricsGlobalsToJSON(
  getStakingMetricsGlobals: GetStakingMetricsGlobals,
): string {
  return JSON.stringify(
    GetStakingMetricsGlobals$outboundSchema.parse(getStakingMetricsGlobals),
  );
}

export function getStakingMetricsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetStakingMetricsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStakingMetricsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStakingMetricsGlobals' from JSON`,
  );
}

/** @internal */
export const GetStakingMetricsRequest$inboundSchema: z.ZodType<
  GetStakingMetricsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  metric: components.NetworkMetric$inboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(100),
  network: components.GlobalParamNetwork$inboundSchema.optional(),
  subnetId: z.any(),
});

/** @internal */
export type GetStakingMetricsRequest$Outbound = {
  metric: string;
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
  pageToken?: string | undefined;
  pageSize: number;
  network?: string | undefined;
  subnetId?: any;
};

/** @internal */
export const GetStakingMetricsRequest$outboundSchema: z.ZodType<
  GetStakingMetricsRequest$Outbound,
  z.ZodTypeDef,
  GetStakingMetricsRequest
> = z.object({
  metric: components.NetworkMetric$outboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(100),
  network: components.GlobalParamNetwork$outboundSchema.optional(),
  subnetId: z.any(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStakingMetricsRequest$ {
  /** @deprecated use `GetStakingMetricsRequest$inboundSchema` instead. */
  export const inboundSchema = GetStakingMetricsRequest$inboundSchema;
  /** @deprecated use `GetStakingMetricsRequest$outboundSchema` instead. */
  export const outboundSchema = GetStakingMetricsRequest$outboundSchema;
  /** @deprecated use `GetStakingMetricsRequest$Outbound` instead. */
  export type Outbound = GetStakingMetricsRequest$Outbound;
}

export function getStakingMetricsRequestToJSON(
  getStakingMetricsRequest: GetStakingMetricsRequest,
): string {
  return JSON.stringify(
    GetStakingMetricsRequest$outboundSchema.parse(getStakingMetricsRequest),
  );
}

export function getStakingMetricsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStakingMetricsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStakingMetricsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStakingMetricsRequest' from JSON`,
  );
}

/** @internal */
export const GetStakingMetricsResponse$inboundSchema: z.ZodType<
  GetStakingMetricsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.MetricsApiResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetStakingMetricsResponse$Outbound = {
  Result: components.MetricsApiResponse$Outbound;
};

/** @internal */
export const GetStakingMetricsResponse$outboundSchema: z.ZodType<
  GetStakingMetricsResponse$Outbound,
  z.ZodTypeDef,
  GetStakingMetricsResponse
> = z.object({
  result: components.MetricsApiResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStakingMetricsResponse$ {
  /** @deprecated use `GetStakingMetricsResponse$inboundSchema` instead. */
  export const inboundSchema = GetStakingMetricsResponse$inboundSchema;
  /** @deprecated use `GetStakingMetricsResponse$outboundSchema` instead. */
  export const outboundSchema = GetStakingMetricsResponse$outboundSchema;
  /** @deprecated use `GetStakingMetricsResponse$Outbound` instead. */
  export type Outbound = GetStakingMetricsResponse$Outbound;
}

export function getStakingMetricsResponseToJSON(
  getStakingMetricsResponse: GetStakingMetricsResponse,
): string {
  return JSON.stringify(
    GetStakingMetricsResponse$outboundSchema.parse(getStakingMetricsResponse),
  );
}

export function getStakingMetricsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStakingMetricsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStakingMetricsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStakingMetricsResponse' from JSON`,
  );
}
