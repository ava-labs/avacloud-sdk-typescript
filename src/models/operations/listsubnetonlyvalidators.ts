/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export const ListSubnetOnlyValidatorsServerList = [
  "https://glacier-api.avax.network",
] as const;

export type ListSubnetOnlyValidatorsGlobals = {
  /**
   * A supported network type mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
};

export type ListSubnetOnlyValidatorsRequest = {
  /**
   * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
   */
  pageToken?: string | undefined;
  /**
   * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
   */
  pageSize?: number | undefined;
  /**
   * The Subnet-only-Validator validation ID to filter by. If not provided, then all Subnet-only-Validators will be returned.
   */
  sovValidationId?: any | undefined;
  includeInactiveSovs?: boolean | undefined;
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
  /**
   * A valid node ID in format 'NodeID-HASH'.
   */
  nodeId?: string | undefined;
  /**
   * The subnet ID to filter by. If not provided, then all subnets will be returned.
   */
  subnetId?: any | undefined;
};

export type ListSubnetOnlyValidatorsResponse = {
  result: components.ListSubnetOnlyValidatorsResponse;
};

/** @internal */
export const ListSubnetOnlyValidatorsGlobals$inboundSchema: z.ZodType<
  ListSubnetOnlyValidatorsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type ListSubnetOnlyValidatorsGlobals$Outbound = {
  network?: string | undefined;
};

/** @internal */
export const ListSubnetOnlyValidatorsGlobals$outboundSchema: z.ZodType<
  ListSubnetOnlyValidatorsGlobals$Outbound,
  z.ZodTypeDef,
  ListSubnetOnlyValidatorsGlobals
> = z.object({
  network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSubnetOnlyValidatorsGlobals$ {
  /** @deprecated use `ListSubnetOnlyValidatorsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListSubnetOnlyValidatorsGlobals$inboundSchema;
  /** @deprecated use `ListSubnetOnlyValidatorsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListSubnetOnlyValidatorsGlobals$outboundSchema;
  /** @deprecated use `ListSubnetOnlyValidatorsGlobals$Outbound` instead. */
  export type Outbound = ListSubnetOnlyValidatorsGlobals$Outbound;
}

/** @internal */
export const ListSubnetOnlyValidatorsRequest$inboundSchema: z.ZodType<
  ListSubnetOnlyValidatorsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  sovValidationId: z.any().optional(),
  includeInactiveSovs: z.boolean().optional(),
  network: components.GlobalParamNetwork$inboundSchema.optional(),
  nodeId: z.string().optional(),
  subnetId: z.any().optional(),
});

/** @internal */
export type ListSubnetOnlyValidatorsRequest$Outbound = {
  pageToken?: string | undefined;
  pageSize: number;
  sovValidationId?: any | undefined;
  includeInactiveSovs?: boolean | undefined;
  network?: string | undefined;
  nodeId?: string | undefined;
  subnetId?: any | undefined;
};

/** @internal */
export const ListSubnetOnlyValidatorsRequest$outboundSchema: z.ZodType<
  ListSubnetOnlyValidatorsRequest$Outbound,
  z.ZodTypeDef,
  ListSubnetOnlyValidatorsRequest
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  sovValidationId: z.any().optional(),
  includeInactiveSovs: z.boolean().optional(),
  network: components.GlobalParamNetwork$outboundSchema.optional(),
  nodeId: z.string().optional(),
  subnetId: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSubnetOnlyValidatorsRequest$ {
  /** @deprecated use `ListSubnetOnlyValidatorsRequest$inboundSchema` instead. */
  export const inboundSchema = ListSubnetOnlyValidatorsRequest$inboundSchema;
  /** @deprecated use `ListSubnetOnlyValidatorsRequest$outboundSchema` instead. */
  export const outboundSchema = ListSubnetOnlyValidatorsRequest$outboundSchema;
  /** @deprecated use `ListSubnetOnlyValidatorsRequest$Outbound` instead. */
  export type Outbound = ListSubnetOnlyValidatorsRequest$Outbound;
}

/** @internal */
export const ListSubnetOnlyValidatorsResponse$inboundSchema: z.ZodType<
  ListSubnetOnlyValidatorsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListSubnetOnlyValidatorsResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListSubnetOnlyValidatorsResponse$Outbound = {
  Result: components.ListSubnetOnlyValidatorsResponse$Outbound;
};

/** @internal */
export const ListSubnetOnlyValidatorsResponse$outboundSchema: z.ZodType<
  ListSubnetOnlyValidatorsResponse$Outbound,
  z.ZodTypeDef,
  ListSubnetOnlyValidatorsResponse
> = z.object({
  result: components.ListSubnetOnlyValidatorsResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSubnetOnlyValidatorsResponse$ {
  /** @deprecated use `ListSubnetOnlyValidatorsResponse$inboundSchema` instead. */
  export const inboundSchema = ListSubnetOnlyValidatorsResponse$inboundSchema;
  /** @deprecated use `ListSubnetOnlyValidatorsResponse$outboundSchema` instead. */
  export const outboundSchema = ListSubnetOnlyValidatorsResponse$outboundSchema;
  /** @deprecated use `ListSubnetOnlyValidatorsResponse$Outbound` instead. */
  export type Outbound = ListSubnetOnlyValidatorsResponse$Outbound;
}
