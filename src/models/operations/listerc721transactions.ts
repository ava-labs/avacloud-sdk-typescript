/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ListErc721TransactionsServerList = [
  "https://glacier-api.avax.network",
] as const;

export type ListErc721TransactionsGlobals = {
  /**
   * A supported EVM chain id, chain alias, or blockchain id.
   */
  chainId?: string | undefined;
};

export type ListErc721TransactionsRequest = {
  /**
   * The block range start number, inclusive. If endBlock is not defined when startBlock is defined, the end of the range will be the most recent block.
   */
  startBlock?: number | undefined;
  /**
   * The block range end number, exclusive. If startBlock is not defined when endBlock is defined, the start of the range will be the genesis block.
   */
  endBlock?: number | undefined;
  /**
   * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
   */
  pageToken?: string | undefined;
  /**
   * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
   */
  pageSize?: number | undefined;
  /**
   * A supported evm chain id or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
   */
  chainId?: string | undefined;
  /**
   * A wallet address.
   */
  address: string;
};

export type ListErc721TransactionsResponse = {
  result: components.ListErc721TransactionsResponse;
};

/** @internal */
export const ListErc721TransactionsGlobals$inboundSchema: z.ZodType<
  ListErc721TransactionsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string().optional(),
});

/** @internal */
export type ListErc721TransactionsGlobals$Outbound = {
  chainId?: string | undefined;
};

/** @internal */
export const ListErc721TransactionsGlobals$outboundSchema: z.ZodType<
  ListErc721TransactionsGlobals$Outbound,
  z.ZodTypeDef,
  ListErc721TransactionsGlobals
> = z.object({
  chainId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc721TransactionsGlobals$ {
  /** @deprecated use `ListErc721TransactionsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListErc721TransactionsGlobals$inboundSchema;
  /** @deprecated use `ListErc721TransactionsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListErc721TransactionsGlobals$outboundSchema;
  /** @deprecated use `ListErc721TransactionsGlobals$Outbound` instead. */
  export type Outbound = ListErc721TransactionsGlobals$Outbound;
}

export function listErc721TransactionsGlobalsToJSON(
  listErc721TransactionsGlobals: ListErc721TransactionsGlobals,
): string {
  return JSON.stringify(
    ListErc721TransactionsGlobals$outboundSchema.parse(
      listErc721TransactionsGlobals,
    ),
  );
}

export function listErc721TransactionsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListErc721TransactionsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListErc721TransactionsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListErc721TransactionsGlobals' from JSON`,
  );
}

/** @internal */
export const ListErc721TransactionsRequest$inboundSchema: z.ZodType<
  ListErc721TransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  startBlock: z.number().optional(),
  endBlock: z.number().optional(),
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  chainId: z.string().optional(),
  address: z.string(),
});

/** @internal */
export type ListErc721TransactionsRequest$Outbound = {
  startBlock?: number | undefined;
  endBlock?: number | undefined;
  pageToken?: string | undefined;
  pageSize: number;
  chainId?: string | undefined;
  address: string;
};

/** @internal */
export const ListErc721TransactionsRequest$outboundSchema: z.ZodType<
  ListErc721TransactionsRequest$Outbound,
  z.ZodTypeDef,
  ListErc721TransactionsRequest
> = z.object({
  startBlock: z.number().optional(),
  endBlock: z.number().optional(),
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(10),
  chainId: z.string().optional(),
  address: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc721TransactionsRequest$ {
  /** @deprecated use `ListErc721TransactionsRequest$inboundSchema` instead. */
  export const inboundSchema = ListErc721TransactionsRequest$inboundSchema;
  /** @deprecated use `ListErc721TransactionsRequest$outboundSchema` instead. */
  export const outboundSchema = ListErc721TransactionsRequest$outboundSchema;
  /** @deprecated use `ListErc721TransactionsRequest$Outbound` instead. */
  export type Outbound = ListErc721TransactionsRequest$Outbound;
}

export function listErc721TransactionsRequestToJSON(
  listErc721TransactionsRequest: ListErc721TransactionsRequest,
): string {
  return JSON.stringify(
    ListErc721TransactionsRequest$outboundSchema.parse(
      listErc721TransactionsRequest,
    ),
  );
}

export function listErc721TransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListErc721TransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListErc721TransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListErc721TransactionsRequest' from JSON`,
  );
}

/** @internal */
export const ListErc721TransactionsResponse$inboundSchema: z.ZodType<
  ListErc721TransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: components.ListErc721TransactionsResponse$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type ListErc721TransactionsResponse$Outbound = {
  Result: components.ListErc721TransactionsResponse$Outbound;
};

/** @internal */
export const ListErc721TransactionsResponse$outboundSchema: z.ZodType<
  ListErc721TransactionsResponse$Outbound,
  z.ZodTypeDef,
  ListErc721TransactionsResponse
> = z.object({
  result: components.ListErc721TransactionsResponse$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc721TransactionsResponse$ {
  /** @deprecated use `ListErc721TransactionsResponse$inboundSchema` instead. */
  export const inboundSchema = ListErc721TransactionsResponse$inboundSchema;
  /** @deprecated use `ListErc721TransactionsResponse$outboundSchema` instead. */
  export const outboundSchema = ListErc721TransactionsResponse$outboundSchema;
  /** @deprecated use `ListErc721TransactionsResponse$Outbound` instead. */
  export type Outbound = ListErc721TransactionsResponse$Outbound;
}

export function listErc721TransactionsResponseToJSON(
  listErc721TransactionsResponse: ListErc721TransactionsResponse,
): string {
  return JSON.stringify(
    ListErc721TransactionsResponse$outboundSchema.parse(
      listErc721TransactionsResponse,
    ),
  );
}

export function listErc721TransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListErc721TransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListErc721TransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListErc721TransactionsResponse' from JSON`,
  );
}
