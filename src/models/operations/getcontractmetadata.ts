/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetContractMetadataServerList = [
  "https://glacier-api.avax.network",
] as const;

export type GetContractMetadataGlobals = {
  /**
   * A supported EVM chain id, chain alias, or blockchain id.
   */
  chainId?: string | undefined;
};

export type GetContractMetadataRequest = {
  /**
   * A supported evm chain id or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
   */
  chainId?: string | undefined;
  /**
   * Contract address on the relevant chain.
   */
  address: string;
};

/**
 * Successful response
 */
export type GetContractMetadataResponseBody =
  | (components.Erc20Contract & { ercType: "ERC-20" })
  | (components.Erc721Contract & { ercType: "ERC-721" })
  | (components.Erc1155Contract & { ercType: "ERC-1155" })
  | (components.UnknownContract & { ercType: "UNKNOWN" });

/** @internal */
export const GetContractMetadataGlobals$inboundSchema: z.ZodType<
  GetContractMetadataGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string().optional(),
});

/** @internal */
export type GetContractMetadataGlobals$Outbound = {
  chainId?: string | undefined;
};

/** @internal */
export const GetContractMetadataGlobals$outboundSchema: z.ZodType<
  GetContractMetadataGlobals$Outbound,
  z.ZodTypeDef,
  GetContractMetadataGlobals
> = z.object({
  chainId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContractMetadataGlobals$ {
  /** @deprecated use `GetContractMetadataGlobals$inboundSchema` instead. */
  export const inboundSchema = GetContractMetadataGlobals$inboundSchema;
  /** @deprecated use `GetContractMetadataGlobals$outboundSchema` instead. */
  export const outboundSchema = GetContractMetadataGlobals$outboundSchema;
  /** @deprecated use `GetContractMetadataGlobals$Outbound` instead. */
  export type Outbound = GetContractMetadataGlobals$Outbound;
}

export function getContractMetadataGlobalsToJSON(
  getContractMetadataGlobals: GetContractMetadataGlobals,
): string {
  return JSON.stringify(
    GetContractMetadataGlobals$outboundSchema.parse(getContractMetadataGlobals),
  );
}

export function getContractMetadataGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetContractMetadataGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContractMetadataGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContractMetadataGlobals' from JSON`,
  );
}

/** @internal */
export const GetContractMetadataRequest$inboundSchema: z.ZodType<
  GetContractMetadataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string().optional(),
  address: z.string(),
});

/** @internal */
export type GetContractMetadataRequest$Outbound = {
  chainId?: string | undefined;
  address: string;
};

/** @internal */
export const GetContractMetadataRequest$outboundSchema: z.ZodType<
  GetContractMetadataRequest$Outbound,
  z.ZodTypeDef,
  GetContractMetadataRequest
> = z.object({
  chainId: z.string().optional(),
  address: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContractMetadataRequest$ {
  /** @deprecated use `GetContractMetadataRequest$inboundSchema` instead. */
  export const inboundSchema = GetContractMetadataRequest$inboundSchema;
  /** @deprecated use `GetContractMetadataRequest$outboundSchema` instead. */
  export const outboundSchema = GetContractMetadataRequest$outboundSchema;
  /** @deprecated use `GetContractMetadataRequest$Outbound` instead. */
  export type Outbound = GetContractMetadataRequest$Outbound;
}

export function getContractMetadataRequestToJSON(
  getContractMetadataRequest: GetContractMetadataRequest,
): string {
  return JSON.stringify(
    GetContractMetadataRequest$outboundSchema.parse(getContractMetadataRequest),
  );
}

export function getContractMetadataRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetContractMetadataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContractMetadataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContractMetadataRequest' from JSON`,
  );
}

/** @internal */
export const GetContractMetadataResponseBody$inboundSchema: z.ZodType<
  GetContractMetadataResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  components.Erc20Contract$inboundSchema.and(
    z.object({ ercType: z.literal("ERC-20") }).transform((v) => ({
      ercType: v.ercType,
    })),
  ),
  components.Erc721Contract$inboundSchema.and(
    z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({
      ercType: v.ercType,
    })),
  ),
  components.Erc1155Contract$inboundSchema.and(
    z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({
      ercType: v.ercType,
    })),
  ),
  components.UnknownContract$inboundSchema.and(
    z.object({ ercType: z.literal("UNKNOWN") }).transform((v) => ({
      ercType: v.ercType,
    })),
  ),
]);

/** @internal */
export type GetContractMetadataResponseBody$Outbound =
  | (components.Erc20Contract$Outbound & { ercType: "ERC-20" })
  | (components.Erc721Contract$Outbound & { ercType: "ERC-721" })
  | (components.Erc1155Contract$Outbound & { ercType: "ERC-1155" })
  | (components.UnknownContract$Outbound & { ercType: "UNKNOWN" });

/** @internal */
export const GetContractMetadataResponseBody$outboundSchema: z.ZodType<
  GetContractMetadataResponseBody$Outbound,
  z.ZodTypeDef,
  GetContractMetadataResponseBody
> = z.union([
  components.Erc20Contract$outboundSchema.and(
    z.object({ ercType: z.literal("ERC-20") }).transform((v) => ({
      ercType: v.ercType,
    })),
  ),
  components.Erc721Contract$outboundSchema.and(
    z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({
      ercType: v.ercType,
    })),
  ),
  components.Erc1155Contract$outboundSchema.and(
    z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({
      ercType: v.ercType,
    })),
  ),
  components.UnknownContract$outboundSchema.and(
    z.object({ ercType: z.literal("UNKNOWN") }).transform((v) => ({
      ercType: v.ercType,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContractMetadataResponseBody$ {
  /** @deprecated use `GetContractMetadataResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetContractMetadataResponseBody$inboundSchema;
  /** @deprecated use `GetContractMetadataResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetContractMetadataResponseBody$outboundSchema;
  /** @deprecated use `GetContractMetadataResponseBody$Outbound` instead. */
  export type Outbound = GetContractMetadataResponseBody$Outbound;
}

export function getContractMetadataResponseBodyToJSON(
  getContractMetadataResponseBody: GetContractMetadataResponseBody,
): string {
  return JSON.stringify(
    GetContractMetadataResponseBody$outboundSchema.parse(
      getContractMetadataResponseBody,
    ),
  );
}

export function getContractMetadataResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetContractMetadataResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContractMetadataResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContractMetadataResponseBody' from JSON`,
  );
}
