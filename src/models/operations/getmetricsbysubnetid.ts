/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetMetricsBySubnetIdServerList = [
  "https://metrics.avax.network",
] as const;

/**
 * Which metric to fetch for given subnet ID.
 */
export const GetMetricsBySubnetIdPathParamMetric = {
  PerSubnetDailyFeesPaid: "perSubnetDailyFeesPaid",
  PerSubnetCumulativeFeesPaid: "perSubnetCumulativeFeesPaid",
  PerSubnetPayingValidators: "perSubnetPayingValidators",
} as const;
/**
 * Which metric to fetch for given subnet ID.
 */
export type GetMetricsBySubnetIdPathParamMetric = ClosedEnum<
  typeof GetMetricsBySubnetIdPathParamMetric
>;

export type GetMetricsBySubnetIdRequest = {
  /**
   * Which metric to fetch for given subnet ID.
   */
  metric: GetMetricsBySubnetIdPathParamMetric;
  /**
   * Query param for retrieving items after a specific timestamp.
   */
  startTimestamp?: number | undefined;
  /**
   * Query param for retrieving items before a specific timestamp.
   */
  endTimestamp?: number | undefined;
  /**
   * The subnet ID to filter by.
   */
  subnetId: string;
};

/** @internal */
export const GetMetricsBySubnetIdPathParamMetric$inboundSchema: z.ZodNativeEnum<
  typeof GetMetricsBySubnetIdPathParamMetric
> = z.nativeEnum(GetMetricsBySubnetIdPathParamMetric);

/** @internal */
export const GetMetricsBySubnetIdPathParamMetric$outboundSchema:
  z.ZodNativeEnum<typeof GetMetricsBySubnetIdPathParamMetric> =
    GetMetricsBySubnetIdPathParamMetric$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetricsBySubnetIdPathParamMetric$ {
  /** @deprecated use `GetMetricsBySubnetIdPathParamMetric$inboundSchema` instead. */
  export const inboundSchema =
    GetMetricsBySubnetIdPathParamMetric$inboundSchema;
  /** @deprecated use `GetMetricsBySubnetIdPathParamMetric$outboundSchema` instead. */
  export const outboundSchema =
    GetMetricsBySubnetIdPathParamMetric$outboundSchema;
}

/** @internal */
export const GetMetricsBySubnetIdRequest$inboundSchema: z.ZodType<
  GetMetricsBySubnetIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  metric: GetMetricsBySubnetIdPathParamMetric$inboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
  subnetId: z.string(),
});

/** @internal */
export type GetMetricsBySubnetIdRequest$Outbound = {
  metric: string;
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
  subnetId: string;
};

/** @internal */
export const GetMetricsBySubnetIdRequest$outboundSchema: z.ZodType<
  GetMetricsBySubnetIdRequest$Outbound,
  z.ZodTypeDef,
  GetMetricsBySubnetIdRequest
> = z.object({
  metric: GetMetricsBySubnetIdPathParamMetric$outboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
  subnetId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetMetricsBySubnetIdRequest$ {
  /** @deprecated use `GetMetricsBySubnetIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetMetricsBySubnetIdRequest$inboundSchema;
  /** @deprecated use `GetMetricsBySubnetIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetMetricsBySubnetIdRequest$outboundSchema;
  /** @deprecated use `GetMetricsBySubnetIdRequest$Outbound` instead. */
  export type Outbound = GetMetricsBySubnetIdRequest$Outbound;
}

export function getMetricsBySubnetIdRequestToJSON(
  getMetricsBySubnetIdRequest: GetMetricsBySubnetIdRequest,
): string {
  return JSON.stringify(
    GetMetricsBySubnetIdRequest$outboundSchema.parse(
      getMetricsBySubnetIdRequest,
    ),
  );
}

export function getMetricsBySubnetIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetMetricsBySubnetIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetMetricsBySubnetIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetMetricsBySubnetIdRequest' from JSON`,
  );
}
