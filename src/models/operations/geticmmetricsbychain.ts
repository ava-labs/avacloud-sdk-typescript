/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetICMMetricsByChainServerList = [
  "https://metrics.avax.network",
] as const;

export type GetICMMetricsByChainRequest = {
  /**
   * Which chain level ICM metric to fetch.
   */
  metric: components.ICMMetric;
  /**
   * Query param for retrieving items after a specific timestamp.
   */
  startTimestamp?: number | undefined;
  /**
   * Query param for retrieving items before a specific timestamp.
   */
  endTimestamp?: number | undefined;
  /**
   * Query param for retrieving items for a specific source (initiating) blockchain id.
   */
  srcBlockchainId?: string | undefined;
  /**
   * Query param for retrieving items for a specific destination (receiving) blockchain id.
   */
  destBlockchainId?: string | undefined;
  /**
   * Time interval granularity for data aggregation. Metrics
   *
   * @remarks
   *     prefixed with "cumulative", "max", or "avg" only support timeInterval equal
   *     to "day".
   */
  timeInterval?: components.TimeIntervalGranularity | undefined;
  /**
   * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
   */
  pageToken?: string | undefined;
  /**
   * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 2160.
   */
  pageSize?: number | undefined;
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.Network | undefined;
};

/** @internal */
export const GetICMMetricsByChainRequest$inboundSchema: z.ZodType<
  GetICMMetricsByChainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  metric: components.ICMMetric$inboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
  srcBlockchainId: z.string().optional(),
  destBlockchainId: z.string().optional(),
  timeInterval: components.TimeIntervalGranularity$inboundSchema.optional(),
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(100),
  network: components.Network$inboundSchema.optional(),
});

/** @internal */
export type GetICMMetricsByChainRequest$Outbound = {
  metric: string;
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
  srcBlockchainId?: string | undefined;
  destBlockchainId?: string | undefined;
  timeInterval?: string | undefined;
  pageToken?: string | undefined;
  pageSize: number;
  network?: string | undefined;
};

/** @internal */
export const GetICMMetricsByChainRequest$outboundSchema: z.ZodType<
  GetICMMetricsByChainRequest$Outbound,
  z.ZodTypeDef,
  GetICMMetricsByChainRequest
> = z.object({
  metric: components.ICMMetric$outboundSchema,
  startTimestamp: z.number().int().optional(),
  endTimestamp: z.number().int().optional(),
  srcBlockchainId: z.string().optional(),
  destBlockchainId: z.string().optional(),
  timeInterval: components.TimeIntervalGranularity$outboundSchema.optional(),
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(100),
  network: components.Network$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetICMMetricsByChainRequest$ {
  /** @deprecated use `GetICMMetricsByChainRequest$inboundSchema` instead. */
  export const inboundSchema = GetICMMetricsByChainRequest$inboundSchema;
  /** @deprecated use `GetICMMetricsByChainRequest$outboundSchema` instead. */
  export const outboundSchema = GetICMMetricsByChainRequest$outboundSchema;
  /** @deprecated use `GetICMMetricsByChainRequest$Outbound` instead. */
  export type Outbound = GetICMMetricsByChainRequest$Outbound;
}

export function getICMMetricsByChainRequestToJSON(
  getICMMetricsByChainRequest: GetICMMetricsByChainRequest,
): string {
  return JSON.stringify(
    GetICMMetricsByChainRequest$outboundSchema.parse(
      getICMMetricsByChainRequest,
    ),
  );
}

export function getICMMetricsByChainRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetICMMetricsByChainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetICMMetricsByChainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetICMMetricsByChainRequest' from JSON`,
  );
}
