/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AggregateSignaturesServerList = [
  "https://glacier-api.avax.network",
] as const;

export type AggregateSignaturesGlobals = {
  /**
   * A supported network type mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
};

export type AggregateSignaturesRequest = {
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
  signatureAggregatorRequest: components.SignatureAggregatorRequest;
};

/** @internal */
export const AggregateSignaturesGlobals$inboundSchema: z.ZodType<
  AggregateSignaturesGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type AggregateSignaturesGlobals$Outbound = {
  network?: string | undefined;
};

/** @internal */
export const AggregateSignaturesGlobals$outboundSchema: z.ZodType<
  AggregateSignaturesGlobals$Outbound,
  z.ZodTypeDef,
  AggregateSignaturesGlobals
> = z.object({
  network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AggregateSignaturesGlobals$ {
  /** @deprecated use `AggregateSignaturesGlobals$inboundSchema` instead. */
  export const inboundSchema = AggregateSignaturesGlobals$inboundSchema;
  /** @deprecated use `AggregateSignaturesGlobals$outboundSchema` instead. */
  export const outboundSchema = AggregateSignaturesGlobals$outboundSchema;
  /** @deprecated use `AggregateSignaturesGlobals$Outbound` instead. */
  export type Outbound = AggregateSignaturesGlobals$Outbound;
}

export function aggregateSignaturesGlobalsToJSON(
  aggregateSignaturesGlobals: AggregateSignaturesGlobals,
): string {
  return JSON.stringify(
    AggregateSignaturesGlobals$outboundSchema.parse(aggregateSignaturesGlobals),
  );
}

export function aggregateSignaturesGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<AggregateSignaturesGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AggregateSignaturesGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AggregateSignaturesGlobals' from JSON`,
  );
}

/** @internal */
export const AggregateSignaturesRequest$inboundSchema: z.ZodType<
  AggregateSignaturesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: components.GlobalParamNetwork$inboundSchema.optional(),
  SignatureAggregatorRequest:
    components.SignatureAggregatorRequest$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "SignatureAggregatorRequest": "signatureAggregatorRequest",
  });
});

/** @internal */
export type AggregateSignaturesRequest$Outbound = {
  network?: string | undefined;
  SignatureAggregatorRequest: components.SignatureAggregatorRequest$Outbound;
};

/** @internal */
export const AggregateSignaturesRequest$outboundSchema: z.ZodType<
  AggregateSignaturesRequest$Outbound,
  z.ZodTypeDef,
  AggregateSignaturesRequest
> = z.object({
  network: components.GlobalParamNetwork$outboundSchema.optional(),
  signatureAggregatorRequest:
    components.SignatureAggregatorRequest$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    signatureAggregatorRequest: "SignatureAggregatorRequest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AggregateSignaturesRequest$ {
  /** @deprecated use `AggregateSignaturesRequest$inboundSchema` instead. */
  export const inboundSchema = AggregateSignaturesRequest$inboundSchema;
  /** @deprecated use `AggregateSignaturesRequest$outboundSchema` instead. */
  export const outboundSchema = AggregateSignaturesRequest$outboundSchema;
  /** @deprecated use `AggregateSignaturesRequest$Outbound` instead. */
  export type Outbound = AggregateSignaturesRequest$Outbound;
}

export function aggregateSignaturesRequestToJSON(
  aggregateSignaturesRequest: AggregateSignaturesRequest,
): string {
  return JSON.stringify(
    AggregateSignaturesRequest$outboundSchema.parse(aggregateSignaturesRequest),
  );
}

export function aggregateSignaturesRequestFromJSON(
  jsonString: string,
): SafeParseResult<AggregateSignaturesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AggregateSignaturesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AggregateSignaturesRequest' from JSON`,
  );
}
