/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetNetworkDetailsServerList = [
  "https://glacier-api.avax.network",
] as const;

export type GetNetworkDetailsGlobals = {
  /**
   * A supported network type mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
};

export type GetNetworkDetailsRequest = {
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
};

/** @internal */
export const GetNetworkDetailsGlobals$inboundSchema: z.ZodType<
  GetNetworkDetailsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type GetNetworkDetailsGlobals$Outbound = {
  network?: string | undefined;
};

/** @internal */
export const GetNetworkDetailsGlobals$outboundSchema: z.ZodType<
  GetNetworkDetailsGlobals$Outbound,
  z.ZodTypeDef,
  GetNetworkDetailsGlobals
> = z.object({
  network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNetworkDetailsGlobals$ {
  /** @deprecated use `GetNetworkDetailsGlobals$inboundSchema` instead. */
  export const inboundSchema = GetNetworkDetailsGlobals$inboundSchema;
  /** @deprecated use `GetNetworkDetailsGlobals$outboundSchema` instead. */
  export const outboundSchema = GetNetworkDetailsGlobals$outboundSchema;
  /** @deprecated use `GetNetworkDetailsGlobals$Outbound` instead. */
  export type Outbound = GetNetworkDetailsGlobals$Outbound;
}

export function getNetworkDetailsGlobalsToJSON(
  getNetworkDetailsGlobals: GetNetworkDetailsGlobals,
): string {
  return JSON.stringify(
    GetNetworkDetailsGlobals$outboundSchema.parse(getNetworkDetailsGlobals),
  );
}

export function getNetworkDetailsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetNetworkDetailsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNetworkDetailsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNetworkDetailsGlobals' from JSON`,
  );
}

/** @internal */
export const GetNetworkDetailsRequest$inboundSchema: z.ZodType<
  GetNetworkDetailsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type GetNetworkDetailsRequest$Outbound = {
  network?: string | undefined;
};

/** @internal */
export const GetNetworkDetailsRequest$outboundSchema: z.ZodType<
  GetNetworkDetailsRequest$Outbound,
  z.ZodTypeDef,
  GetNetworkDetailsRequest
> = z.object({
  network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNetworkDetailsRequest$ {
  /** @deprecated use `GetNetworkDetailsRequest$inboundSchema` instead. */
  export const inboundSchema = GetNetworkDetailsRequest$inboundSchema;
  /** @deprecated use `GetNetworkDetailsRequest$outboundSchema` instead. */
  export const outboundSchema = GetNetworkDetailsRequest$outboundSchema;
  /** @deprecated use `GetNetworkDetailsRequest$Outbound` instead. */
  export type Outbound = GetNetworkDetailsRequest$Outbound;
}

export function getNetworkDetailsRequestToJSON(
  getNetworkDetailsRequest: GetNetworkDetailsRequest,
): string {
  return JSON.stringify(
    GetNetworkDetailsRequest$outboundSchema.parse(getNetworkDetailsRequest),
  );
}

export function getNetworkDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetNetworkDetailsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetNetworkDetailsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetNetworkDetailsRequest' from JSON`,
  );
}
