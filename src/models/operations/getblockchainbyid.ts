/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetBlockchainByIdServerList = [
  "https://glacier-api.avax.network",
] as const;

export type GetBlockchainByIdGlobals = {
  /**
   * A supported network type mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
};

export type GetBlockchainByIdRequest = {
  /**
   * The blockchain ID of the blockchain to retrieve.
   */
  blockchainId: string;
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.GlobalParamNetwork | undefined;
};

/** @internal */
export const GetBlockchainByIdGlobals$inboundSchema: z.ZodType<
  GetBlockchainByIdGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type GetBlockchainByIdGlobals$Outbound = {
  network?: string | undefined;
};

/** @internal */
export const GetBlockchainByIdGlobals$outboundSchema: z.ZodType<
  GetBlockchainByIdGlobals$Outbound,
  z.ZodTypeDef,
  GetBlockchainByIdGlobals
> = z.object({
  network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBlockchainByIdGlobals$ {
  /** @deprecated use `GetBlockchainByIdGlobals$inboundSchema` instead. */
  export const inboundSchema = GetBlockchainByIdGlobals$inboundSchema;
  /** @deprecated use `GetBlockchainByIdGlobals$outboundSchema` instead. */
  export const outboundSchema = GetBlockchainByIdGlobals$outboundSchema;
  /** @deprecated use `GetBlockchainByIdGlobals$Outbound` instead. */
  export type Outbound = GetBlockchainByIdGlobals$Outbound;
}

export function getBlockchainByIdGlobalsToJSON(
  getBlockchainByIdGlobals: GetBlockchainByIdGlobals,
): string {
  return JSON.stringify(
    GetBlockchainByIdGlobals$outboundSchema.parse(getBlockchainByIdGlobals),
  );
}

export function getBlockchainByIdGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetBlockchainByIdGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBlockchainByIdGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBlockchainByIdGlobals' from JSON`,
  );
}

/** @internal */
export const GetBlockchainByIdRequest$inboundSchema: z.ZodType<
  GetBlockchainByIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  blockchainId: z.string(),
  network: components.GlobalParamNetwork$inboundSchema.optional(),
});

/** @internal */
export type GetBlockchainByIdRequest$Outbound = {
  blockchainId: string;
  network?: string | undefined;
};

/** @internal */
export const GetBlockchainByIdRequest$outboundSchema: z.ZodType<
  GetBlockchainByIdRequest$Outbound,
  z.ZodTypeDef,
  GetBlockchainByIdRequest
> = z.object({
  blockchainId: z.string(),
  network: components.GlobalParamNetwork$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBlockchainByIdRequest$ {
  /** @deprecated use `GetBlockchainByIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetBlockchainByIdRequest$inboundSchema;
  /** @deprecated use `GetBlockchainByIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetBlockchainByIdRequest$outboundSchema;
  /** @deprecated use `GetBlockchainByIdRequest$Outbound` instead. */
  export type Outbound = GetBlockchainByIdRequest$Outbound;
}

export function getBlockchainByIdRequestToJSON(
  getBlockchainByIdRequest: GetBlockchainByIdRequest,
): string {
  return JSON.stringify(
    GetBlockchainByIdRequest$outboundSchema.parse(getBlockchainByIdRequest),
  );
}

export function getBlockchainByIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBlockchainByIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBlockchainByIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBlockchainByIdRequest' from JSON`,
  );
}
