/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type ListErc20BalancesRequest = {
    /**
     * The block number, if not defined the block number will be the latest block.
     */
    blockNumber?: string | undefined;
    /**
     * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
     */
    pageToken?: string | undefined;
    /**
     * The maximum number of items to return. The minimum page size is 1. The maximum pageSize is 100.
     */
    pageSize?: number | undefined;
    /**
     * whether to filter out spam tokens from the response. Default is true.
     */
    filterSpamTokens?: boolean | undefined;
    /**
     * A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
     */
    chainId: string;
    /**
     * A wallet address.
     */
    address: string;
    /**
     * A comma separated list of contract addresses to filter by.
     */
    contractAddresses?: string | undefined;
    /**
     * The currency that return values should use. Defaults to USD.
     */
    currency?: components.CurrencyCode | undefined;
};

/** @internal */
export const ListErc20BalancesRequest$inboundSchema: z.ZodType<
    ListErc20BalancesRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    blockNumber: z.string().optional(),
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    filterSpamTokens: z.boolean().default(true),
    chainId: z.string(),
    address: z.string(),
    contractAddresses: z.string().optional(),
    currency: components.CurrencyCode$inboundSchema.optional(),
});

/** @internal */
export type ListErc20BalancesRequest$Outbound = {
    blockNumber?: string | undefined;
    pageToken?: string | undefined;
    pageSize: number;
    filterSpamTokens: boolean;
    chainId: string;
    address: string;
    contractAddresses?: string | undefined;
    currency?: string | undefined;
};

/** @internal */
export const ListErc20BalancesRequest$outboundSchema: z.ZodType<
    ListErc20BalancesRequest$Outbound,
    z.ZodTypeDef,
    ListErc20BalancesRequest
> = z.object({
    blockNumber: z.string().optional(),
    pageToken: z.string().optional(),
    pageSize: z.number().int().default(10),
    filterSpamTokens: z.boolean().default(true),
    chainId: z.string(),
    address: z.string(),
    contractAddresses: z.string().optional(),
    currency: components.CurrencyCode$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc20BalancesRequest$ {
    /** @deprecated use `ListErc20BalancesRequest$inboundSchema` instead. */
    export const inboundSchema = ListErc20BalancesRequest$inboundSchema;
    /** @deprecated use `ListErc20BalancesRequest$outboundSchema` instead. */
    export const outboundSchema = ListErc20BalancesRequest$outboundSchema;
    /** @deprecated use `ListErc20BalancesRequest$Outbound` instead. */
    export type Outbound = ListErc20BalancesRequest$Outbound;
}
