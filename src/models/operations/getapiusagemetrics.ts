/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type GetApiUsageMetricsRequest = {
    /**
     * Organization ID to fetch usage metrics for
     */
    orgId?: string | undefined;
    /**
     * Query param for retrieving items after a specific timestamp.
     */
    startTimestamp?: number | undefined;
    /**
     * Query param for retrieving items before a specific timestamp.
     */
    endTimestamp?: number | undefined;
    /**
     * Time interval granularity for data aggregation
     */
    timeInterval?: components.TimeIntervalGranularityExtended | undefined;
    /**
     * Query param for the criterion used for grouping metrics
     */
    groupBy?: components.UsageMetricsGroupByEnum | undefined;
    /**
     * Filter aggregated usage metrics by request path.
     */
    requestPath?: string | undefined;
    /**
     * Filter aggregated usage metrics by response status code.
     */
    responseStatusCode?: string | undefined;
    /**
     * Filter aggregated usage metrics by chain ID.
     */
    chainId?: string | undefined;
    /**
     * Filter aggregated usage metrics by API key ID.
     */
    apiKeyId?: string | undefined;
};

/** @internal */
export const GetApiUsageMetricsRequest$inboundSchema: z.ZodType<
    GetApiUsageMetricsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    orgId: z.string().optional(),
    startTimestamp: z.number().int().optional(),
    endTimestamp: z.number().int().optional(),
    timeInterval: components.TimeIntervalGranularityExtended$inboundSchema.optional(),
    groupBy: components.UsageMetricsGroupByEnum$inboundSchema.optional(),
    requestPath: z.string().optional(),
    responseStatusCode: z.string().optional(),
    chainId: z.string().optional(),
    apiKeyId: z.string().optional(),
});

/** @internal */
export type GetApiUsageMetricsRequest$Outbound = {
    orgId?: string | undefined;
    startTimestamp?: number | undefined;
    endTimestamp?: number | undefined;
    timeInterval?: string | undefined;
    groupBy?: string | undefined;
    requestPath?: string | undefined;
    responseStatusCode?: string | undefined;
    chainId?: string | undefined;
    apiKeyId?: string | undefined;
};

/** @internal */
export const GetApiUsageMetricsRequest$outboundSchema: z.ZodType<
    GetApiUsageMetricsRequest$Outbound,
    z.ZodTypeDef,
    GetApiUsageMetricsRequest
> = z.object({
    orgId: z.string().optional(),
    startTimestamp: z.number().int().optional(),
    endTimestamp: z.number().int().optional(),
    timeInterval: components.TimeIntervalGranularityExtended$outboundSchema.optional(),
    groupBy: components.UsageMetricsGroupByEnum$outboundSchema.optional(),
    requestPath: z.string().optional(),
    responseStatusCode: z.string().optional(),
    chainId: z.string().optional(),
    apiKeyId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetApiUsageMetricsRequest$ {
    /** @deprecated use `GetApiUsageMetricsRequest$inboundSchema` instead. */
    export const inboundSchema = GetApiUsageMetricsRequest$inboundSchema;
    /** @deprecated use `GetApiUsageMetricsRequest$outboundSchema` instead. */
    export const outboundSchema = GetApiUsageMetricsRequest$outboundSchema;
    /** @deprecated use `GetApiUsageMetricsRequest$Outbound` instead. */
    export type Outbound = GetApiUsageMetricsRequest$Outbound;
}
