/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetICMRollingWindowMetricsByChainServerList = [
  "https://metrics.avax.network",
] as const;

export type GetICMRollingWindowMetricsByChainRequest = {
  /**
   * Which chain level ICM metric to fetch for the rolling window.
   */
  metric: components.ICMRollingWindowMetric;
  /**
   * Query param for retrieving items for a specific source (initiating) blockchain id.
   */
  srcBlockchainId?: string | undefined;
  /**
   * Query param for retrieving items for a specific destination (receiving) blockchain id.
   */
  destBlockchainId?: string | undefined;
  /**
   * Either mainnet or testnet/fuji.
   */
  network?: components.Network | undefined;
};

/** @internal */
export const GetICMRollingWindowMetricsByChainRequest$inboundSchema: z.ZodType<
  GetICMRollingWindowMetricsByChainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  metric: components.ICMRollingWindowMetric$inboundSchema,
  srcBlockchainId: z.string().optional(),
  destBlockchainId: z.string().optional(),
  network: components.Network$inboundSchema.optional(),
});

/** @internal */
export type GetICMRollingWindowMetricsByChainRequest$Outbound = {
  metric: string;
  srcBlockchainId?: string | undefined;
  destBlockchainId?: string | undefined;
  network?: string | undefined;
};

/** @internal */
export const GetICMRollingWindowMetricsByChainRequest$outboundSchema: z.ZodType<
  GetICMRollingWindowMetricsByChainRequest$Outbound,
  z.ZodTypeDef,
  GetICMRollingWindowMetricsByChainRequest
> = z.object({
  metric: components.ICMRollingWindowMetric$outboundSchema,
  srcBlockchainId: z.string().optional(),
  destBlockchainId: z.string().optional(),
  network: components.Network$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetICMRollingWindowMetricsByChainRequest$ {
  /** @deprecated use `GetICMRollingWindowMetricsByChainRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetICMRollingWindowMetricsByChainRequest$inboundSchema;
  /** @deprecated use `GetICMRollingWindowMetricsByChainRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetICMRollingWindowMetricsByChainRequest$outboundSchema;
  /** @deprecated use `GetICMRollingWindowMetricsByChainRequest$Outbound` instead. */
  export type Outbound = GetICMRollingWindowMetricsByChainRequest$Outbound;
}

export function getICMRollingWindowMetricsByChainRequestToJSON(
  getICMRollingWindowMetricsByChainRequest:
    GetICMRollingWindowMetricsByChainRequest,
): string {
  return JSON.stringify(
    GetICMRollingWindowMetricsByChainRequest$outboundSchema.parse(
      getICMRollingWindowMetricsByChainRequest,
    ),
  );
}

export function getICMRollingWindowMetricsByChainRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetICMRollingWindowMetricsByChainRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetICMRollingWindowMetricsByChainRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetICMRollingWindowMetricsByChainRequest' from JSON`,
  );
}
