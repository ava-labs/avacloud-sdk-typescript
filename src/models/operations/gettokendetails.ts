/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export const GetTokenDetailsServerList = ["https://glacier-api.avax.network"] as const;

export type GetTokenDetailsGlobals = {
    /**
     * A supported EVM chain id, chain alias, or blockchain id.
     */
    chainId?: string | undefined;
};

export type GetTokenDetailsRequest = {
    /**
     * A supported evm chain id, chain alias or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
     */
    chainId?: string | undefined;
    /**
     * Contract address on the relevant chain.
     */
    address: string;
    /**
     * TokenId on the contract
     */
    tokenId: string;
};

/**
 * Successful response
 */
export type GetTokenDetailsResponseBody =
    | (components.Erc1155Token & { ercType: "ERC-1155" })
    | (components.Erc721Token & { ercType: "ERC-721" });

/** @internal */
export const GetTokenDetailsGlobals$inboundSchema: z.ZodType<
    GetTokenDetailsGlobals,
    z.ZodTypeDef,
    unknown
> = z.object({
    chainId: z.string().optional(),
});

/** @internal */
export type GetTokenDetailsGlobals$Outbound = {
    chainId?: string | undefined;
};

/** @internal */
export const GetTokenDetailsGlobals$outboundSchema: z.ZodType<
    GetTokenDetailsGlobals$Outbound,
    z.ZodTypeDef,
    GetTokenDetailsGlobals
> = z.object({
    chainId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTokenDetailsGlobals$ {
    /** @deprecated use `GetTokenDetailsGlobals$inboundSchema` instead. */
    export const inboundSchema = GetTokenDetailsGlobals$inboundSchema;
    /** @deprecated use `GetTokenDetailsGlobals$outboundSchema` instead. */
    export const outboundSchema = GetTokenDetailsGlobals$outboundSchema;
    /** @deprecated use `GetTokenDetailsGlobals$Outbound` instead. */
    export type Outbound = GetTokenDetailsGlobals$Outbound;
}

/** @internal */
export const GetTokenDetailsRequest$inboundSchema: z.ZodType<
    GetTokenDetailsRequest,
    z.ZodTypeDef,
    unknown
> = z.object({
    chainId: z.string().optional(),
    address: z.string(),
    tokenId: z.string(),
});

/** @internal */
export type GetTokenDetailsRequest$Outbound = {
    chainId?: string | undefined;
    address: string;
    tokenId: string;
};

/** @internal */
export const GetTokenDetailsRequest$outboundSchema: z.ZodType<
    GetTokenDetailsRequest$Outbound,
    z.ZodTypeDef,
    GetTokenDetailsRequest
> = z.object({
    chainId: z.string().optional(),
    address: z.string(),
    tokenId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTokenDetailsRequest$ {
    /** @deprecated use `GetTokenDetailsRequest$inboundSchema` instead. */
    export const inboundSchema = GetTokenDetailsRequest$inboundSchema;
    /** @deprecated use `GetTokenDetailsRequest$outboundSchema` instead. */
    export const outboundSchema = GetTokenDetailsRequest$outboundSchema;
    /** @deprecated use `GetTokenDetailsRequest$Outbound` instead. */
    export type Outbound = GetTokenDetailsRequest$Outbound;
}

/** @internal */
export const GetTokenDetailsResponseBody$inboundSchema: z.ZodType<
    GetTokenDetailsResponseBody,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.Erc1155Token$inboundSchema.and(
        z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({ ercType: v.ercType }))
    ),
    components.Erc721Token$inboundSchema.and(
        z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({ ercType: v.ercType }))
    ),
]);

/** @internal */
export type GetTokenDetailsResponseBody$Outbound =
    | (components.Erc1155Token$Outbound & { ercType: "ERC-1155" })
    | (components.Erc721Token$Outbound & { ercType: "ERC-721" });

/** @internal */
export const GetTokenDetailsResponseBody$outboundSchema: z.ZodType<
    GetTokenDetailsResponseBody$Outbound,
    z.ZodTypeDef,
    GetTokenDetailsResponseBody
> = z.union([
    components.Erc1155Token$outboundSchema.and(
        z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({ ercType: v.ercType }))
    ),
    components.Erc721Token$outboundSchema.and(
        z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({ ercType: v.ercType }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTokenDetailsResponseBody$ {
    /** @deprecated use `GetTokenDetailsResponseBody$inboundSchema` instead. */
    export const inboundSchema = GetTokenDetailsResponseBody$inboundSchema;
    /** @deprecated use `GetTokenDetailsResponseBody$outboundSchema` instead. */
    export const outboundSchema = GetTokenDetailsResponseBody$outboundSchema;
    /** @deprecated use `GetTokenDetailsResponseBody$Outbound` instead. */
    export type Outbound = GetTokenDetailsResponseBody$Outbound;
}
