/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetTransactionsForBlockServerList = [
  "https://glacier-api.avax.network",
] as const;

export type GetTransactionsForBlockGlobals = {
  /**
   * A supported EVM chain id, chain alias, or blockchain id.
   */
  chainId?: string | undefined;
};

export type GetTransactionsForBlockRequest = {
  /**
   * A page token, received from a previous list call. Provide this to retrieve the subsequent page.
   */
  pageToken?: string | undefined;
  /**
   * The maximum number of items to return. The minimum page size is 0. The maximum pageSize is 100.
   */
  pageSize?: number | undefined;
  /**
   * A supported evm chain id or blockchain id. Use the `/chains` endpoint to get a list of supported chain ids.
   */
  chainId?: string | undefined;
  /**
   * A block identifier which is either a block number or the block hash.
   */
  blockId: string;
};

/** @internal */
export const GetTransactionsForBlockGlobals$inboundSchema: z.ZodType<
  GetTransactionsForBlockGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string().optional(),
});

/** @internal */
export type GetTransactionsForBlockGlobals$Outbound = {
  chainId?: string | undefined;
};

/** @internal */
export const GetTransactionsForBlockGlobals$outboundSchema: z.ZodType<
  GetTransactionsForBlockGlobals$Outbound,
  z.ZodTypeDef,
  GetTransactionsForBlockGlobals
> = z.object({
  chainId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsForBlockGlobals$ {
  /** @deprecated use `GetTransactionsForBlockGlobals$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsForBlockGlobals$inboundSchema;
  /** @deprecated use `GetTransactionsForBlockGlobals$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsForBlockGlobals$outboundSchema;
  /** @deprecated use `GetTransactionsForBlockGlobals$Outbound` instead. */
  export type Outbound = GetTransactionsForBlockGlobals$Outbound;
}

export function getTransactionsForBlockGlobalsToJSON(
  getTransactionsForBlockGlobals: GetTransactionsForBlockGlobals,
): string {
  return JSON.stringify(
    GetTransactionsForBlockGlobals$outboundSchema.parse(
      getTransactionsForBlockGlobals,
    ),
  );
}

export function getTransactionsForBlockGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsForBlockGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsForBlockGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsForBlockGlobals' from JSON`,
  );
}

/** @internal */
export const GetTransactionsForBlockRequest$inboundSchema: z.ZodType<
  GetTransactionsForBlockRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(0),
  chainId: z.string().optional(),
  blockId: z.string(),
});

/** @internal */
export type GetTransactionsForBlockRequest$Outbound = {
  pageToken?: string | undefined;
  pageSize: number;
  chainId?: string | undefined;
  blockId: string;
};

/** @internal */
export const GetTransactionsForBlockRequest$outboundSchema: z.ZodType<
  GetTransactionsForBlockRequest$Outbound,
  z.ZodTypeDef,
  GetTransactionsForBlockRequest
> = z.object({
  pageToken: z.string().optional(),
  pageSize: z.number().int().default(0),
  chainId: z.string().optional(),
  blockId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionsForBlockRequest$ {
  /** @deprecated use `GetTransactionsForBlockRequest$inboundSchema` instead. */
  export const inboundSchema = GetTransactionsForBlockRequest$inboundSchema;
  /** @deprecated use `GetTransactionsForBlockRequest$outboundSchema` instead. */
  export const outboundSchema = GetTransactionsForBlockRequest$outboundSchema;
  /** @deprecated use `GetTransactionsForBlockRequest$Outbound` instead. */
  export type Outbound = GetTransactionsForBlockRequest$Outbound;
}

export function getTransactionsForBlockRequestToJSON(
  getTransactionsForBlockRequest: GetTransactionsForBlockRequest,
): string {
  return JSON.stringify(
    GetTransactionsForBlockRequest$outboundSchema.parse(
      getTransactionsForBlockRequest,
    ),
  );
}

export function getTransactionsForBlockRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionsForBlockRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionsForBlockRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionsForBlockRequest' from JSON`,
  );
}
