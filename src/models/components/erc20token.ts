/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Money,
  Money$inboundSchema,
  Money$Outbound,
  Money$outboundSchema,
} from "./money.js";

export const Erc20TokenErcType = {
  Erc20: "ERC-20",
} as const;
export type Erc20TokenErcType = ClosedEnum<typeof Erc20TokenErcType>;

export type Erc20Token = {
  /**
   * A wallet or contract address in mixed-case checksum encoding.
   */
  address: string;
  /**
   * The contract name.
   */
  name: string;
  /**
   * The contract symbol.
   */
  symbol: string;
  /**
   * The number of decimals the token uses. For example `6`, means to divide the token amount by `1000000` to get its user representation.
   */
  decimals: number;
  /**
   * The logo uri for the address.
   */
  logoUri?: string | undefined;
  ercType: Erc20TokenErcType;
  /**
   * The token price, if available.
   */
  price?: Money | undefined;
};

/** @internal */
export const Erc20TokenErcType$inboundSchema: z.ZodNativeEnum<
  typeof Erc20TokenErcType
> = z.nativeEnum(Erc20TokenErcType);

/** @internal */
export const Erc20TokenErcType$outboundSchema: z.ZodNativeEnum<
  typeof Erc20TokenErcType
> = Erc20TokenErcType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Erc20TokenErcType$ {
  /** @deprecated use `Erc20TokenErcType$inboundSchema` instead. */
  export const inboundSchema = Erc20TokenErcType$inboundSchema;
  /** @deprecated use `Erc20TokenErcType$outboundSchema` instead. */
  export const outboundSchema = Erc20TokenErcType$outboundSchema;
}

/** @internal */
export const Erc20Token$inboundSchema: z.ZodType<
  Erc20Token,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  name: z.string(),
  symbol: z.string(),
  decimals: z.number(),
  logoUri: z.string().optional(),
  ercType: Erc20TokenErcType$inboundSchema,
  price: Money$inboundSchema.optional(),
});

/** @internal */
export type Erc20Token$Outbound = {
  address: string;
  name: string;
  symbol: string;
  decimals: number;
  logoUri?: string | undefined;
  ercType: string;
  price?: Money$Outbound | undefined;
};

/** @internal */
export const Erc20Token$outboundSchema: z.ZodType<
  Erc20Token$Outbound,
  z.ZodTypeDef,
  Erc20Token
> = z.object({
  address: z.string(),
  name: z.string(),
  symbol: z.string(),
  decimals: z.number(),
  logoUri: z.string().optional(),
  ercType: Erc20TokenErcType$outboundSchema,
  price: Money$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Erc20Token$ {
  /** @deprecated use `Erc20Token$inboundSchema` instead. */
  export const inboundSchema = Erc20Token$inboundSchema;
  /** @deprecated use `Erc20Token$outboundSchema` instead. */
  export const outboundSchema = Erc20Token$outboundSchema;
  /** @deprecated use `Erc20Token$Outbound` instead. */
  export type Outbound = Erc20Token$Outbound;
}

export function erc20TokenToJSON(erc20Token: Erc20Token): string {
  return JSON.stringify(Erc20Token$outboundSchema.parse(erc20Token));
}

export function erc20TokenFromJSON(
  jsonString: string,
): SafeParseResult<Erc20Token, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Erc20Token$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Erc20Token' from JSON`,
  );
}
