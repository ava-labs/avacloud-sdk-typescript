/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LogsFormatMetadata = {
  /**
   * The IP address of the client that made the request.
   */
  ipAddress: string;
  /**
   * The host for the request made by the client.
   */
  host: string;
  /**
   * The user agent of the client that made the request.
   */
  userAgent: string;
};

/** @internal */
export const LogsFormatMetadata$inboundSchema: z.ZodType<
  LogsFormatMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  ipAddress: z.string(),
  host: z.string(),
  userAgent: z.string(),
});

/** @internal */
export type LogsFormatMetadata$Outbound = {
  ipAddress: string;
  host: string;
  userAgent: string;
};

/** @internal */
export const LogsFormatMetadata$outboundSchema: z.ZodType<
  LogsFormatMetadata$Outbound,
  z.ZodTypeDef,
  LogsFormatMetadata
> = z.object({
  ipAddress: z.string(),
  host: z.string(),
  userAgent: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogsFormatMetadata$ {
  /** @deprecated use `LogsFormatMetadata$inboundSchema` instead. */
  export const inboundSchema = LogsFormatMetadata$inboundSchema;
  /** @deprecated use `LogsFormatMetadata$outboundSchema` instead. */
  export const outboundSchema = LogsFormatMetadata$outboundSchema;
  /** @deprecated use `LogsFormatMetadata$Outbound` instead. */
  export type Outbound = LogsFormatMetadata$Outbound;
}

export function logsFormatMetadataToJSON(
  logsFormatMetadata: LogsFormatMetadata,
): string {
  return JSON.stringify(
    LogsFormatMetadata$outboundSchema.parse(logsFormatMetadata),
  );
}

export function logsFormatMetadataFromJSON(
  jsonString: string,
): SafeParseResult<LogsFormatMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogsFormatMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogsFormatMetadata' from JSON`,
  );
}
