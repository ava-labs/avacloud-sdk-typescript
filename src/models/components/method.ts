/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  TransactionMethodType,
  TransactionMethodType$inboundSchema,
  TransactionMethodType$outboundSchema,
} from "./transactionmethodtype.js";

export type Method = {
  /**
   * The contract call type. NATIVE_TRANSFER indicates a transfer of the native token without any smart-contract interaction. CONTRACT_CALL indicates a smart-contract interaction. CONTRACT_CREATION indicates a smart-contract creation.
   */
  callType: TransactionMethodType;
  /**
   * The contract method hash identifier. The method hash is only set if the `callType` is `CONTRACT_CALL`.
   */
  methodHash: string;
  /**
   * The contract method name including parameter types. If the `callType` is `NATIVE_TRANSFER` this is set to 'Native Transfer'. If the `callType` is `CONTRACT_CREATION` this is set to 'Contract Created'.
   */
  methodName?: string | undefined;
};

/** @internal */
export const Method$inboundSchema: z.ZodType<Method, z.ZodTypeDef, unknown> = z
  .object({
    callType: TransactionMethodType$inboundSchema,
    methodHash: z.string(),
    methodName: z.string().optional(),
  });

/** @internal */
export type Method$Outbound = {
  callType: string;
  methodHash: string;
  methodName?: string | undefined;
};

/** @internal */
export const Method$outboundSchema: z.ZodType<
  Method$Outbound,
  z.ZodTypeDef,
  Method
> = z.object({
  callType: TransactionMethodType$outboundSchema,
  methodHash: z.string(),
  methodName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Method$ {
  /** @deprecated use `Method$inboundSchema` instead. */
  export const inboundSchema = Method$inboundSchema;
  /** @deprecated use `Method$outboundSchema` instead. */
  export const outboundSchema = Method$outboundSchema;
  /** @deprecated use `Method$Outbound` instead. */
  export type Outbound = Method$Outbound;
}
