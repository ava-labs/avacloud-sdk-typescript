/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PrimaryNetworkChainInfo,
  PrimaryNetworkChainInfo$inboundSchema,
  PrimaryNetworkChainInfo$Outbound,
  PrimaryNetworkChainInfo$outboundSchema,
} from "./primarynetworkchaininfo.js";
import {
  Utxo,
  Utxo$inboundSchema,
  Utxo$Outbound,
  Utxo$outboundSchema,
} from "./utxo.js";

export type ListUtxosResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  utxos: Array<Utxo>;
  chainInfo: PrimaryNetworkChainInfo;
};

/** @internal */
export const ListUtxosResponse$inboundSchema: z.ZodType<
  ListUtxosResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  utxos: z.array(Utxo$inboundSchema),
  chainInfo: PrimaryNetworkChainInfo$inboundSchema,
});

/** @internal */
export type ListUtxosResponse$Outbound = {
  nextPageToken?: string | undefined;
  utxos: Array<Utxo$Outbound>;
  chainInfo: PrimaryNetworkChainInfo$Outbound;
};

/** @internal */
export const ListUtxosResponse$outboundSchema: z.ZodType<
  ListUtxosResponse$Outbound,
  z.ZodTypeDef,
  ListUtxosResponse
> = z.object({
  nextPageToken: z.string().optional(),
  utxos: z.array(Utxo$outboundSchema),
  chainInfo: PrimaryNetworkChainInfo$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListUtxosResponse$ {
  /** @deprecated use `ListUtxosResponse$inboundSchema` instead. */
  export const inboundSchema = ListUtxosResponse$inboundSchema;
  /** @deprecated use `ListUtxosResponse$outboundSchema` instead. */
  export const outboundSchema = ListUtxosResponse$outboundSchema;
  /** @deprecated use `ListUtxosResponse$Outbound` instead. */
  export type Outbound = ListUtxosResponse$Outbound;
}

export function listUtxosResponseToJSON(
  listUtxosResponse: ListUtxosResponse,
): string {
  return JSON.stringify(
    ListUtxosResponse$outboundSchema.parse(listUtxosResponse),
  );
}

export function listUtxosResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListUtxosResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListUtxosResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListUtxosResponse' from JSON`,
  );
}
