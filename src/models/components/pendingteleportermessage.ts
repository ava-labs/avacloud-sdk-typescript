/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TeleporterReceipt,
  TeleporterReceipt$inboundSchema,
  TeleporterReceipt$Outbound,
  TeleporterReceipt$outboundSchema,
} from "./teleporterreceipt.js";
import {
  TeleporterRewardDetails,
  TeleporterRewardDetails$inboundSchema,
  TeleporterRewardDetails$Outbound,
  TeleporterRewardDetails$outboundSchema,
} from "./teleporterrewarddetails.js";
import {
  TeleporterSourceTransaction,
  TeleporterSourceTransaction$inboundSchema,
  TeleporterSourceTransaction$Outbound,
  TeleporterSourceTransaction$outboundSchema,
} from "./teleportersourcetransaction.js";

export const PendingTeleporterMessageStatus = {
  Pending: "pending",
} as const;
export type PendingTeleporterMessageStatus = ClosedEnum<
  typeof PendingTeleporterMessageStatus
>;

export type PendingTeleporterMessage = {
  messageId: string;
  teleporterContractAddress: string;
  sourceBlockchainId: string;
  destinationBlockchainId: string;
  sourceEvmChainId: string;
  destinationEvmChainId: string;
  messageNonce: string;
  from: string;
  to: string;
  data?: string | undefined;
  messageExecuted: boolean;
  receipts: Array<TeleporterReceipt>;
  receiptDelivered: boolean;
  rewardDetails: TeleporterRewardDetails;
  sourceTransaction: TeleporterSourceTransaction;
  status: PendingTeleporterMessageStatus;
};

/** @internal */
export const PendingTeleporterMessageStatus$inboundSchema: z.ZodNativeEnum<
  typeof PendingTeleporterMessageStatus
> = z.nativeEnum(PendingTeleporterMessageStatus);

/** @internal */
export const PendingTeleporterMessageStatus$outboundSchema: z.ZodNativeEnum<
  typeof PendingTeleporterMessageStatus
> = PendingTeleporterMessageStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingTeleporterMessageStatus$ {
  /** @deprecated use `PendingTeleporterMessageStatus$inboundSchema` instead. */
  export const inboundSchema = PendingTeleporterMessageStatus$inboundSchema;
  /** @deprecated use `PendingTeleporterMessageStatus$outboundSchema` instead. */
  export const outboundSchema = PendingTeleporterMessageStatus$outboundSchema;
}

/** @internal */
export const PendingTeleporterMessage$inboundSchema: z.ZodType<
  PendingTeleporterMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageId: z.string(),
  teleporterContractAddress: z.string(),
  sourceBlockchainId: z.string(),
  destinationBlockchainId: z.string(),
  sourceEvmChainId: z.string(),
  destinationEvmChainId: z.string(),
  messageNonce: z.string(),
  from: z.string(),
  to: z.string(),
  data: z.string().optional(),
  messageExecuted: z.boolean(),
  receipts: z.array(TeleporterReceipt$inboundSchema),
  receiptDelivered: z.boolean(),
  rewardDetails: TeleporterRewardDetails$inboundSchema,
  sourceTransaction: TeleporterSourceTransaction$inboundSchema,
  status: PendingTeleporterMessageStatus$inboundSchema,
});

/** @internal */
export type PendingTeleporterMessage$Outbound = {
  messageId: string;
  teleporterContractAddress: string;
  sourceBlockchainId: string;
  destinationBlockchainId: string;
  sourceEvmChainId: string;
  destinationEvmChainId: string;
  messageNonce: string;
  from: string;
  to: string;
  data?: string | undefined;
  messageExecuted: boolean;
  receipts: Array<TeleporterReceipt$Outbound>;
  receiptDelivered: boolean;
  rewardDetails: TeleporterRewardDetails$Outbound;
  sourceTransaction: TeleporterSourceTransaction$Outbound;
  status: string;
};

/** @internal */
export const PendingTeleporterMessage$outboundSchema: z.ZodType<
  PendingTeleporterMessage$Outbound,
  z.ZodTypeDef,
  PendingTeleporterMessage
> = z.object({
  messageId: z.string(),
  teleporterContractAddress: z.string(),
  sourceBlockchainId: z.string(),
  destinationBlockchainId: z.string(),
  sourceEvmChainId: z.string(),
  destinationEvmChainId: z.string(),
  messageNonce: z.string(),
  from: z.string(),
  to: z.string(),
  data: z.string().optional(),
  messageExecuted: z.boolean(),
  receipts: z.array(TeleporterReceipt$outboundSchema),
  receiptDelivered: z.boolean(),
  rewardDetails: TeleporterRewardDetails$outboundSchema,
  sourceTransaction: TeleporterSourceTransaction$outboundSchema,
  status: PendingTeleporterMessageStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingTeleporterMessage$ {
  /** @deprecated use `PendingTeleporterMessage$inboundSchema` instead. */
  export const inboundSchema = PendingTeleporterMessage$inboundSchema;
  /** @deprecated use `PendingTeleporterMessage$outboundSchema` instead. */
  export const outboundSchema = PendingTeleporterMessage$outboundSchema;
  /** @deprecated use `PendingTeleporterMessage$Outbound` instead. */
  export type Outbound = PendingTeleporterMessage$Outbound;
}

export function pendingTeleporterMessageToJSON(
  pendingTeleporterMessage: PendingTeleporterMessage,
): string {
  return JSON.stringify(
    PendingTeleporterMessage$outboundSchema.parse(pendingTeleporterMessage),
  );
}

export function pendingTeleporterMessageFromJSON(
  jsonString: string,
): SafeParseResult<PendingTeleporterMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendingTeleporterMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendingTeleporterMessage' from JSON`,
  );
}
