/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    TeleporterReceipt,
    TeleporterReceipt$inboundSchema,
    TeleporterReceipt$Outbound,
    TeleporterReceipt$outboundSchema,
} from "./teleporterreceipt.js";
import {
    TeleporterRewardDetails,
    TeleporterRewardDetails$inboundSchema,
    TeleporterRewardDetails$Outbound,
    TeleporterRewardDetails$outboundSchema,
} from "./teleporterrewarddetails.js";
import {
    TeleporterSourceTransaction,
    TeleporterSourceTransaction$inboundSchema,
    TeleporterSourceTransaction$Outbound,
    TeleporterSourceTransaction$outboundSchema,
} from "./teleportersourcetransaction.js";
import * as z from "zod";

export const Status = {
    Pending: "pending",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type PendingTeleporterMessage = {
    messageId: string;
    teleporterContractAddress: string;
    sourceBlockchainId: string;
    destinationBlockchainId: string;
    sourceEvmChainId: string;
    destinationEvmChainId: string;
    messageNonce: string;
    from: string;
    to: string;
    data?: string | undefined;
    messageExecuted: boolean;
    receipts: Array<TeleporterReceipt>;
    receiptDelivered: boolean;
    rewardDetails: TeleporterRewardDetails;
    sourceTransaction: TeleporterSourceTransaction;
    status: Status;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z.nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> = Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
    /** @deprecated use `Status$inboundSchema` instead. */
    export const inboundSchema = Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const PendingTeleporterMessage$inboundSchema: z.ZodType<
    PendingTeleporterMessage,
    z.ZodTypeDef,
    unknown
> = z.object({
    messageId: z.string(),
    teleporterContractAddress: z.string(),
    sourceBlockchainId: z.string(),
    destinationBlockchainId: z.string(),
    sourceEvmChainId: z.string(),
    destinationEvmChainId: z.string(),
    messageNonce: z.string(),
    from: z.string(),
    to: z.string(),
    data: z.string().optional(),
    messageExecuted: z.boolean(),
    receipts: z.array(TeleporterReceipt$inboundSchema),
    receiptDelivered: z.boolean(),
    rewardDetails: TeleporterRewardDetails$inboundSchema,
    sourceTransaction: TeleporterSourceTransaction$inboundSchema,
    status: Status$inboundSchema,
});

/** @internal */
export type PendingTeleporterMessage$Outbound = {
    messageId: string;
    teleporterContractAddress: string;
    sourceBlockchainId: string;
    destinationBlockchainId: string;
    sourceEvmChainId: string;
    destinationEvmChainId: string;
    messageNonce: string;
    from: string;
    to: string;
    data?: string | undefined;
    messageExecuted: boolean;
    receipts: Array<TeleporterReceipt$Outbound>;
    receiptDelivered: boolean;
    rewardDetails: TeleporterRewardDetails$Outbound;
    sourceTransaction: TeleporterSourceTransaction$Outbound;
    status: string;
};

/** @internal */
export const PendingTeleporterMessage$outboundSchema: z.ZodType<
    PendingTeleporterMessage$Outbound,
    z.ZodTypeDef,
    PendingTeleporterMessage
> = z.object({
    messageId: z.string(),
    teleporterContractAddress: z.string(),
    sourceBlockchainId: z.string(),
    destinationBlockchainId: z.string(),
    sourceEvmChainId: z.string(),
    destinationEvmChainId: z.string(),
    messageNonce: z.string(),
    from: z.string(),
    to: z.string(),
    data: z.string().optional(),
    messageExecuted: z.boolean(),
    receipts: z.array(TeleporterReceipt$outboundSchema),
    receiptDelivered: z.boolean(),
    rewardDetails: TeleporterRewardDetails$outboundSchema,
    sourceTransaction: TeleporterSourceTransaction$outboundSchema,
    status: Status$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendingTeleporterMessage$ {
    /** @deprecated use `PendingTeleporterMessage$inboundSchema` instead. */
    export const inboundSchema = PendingTeleporterMessage$inboundSchema;
    /** @deprecated use `PendingTeleporterMessage$outboundSchema` instead. */
    export const outboundSchema = PendingTeleporterMessage$outboundSchema;
    /** @deprecated use `PendingTeleporterMessage$Outbound` instead. */
    export type Outbound = PendingTeleporterMessage$Outbound;
}
