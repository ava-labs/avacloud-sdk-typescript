/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ERCToken = {
  /**
   * Token contract address
   */
  address: string;
  /**
   * Token name
   */
  name: string;
  /**
   * Token symbol
   */
  symbol: string;
  /**
   * Token decimals
   */
  decimals: number;
  /**
   * Value including decimals
   */
  valueWithDecimals: string;
};

/** @internal */
export const ERCToken$inboundSchema: z.ZodType<
  ERCToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  name: z.string(),
  symbol: z.string(),
  decimals: z.number(),
  valueWithDecimals: z.string(),
});

/** @internal */
export type ERCToken$Outbound = {
  address: string;
  name: string;
  symbol: string;
  decimals: number;
  valueWithDecimals: string;
};

/** @internal */
export const ERCToken$outboundSchema: z.ZodType<
  ERCToken$Outbound,
  z.ZodTypeDef,
  ERCToken
> = z.object({
  address: z.string(),
  name: z.string(),
  symbol: z.string(),
  decimals: z.number(),
  valueWithDecimals: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ERCToken$ {
  /** @deprecated use `ERCToken$inboundSchema` instead. */
  export const inboundSchema = ERCToken$inboundSchema;
  /** @deprecated use `ERCToken$outboundSchema` instead. */
  export const outboundSchema = ERCToken$outboundSchema;
  /** @deprecated use `ERCToken$Outbound` instead. */
  export type Outbound = ERCToken$Outbound;
}

export function ercTokenToJSON(ercToken: ERCToken): string {
  return JSON.stringify(ERCToken$outboundSchema.parse(ercToken));
}

export function ercTokenFromJSON(
  jsonString: string,
): SafeParseResult<ERCToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ERCToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ERCToken' from JSON`,
  );
}
