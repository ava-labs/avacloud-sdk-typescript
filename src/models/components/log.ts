/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Log = {
  /**
   * Contract address
   */
  address: string;
  /**
   * First topic
   */
  topic0: string;
  /**
   * Second topic (optional)
   */
  topic1?: string | undefined;
  /**
   * Third topic (optional)
   */
  topic2?: string | undefined;
  /**
   * Fourth topic (optional)
   */
  topic3?: string | undefined;
  /**
   * Event data
   */
  data: string;
  /**
   * Transaction index
   */
  transactionIndex: number;
  /**
   * Log index
   */
  logIndex: number;
  /**
   * Indicates if the log was removed
   */
  removed: boolean;
};

/** @internal */
export const Log$inboundSchema: z.ZodType<Log, z.ZodTypeDef, unknown> = z
  .object({
    address: z.string(),
    topic0: z.string(),
    topic1: z.string().optional(),
    topic2: z.string().optional(),
    topic3: z.string().optional(),
    data: z.string(),
    transactionIndex: z.number(),
    logIndex: z.number(),
    removed: z.boolean(),
  });

/** @internal */
export type Log$Outbound = {
  address: string;
  topic0: string;
  topic1?: string | undefined;
  topic2?: string | undefined;
  topic3?: string | undefined;
  data: string;
  transactionIndex: number;
  logIndex: number;
  removed: boolean;
};

/** @internal */
export const Log$outboundSchema: z.ZodType<Log$Outbound, z.ZodTypeDef, Log> = z
  .object({
    address: z.string(),
    topic0: z.string(),
    topic1: z.string().optional(),
    topic2: z.string().optional(),
    topic3: z.string().optional(),
    data: z.string(),
    transactionIndex: z.number(),
    logIndex: z.number(),
    removed: z.boolean(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Log$ {
  /** @deprecated use `Log$inboundSchema` instead. */
  export const inboundSchema = Log$inboundSchema;
  /** @deprecated use `Log$outboundSchema` instead. */
  export const outboundSchema = Log$outboundSchema;
  /** @deprecated use `Log$Outbound` instead. */
  export type Outbound = Log$Outbound;
}

export function logToJSON(log: Log): string {
  return JSON.stringify(Log$outboundSchema.parse(log));
}

export function logFromJSON(
  jsonString: string,
): SafeParseResult<Log, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Log$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Log' from JSON`,
  );
}
