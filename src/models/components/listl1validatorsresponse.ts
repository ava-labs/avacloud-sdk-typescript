/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  L1ValidatorDetailsFull,
  L1ValidatorDetailsFull$inboundSchema,
  L1ValidatorDetailsFull$Outbound,
  L1ValidatorDetailsFull$outboundSchema,
} from "./l1validatordetailsfull.js";

export type ListL1ValidatorsResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  /**
   * The list of L1 validations for the given Subnet ID, NodeId or validationId
   */
  validators: Array<L1ValidatorDetailsFull>;
  /**
   * Block height at which the L1 validator's remaining balance is calculated
   */
  blockHeight: string;
};

/** @internal */
export const ListL1ValidatorsResponse$inboundSchema: z.ZodType<
  ListL1ValidatorsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  validators: z.array(L1ValidatorDetailsFull$inboundSchema),
  blockHeight: z.string(),
});

/** @internal */
export type ListL1ValidatorsResponse$Outbound = {
  nextPageToken?: string | undefined;
  validators: Array<L1ValidatorDetailsFull$Outbound>;
  blockHeight: string;
};

/** @internal */
export const ListL1ValidatorsResponse$outboundSchema: z.ZodType<
  ListL1ValidatorsResponse$Outbound,
  z.ZodTypeDef,
  ListL1ValidatorsResponse
> = z.object({
  nextPageToken: z.string().optional(),
  validators: z.array(L1ValidatorDetailsFull$outboundSchema),
  blockHeight: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListL1ValidatorsResponse$ {
  /** @deprecated use `ListL1ValidatorsResponse$inboundSchema` instead. */
  export const inboundSchema = ListL1ValidatorsResponse$inboundSchema;
  /** @deprecated use `ListL1ValidatorsResponse$outboundSchema` instead. */
  export const outboundSchema = ListL1ValidatorsResponse$outboundSchema;
  /** @deprecated use `ListL1ValidatorsResponse$Outbound` instead. */
  export type Outbound = ListL1ValidatorsResponse$Outbound;
}

export function listL1ValidatorsResponseToJSON(
  listL1ValidatorsResponse: ListL1ValidatorsResponse,
): string {
  return JSON.stringify(
    ListL1ValidatorsResponse$outboundSchema.parse(listL1ValidatorsResponse),
  );
}

export function listL1ValidatorsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListL1ValidatorsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListL1ValidatorsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListL1ValidatorsResponse' from JSON`,
  );
}
