/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IcmDestinationTransaction,
  IcmDestinationTransaction$inboundSchema,
  IcmDestinationTransaction$Outbound,
  IcmDestinationTransaction$outboundSchema,
} from "./icmdestinationtransaction.js";
import {
  IcmReceipt,
  IcmReceipt$inboundSchema,
  IcmReceipt$Outbound,
  IcmReceipt$outboundSchema,
} from "./icmreceipt.js";
import {
  IcmRewardDetails,
  IcmRewardDetails$inboundSchema,
  IcmRewardDetails$Outbound,
  IcmRewardDetails$outboundSchema,
} from "./icmrewarddetails.js";
import {
  IcmSourceTransaction,
  IcmSourceTransaction$inboundSchema,
  IcmSourceTransaction$Outbound,
  IcmSourceTransaction$outboundSchema,
} from "./icmsourcetransaction.js";

export const DeliveredIcmMessageStatus = {
  Delivered: "delivered",
} as const;
export type DeliveredIcmMessageStatus = ClosedEnum<
  typeof DeliveredIcmMessageStatus
>;

export type DeliveredIcmMessage = {
  messageId: string;
  icmContractAddress: string;
  sourceBlockchainId: string;
  destinationBlockchainId: string;
  sourceEvmChainId: string;
  destinationEvmChainId: string;
  messageNonce: string;
  from: string;
  to: string;
  data?: string | undefined;
  messageExecuted: boolean;
  receipts: Array<IcmReceipt>;
  receiptDelivered: boolean;
  rewardDetails: IcmRewardDetails;
  sourceTransaction: IcmSourceTransaction;
  destinationTransaction: IcmDestinationTransaction;
  status: DeliveredIcmMessageStatus;
};

/** @internal */
export const DeliveredIcmMessageStatus$inboundSchema: z.ZodNativeEnum<
  typeof DeliveredIcmMessageStatus
> = z.nativeEnum(DeliveredIcmMessageStatus);

/** @internal */
export const DeliveredIcmMessageStatus$outboundSchema: z.ZodNativeEnum<
  typeof DeliveredIcmMessageStatus
> = DeliveredIcmMessageStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveredIcmMessageStatus$ {
  /** @deprecated use `DeliveredIcmMessageStatus$inboundSchema` instead. */
  export const inboundSchema = DeliveredIcmMessageStatus$inboundSchema;
  /** @deprecated use `DeliveredIcmMessageStatus$outboundSchema` instead. */
  export const outboundSchema = DeliveredIcmMessageStatus$outboundSchema;
}

/** @internal */
export const DeliveredIcmMessage$inboundSchema: z.ZodType<
  DeliveredIcmMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageId: z.string(),
  icmContractAddress: z.string(),
  sourceBlockchainId: z.string(),
  destinationBlockchainId: z.string(),
  sourceEvmChainId: z.string(),
  destinationEvmChainId: z.string(),
  messageNonce: z.string(),
  from: z.string(),
  to: z.string(),
  data: z.string().optional(),
  messageExecuted: z.boolean(),
  receipts: z.array(IcmReceipt$inboundSchema),
  receiptDelivered: z.boolean(),
  rewardDetails: IcmRewardDetails$inboundSchema,
  sourceTransaction: IcmSourceTransaction$inboundSchema,
  destinationTransaction: IcmDestinationTransaction$inboundSchema,
  status: DeliveredIcmMessageStatus$inboundSchema,
});

/** @internal */
export type DeliveredIcmMessage$Outbound = {
  messageId: string;
  icmContractAddress: string;
  sourceBlockchainId: string;
  destinationBlockchainId: string;
  sourceEvmChainId: string;
  destinationEvmChainId: string;
  messageNonce: string;
  from: string;
  to: string;
  data?: string | undefined;
  messageExecuted: boolean;
  receipts: Array<IcmReceipt$Outbound>;
  receiptDelivered: boolean;
  rewardDetails: IcmRewardDetails$Outbound;
  sourceTransaction: IcmSourceTransaction$Outbound;
  destinationTransaction: IcmDestinationTransaction$Outbound;
  status: string;
};

/** @internal */
export const DeliveredIcmMessage$outboundSchema: z.ZodType<
  DeliveredIcmMessage$Outbound,
  z.ZodTypeDef,
  DeliveredIcmMessage
> = z.object({
  messageId: z.string(),
  icmContractAddress: z.string(),
  sourceBlockchainId: z.string(),
  destinationBlockchainId: z.string(),
  sourceEvmChainId: z.string(),
  destinationEvmChainId: z.string(),
  messageNonce: z.string(),
  from: z.string(),
  to: z.string(),
  data: z.string().optional(),
  messageExecuted: z.boolean(),
  receipts: z.array(IcmReceipt$outboundSchema),
  receiptDelivered: z.boolean(),
  rewardDetails: IcmRewardDetails$outboundSchema,
  sourceTransaction: IcmSourceTransaction$outboundSchema,
  destinationTransaction: IcmDestinationTransaction$outboundSchema,
  status: DeliveredIcmMessageStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveredIcmMessage$ {
  /** @deprecated use `DeliveredIcmMessage$inboundSchema` instead. */
  export const inboundSchema = DeliveredIcmMessage$inboundSchema;
  /** @deprecated use `DeliveredIcmMessage$outboundSchema` instead. */
  export const outboundSchema = DeliveredIcmMessage$outboundSchema;
  /** @deprecated use `DeliveredIcmMessage$Outbound` instead. */
  export type Outbound = DeliveredIcmMessage$Outbound;
}

export function deliveredIcmMessageToJSON(
  deliveredIcmMessage: DeliveredIcmMessage,
): string {
  return JSON.stringify(
    DeliveredIcmMessage$outboundSchema.parse(deliveredIcmMessage),
  );
}

export function deliveredIcmMessageFromJSON(
  jsonString: string,
): SafeParseResult<DeliveredIcmMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeliveredIcmMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeliveredIcmMessage' from JSON`,
  );
}
