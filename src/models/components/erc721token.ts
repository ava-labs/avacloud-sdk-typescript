/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    Erc721TokenMetadata,
    Erc721TokenMetadata$inboundSchema,
    Erc721TokenMetadata$Outbound,
    Erc721TokenMetadata$outboundSchema,
} from "./erc721tokenmetadata.js";
import * as z from "zod";

export const ErcType = {
    Erc721: "ERC-721",
} as const;
export type ErcType = ClosedEnum<typeof ErcType>;

export type Erc721Token = {
    /**
     * A wallet or contract address in mixed-case checksum encoding.
     */
    address: string;
    /**
     * The contract name.
     */
    name: string;
    /**
     * The contract symbol.
     */
    symbol: string;
    ercType: ErcType;
    tokenId: string;
    tokenUri: string;
    metadata: Erc721TokenMetadata;
    /**
     * A wallet or contract address in mixed-case checksum encoding.
     */
    ownerAddress?: string | undefined;
};

/** @internal */
export const ErcType$inboundSchema: z.ZodNativeEnum<typeof ErcType> = z.nativeEnum(ErcType);

/** @internal */
export const ErcType$outboundSchema: z.ZodNativeEnum<typeof ErcType> = ErcType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErcType$ {
    /** @deprecated use `ErcType$inboundSchema` instead. */
    export const inboundSchema = ErcType$inboundSchema;
    /** @deprecated use `ErcType$outboundSchema` instead. */
    export const outboundSchema = ErcType$outboundSchema;
}

/** @internal */
export const Erc721Token$inboundSchema: z.ZodType<Erc721Token, z.ZodTypeDef, unknown> = z.object({
    address: z.string(),
    name: z.string(),
    symbol: z.string(),
    ercType: ErcType$inboundSchema,
    tokenId: z.string(),
    tokenUri: z.string(),
    metadata: Erc721TokenMetadata$inboundSchema,
    ownerAddress: z.string().optional(),
});

/** @internal */
export type Erc721Token$Outbound = {
    address: string;
    name: string;
    symbol: string;
    ercType: string;
    tokenId: string;
    tokenUri: string;
    metadata: Erc721TokenMetadata$Outbound;
    ownerAddress?: string | undefined;
};

/** @internal */
export const Erc721Token$outboundSchema: z.ZodType<
    Erc721Token$Outbound,
    z.ZodTypeDef,
    Erc721Token
> = z.object({
    address: z.string(),
    name: z.string(),
    symbol: z.string(),
    ercType: ErcType$outboundSchema,
    tokenId: z.string(),
    tokenUri: z.string(),
    metadata: Erc721TokenMetadata$outboundSchema,
    ownerAddress: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Erc721Token$ {
    /** @deprecated use `Erc721Token$inboundSchema` instead. */
    export const inboundSchema = Erc721Token$inboundSchema;
    /** @deprecated use `Erc721Token$outboundSchema` instead. */
    export const outboundSchema = Erc721Token$outboundSchema;
    /** @deprecated use `Erc721Token$Outbound` instead. */
    export type Outbound = Erc721Token$Outbound;
}
