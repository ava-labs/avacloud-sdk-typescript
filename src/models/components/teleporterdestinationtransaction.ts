/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TeleporterDestinationTransaction = {
  txHash: string;
  timestamp: number;
  gasSpent: string;
  rewardRedeemer: string;
  delivererAddress: string;
};

/** @internal */
export const TeleporterDestinationTransaction$inboundSchema: z.ZodType<
  TeleporterDestinationTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  txHash: z.string(),
  timestamp: z.number(),
  gasSpent: z.string(),
  rewardRedeemer: z.string(),
  delivererAddress: z.string(),
});

/** @internal */
export type TeleporterDestinationTransaction$Outbound = {
  txHash: string;
  timestamp: number;
  gasSpent: string;
  rewardRedeemer: string;
  delivererAddress: string;
};

/** @internal */
export const TeleporterDestinationTransaction$outboundSchema: z.ZodType<
  TeleporterDestinationTransaction$Outbound,
  z.ZodTypeDef,
  TeleporterDestinationTransaction
> = z.object({
  txHash: z.string(),
  timestamp: z.number(),
  gasSpent: z.string(),
  rewardRedeemer: z.string(),
  delivererAddress: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeleporterDestinationTransaction$ {
  /** @deprecated use `TeleporterDestinationTransaction$inboundSchema` instead. */
  export const inboundSchema = TeleporterDestinationTransaction$inboundSchema;
  /** @deprecated use `TeleporterDestinationTransaction$outboundSchema` instead. */
  export const outboundSchema = TeleporterDestinationTransaction$outboundSchema;
  /** @deprecated use `TeleporterDestinationTransaction$Outbound` instead. */
  export type Outbound = TeleporterDestinationTransaction$Outbound;
}

export function teleporterDestinationTransactionToJSON(
  teleporterDestinationTransaction: TeleporterDestinationTransaction,
): string {
  return JSON.stringify(
    TeleporterDestinationTransaction$outboundSchema.parse(
      teleporterDestinationTransaction,
    ),
  );
}

export function teleporterDestinationTransactionFromJSON(
  jsonString: string,
): SafeParseResult<TeleporterDestinationTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeleporterDestinationTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeleporterDestinationTransaction' from JSON`,
  );
}
