/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SignatureAggregatorRequest = {
  message: string;
  justification?: string | undefined;
  signingSubnetId?: string | undefined;
  quorumPercentage?: number | undefined;
};

/** @internal */
export const SignatureAggregatorRequest$inboundSchema: z.ZodType<
  SignatureAggregatorRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string(),
  justification: z.string().optional(),
  signingSubnetId: z.string().optional(),
  quorumPercentage: z.number().optional(),
});

/** @internal */
export type SignatureAggregatorRequest$Outbound = {
  message: string;
  justification?: string | undefined;
  signingSubnetId?: string | undefined;
  quorumPercentage?: number | undefined;
};

/** @internal */
export const SignatureAggregatorRequest$outboundSchema: z.ZodType<
  SignatureAggregatorRequest$Outbound,
  z.ZodTypeDef,
  SignatureAggregatorRequest
> = z.object({
  message: z.string(),
  justification: z.string().optional(),
  signingSubnetId: z.string().optional(),
  quorumPercentage: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignatureAggregatorRequest$ {
  /** @deprecated use `SignatureAggregatorRequest$inboundSchema` instead. */
  export const inboundSchema = SignatureAggregatorRequest$inboundSchema;
  /** @deprecated use `SignatureAggregatorRequest$outboundSchema` instead. */
  export const outboundSchema = SignatureAggregatorRequest$outboundSchema;
  /** @deprecated use `SignatureAggregatorRequest$Outbound` instead. */
  export type Outbound = SignatureAggregatorRequest$Outbound;
}

export function signatureAggregatorRequestToJSON(
  signatureAggregatorRequest: SignatureAggregatorRequest,
): string {
  return JSON.stringify(
    SignatureAggregatorRequest$outboundSchema.parse(signatureAggregatorRequest),
  );
}

export function signatureAggregatorRequestFromJSON(
  jsonString: string,
): SafeParseResult<SignatureAggregatorRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignatureAggregatorRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignatureAggregatorRequest' from JSON`,
  );
}
