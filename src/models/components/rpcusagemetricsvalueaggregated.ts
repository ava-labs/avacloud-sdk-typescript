/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * Column name used for data aggregation
 */
export const RpcUsageMetricsValueAggregatedGroupedBy = {
  RpcMethod: "rpcMethod",
  ResponseCode: "responseCode",
  RlBypassToken: "rlBypassToken",
  None: "None",
} as const;
/**
 * Column name used for data aggregation
 */
export type RpcUsageMetricsValueAggregatedGroupedBy = ClosedEnum<
  typeof RpcUsageMetricsValueAggregatedGroupedBy
>;

/**
 * The value of the column used for data aggregation
 */
export type RpcUsageMetricsValueAggregatedGroupValue = string | number;

export type RpcUsageMetricsValueAggregated = {
  /**
   * The total number of requests
   */
  totalRequests: number;
  /**
   * The number of API credits used
   */
  apiCreditsUsed: number;
  /**
   * The number of requests per second
   */
  requestsPerSecond: number;
  /**
   * The success rate percentage
   */
  successRatePercent: number;
  /**
   * The median response time in milliseconds
   */
  medianResponseTimeMsecs: number;
  /**
   * The number of invalid requests
   */
  invalidRequests: number;
  /**
   * Column name used for data aggregation
   */
  groupedBy: RpcUsageMetricsValueAggregatedGroupedBy;
  /**
   * The value of the column used for data aggregation
   */
  groupValue?: string | number | undefined;
};

/** @internal */
export const RpcUsageMetricsValueAggregatedGroupedBy$inboundSchema:
  z.ZodNativeEnum<typeof RpcUsageMetricsValueAggregatedGroupedBy> = z
    .nativeEnum(RpcUsageMetricsValueAggregatedGroupedBy);

/** @internal */
export const RpcUsageMetricsValueAggregatedGroupedBy$outboundSchema:
  z.ZodNativeEnum<typeof RpcUsageMetricsValueAggregatedGroupedBy> =
    RpcUsageMetricsValueAggregatedGroupedBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcUsageMetricsValueAggregatedGroupedBy$ {
  /** @deprecated use `RpcUsageMetricsValueAggregatedGroupedBy$inboundSchema` instead. */
  export const inboundSchema =
    RpcUsageMetricsValueAggregatedGroupedBy$inboundSchema;
  /** @deprecated use `RpcUsageMetricsValueAggregatedGroupedBy$outboundSchema` instead. */
  export const outboundSchema =
    RpcUsageMetricsValueAggregatedGroupedBy$outboundSchema;
}

/** @internal */
export const RpcUsageMetricsValueAggregatedGroupValue$inboundSchema: z.ZodType<
  RpcUsageMetricsValueAggregatedGroupValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type RpcUsageMetricsValueAggregatedGroupValue$Outbound = string | number;

/** @internal */
export const RpcUsageMetricsValueAggregatedGroupValue$outboundSchema: z.ZodType<
  RpcUsageMetricsValueAggregatedGroupValue$Outbound,
  z.ZodTypeDef,
  RpcUsageMetricsValueAggregatedGroupValue
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcUsageMetricsValueAggregatedGroupValue$ {
  /** @deprecated use `RpcUsageMetricsValueAggregatedGroupValue$inboundSchema` instead. */
  export const inboundSchema =
    RpcUsageMetricsValueAggregatedGroupValue$inboundSchema;
  /** @deprecated use `RpcUsageMetricsValueAggregatedGroupValue$outboundSchema` instead. */
  export const outboundSchema =
    RpcUsageMetricsValueAggregatedGroupValue$outboundSchema;
  /** @deprecated use `RpcUsageMetricsValueAggregatedGroupValue$Outbound` instead. */
  export type Outbound = RpcUsageMetricsValueAggregatedGroupValue$Outbound;
}

/** @internal */
export const RpcUsageMetricsValueAggregated$inboundSchema: z.ZodType<
  RpcUsageMetricsValueAggregated,
  z.ZodTypeDef,
  unknown
> = z.object({
  totalRequests: z.number(),
  apiCreditsUsed: z.number(),
  requestsPerSecond: z.number(),
  successRatePercent: z.number(),
  medianResponseTimeMsecs: z.number(),
  invalidRequests: z.number(),
  groupedBy: RpcUsageMetricsValueAggregatedGroupedBy$inboundSchema,
  groupValue: z.union([z.string(), z.number()]).optional(),
});

/** @internal */
export type RpcUsageMetricsValueAggregated$Outbound = {
  totalRequests: number;
  apiCreditsUsed: number;
  requestsPerSecond: number;
  successRatePercent: number;
  medianResponseTimeMsecs: number;
  invalidRequests: number;
  groupedBy: string;
  groupValue?: string | number | undefined;
};

/** @internal */
export const RpcUsageMetricsValueAggregated$outboundSchema: z.ZodType<
  RpcUsageMetricsValueAggregated$Outbound,
  z.ZodTypeDef,
  RpcUsageMetricsValueAggregated
> = z.object({
  totalRequests: z.number(),
  apiCreditsUsed: z.number(),
  requestsPerSecond: z.number(),
  successRatePercent: z.number(),
  medianResponseTimeMsecs: z.number(),
  invalidRequests: z.number(),
  groupedBy: RpcUsageMetricsValueAggregatedGroupedBy$outboundSchema,
  groupValue: z.union([z.string(), z.number()]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcUsageMetricsValueAggregated$ {
  /** @deprecated use `RpcUsageMetricsValueAggregated$inboundSchema` instead. */
  export const inboundSchema = RpcUsageMetricsValueAggregated$inboundSchema;
  /** @deprecated use `RpcUsageMetricsValueAggregated$outboundSchema` instead. */
  export const outboundSchema = RpcUsageMetricsValueAggregated$outboundSchema;
  /** @deprecated use `RpcUsageMetricsValueAggregated$Outbound` instead. */
  export type Outbound = RpcUsageMetricsValueAggregated$Outbound;
}
