/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PendingReward,
  PendingReward$inboundSchema,
  PendingReward$Outbound,
  PendingReward$outboundSchema,
} from "./pendingreward.js";

export type ListPendingRewardsResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  pendingRewards: Array<PendingReward>;
};

/** @internal */
export const ListPendingRewardsResponse$inboundSchema: z.ZodType<
  ListPendingRewardsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  pendingRewards: z.array(PendingReward$inboundSchema),
});

/** @internal */
export type ListPendingRewardsResponse$Outbound = {
  nextPageToken?: string | undefined;
  pendingRewards: Array<PendingReward$Outbound>;
};

/** @internal */
export const ListPendingRewardsResponse$outboundSchema: z.ZodType<
  ListPendingRewardsResponse$Outbound,
  z.ZodTypeDef,
  ListPendingRewardsResponse
> = z.object({
  nextPageToken: z.string().optional(),
  pendingRewards: z.array(PendingReward$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPendingRewardsResponse$ {
  /** @deprecated use `ListPendingRewardsResponse$inboundSchema` instead. */
  export const inboundSchema = ListPendingRewardsResponse$inboundSchema;
  /** @deprecated use `ListPendingRewardsResponse$outboundSchema` instead. */
  export const outboundSchema = ListPendingRewardsResponse$outboundSchema;
  /** @deprecated use `ListPendingRewardsResponse$Outbound` instead. */
  export type Outbound = ListPendingRewardsResponse$Outbound;
}

export function listPendingRewardsResponseToJSON(
  listPendingRewardsResponse: ListPendingRewardsResponse,
): string {
  return JSON.stringify(
    ListPendingRewardsResponse$outboundSchema.parse(listPendingRewardsResponse),
  );
}

export function listPendingRewardsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPendingRewardsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPendingRewardsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPendingRewardsResponse' from JSON`,
  );
}
