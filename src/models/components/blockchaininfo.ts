/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BlockchainInfo = {
  blockchainId: string;
};

/** @internal */
export const BlockchainInfo$inboundSchema: z.ZodType<
  BlockchainInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  blockchainId: z.string(),
});

/** @internal */
export type BlockchainInfo$Outbound = {
  blockchainId: string;
};

/** @internal */
export const BlockchainInfo$outboundSchema: z.ZodType<
  BlockchainInfo$Outbound,
  z.ZodTypeDef,
  BlockchainInfo
> = z.object({
  blockchainId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BlockchainInfo$ {
  /** @deprecated use `BlockchainInfo$inboundSchema` instead. */
  export const inboundSchema = BlockchainInfo$inboundSchema;
  /** @deprecated use `BlockchainInfo$outboundSchema` instead. */
  export const outboundSchema = BlockchainInfo$outboundSchema;
  /** @deprecated use `BlockchainInfo$Outbound` instead. */
  export type Outbound = BlockchainInfo$Outbound;
}

export function blockchainInfoToJSON(blockchainInfo: BlockchainInfo): string {
  return JSON.stringify(BlockchainInfo$outboundSchema.parse(blockchainInfo));
}

export function blockchainInfoFromJSON(
  jsonString: string,
): SafeParseResult<BlockchainInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BlockchainInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BlockchainInfo' from JSON`,
  );
}
