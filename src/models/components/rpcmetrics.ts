/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RpcUsageMetricsValueAggregated,
  RpcUsageMetricsValueAggregated$inboundSchema,
  RpcUsageMetricsValueAggregated$Outbound,
  RpcUsageMetricsValueAggregated$outboundSchema,
} from "./rpcusagemetricsvalueaggregated.js";

export type RpcMetrics = {
  /**
   * The timestamp of the metrics value
   */
  timestamp: number;
  /**
   * The metrics values for the timestamp
   */
  values: Array<RpcUsageMetricsValueAggregated>;
};

/** @internal */
export const RpcMetrics$inboundSchema: z.ZodType<
  RpcMetrics,
  z.ZodTypeDef,
  unknown
> = z.object({
  timestamp: z.number(),
  values: z.array(RpcUsageMetricsValueAggregated$inboundSchema),
});

/** @internal */
export type RpcMetrics$Outbound = {
  timestamp: number;
  values: Array<RpcUsageMetricsValueAggregated$Outbound>;
};

/** @internal */
export const RpcMetrics$outboundSchema: z.ZodType<
  RpcMetrics$Outbound,
  z.ZodTypeDef,
  RpcMetrics
> = z.object({
  timestamp: z.number(),
  values: z.array(RpcUsageMetricsValueAggregated$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcMetrics$ {
  /** @deprecated use `RpcMetrics$inboundSchema` instead. */
  export const inboundSchema = RpcMetrics$inboundSchema;
  /** @deprecated use `RpcMetrics$outboundSchema` instead. */
  export const outboundSchema = RpcMetrics$outboundSchema;
  /** @deprecated use `RpcMetrics$Outbound` instead. */
  export type Outbound = RpcMetrics$Outbound;
}

export function rpcMetricsToJSON(rpcMetrics: RpcMetrics): string {
  return JSON.stringify(RpcMetrics$outboundSchema.parse(rpcMetrics));
}

export function rpcMetricsFromJSON(
  jsonString: string,
): SafeParseResult<RpcMetrics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RpcMetrics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RpcMetrics' from JSON`,
  );
}
