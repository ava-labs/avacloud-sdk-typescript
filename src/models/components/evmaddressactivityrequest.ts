/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AddressActivityMetadata,
  AddressActivityMetadata$inboundSchema,
  AddressActivityMetadata$Outbound,
  AddressActivityMetadata$outboundSchema,
} from "./addressactivitymetadata.js";
import {
  PrimaryNetworkType,
  PrimaryNetworkType$inboundSchema,
  PrimaryNetworkType$outboundSchema,
} from "./primarynetworktype.js";

export const EVMAddressActivityRequestEventType = {
  AddressActivity: "address_activity",
} as const;
export type EVMAddressActivityRequestEventType = ClosedEnum<
  typeof EVMAddressActivityRequestEventType
>;

export type EVMAddressActivityRequestMetadata = AddressActivityMetadata;

export type EVMAddressActivityRequest = {
  eventType: EVMAddressActivityRequestEventType;
  url: string;
  chainId: string;
  network?: PrimaryNetworkType | undefined;
  name?: string | undefined;
  description?: string | undefined;
  /**
   * Whether to include traces in the webhook payload. Traces are only available for C-Chain on chainId 43113 and 43114.
   */
  includeInternalTxs?: boolean | undefined;
  /**
   * Whether to include logs in the webhook payload.
   */
  includeLogs?: boolean | undefined;
  metadata: AddressActivityMetadata;
};

/** @internal */
export const EVMAddressActivityRequestEventType$inboundSchema: z.ZodNativeEnum<
  typeof EVMAddressActivityRequestEventType
> = z.nativeEnum(EVMAddressActivityRequestEventType);

/** @internal */
export const EVMAddressActivityRequestEventType$outboundSchema: z.ZodNativeEnum<
  typeof EVMAddressActivityRequestEventType
> = EVMAddressActivityRequestEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EVMAddressActivityRequestEventType$ {
  /** @deprecated use `EVMAddressActivityRequestEventType$inboundSchema` instead. */
  export const inboundSchema = EVMAddressActivityRequestEventType$inboundSchema;
  /** @deprecated use `EVMAddressActivityRequestEventType$outboundSchema` instead. */
  export const outboundSchema =
    EVMAddressActivityRequestEventType$outboundSchema;
}

/** @internal */
export const EVMAddressActivityRequestMetadata$inboundSchema: z.ZodType<
  EVMAddressActivityRequestMetadata,
  z.ZodTypeDef,
  unknown
> = AddressActivityMetadata$inboundSchema;

/** @internal */
export type EVMAddressActivityRequestMetadata$Outbound =
  AddressActivityMetadata$Outbound;

/** @internal */
export const EVMAddressActivityRequestMetadata$outboundSchema: z.ZodType<
  EVMAddressActivityRequestMetadata$Outbound,
  z.ZodTypeDef,
  EVMAddressActivityRequestMetadata
> = AddressActivityMetadata$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EVMAddressActivityRequestMetadata$ {
  /** @deprecated use `EVMAddressActivityRequestMetadata$inboundSchema` instead. */
  export const inboundSchema = EVMAddressActivityRequestMetadata$inboundSchema;
  /** @deprecated use `EVMAddressActivityRequestMetadata$outboundSchema` instead. */
  export const outboundSchema =
    EVMAddressActivityRequestMetadata$outboundSchema;
  /** @deprecated use `EVMAddressActivityRequestMetadata$Outbound` instead. */
  export type Outbound = EVMAddressActivityRequestMetadata$Outbound;
}

export function evmAddressActivityRequestMetadataToJSON(
  evmAddressActivityRequestMetadata: EVMAddressActivityRequestMetadata,
): string {
  return JSON.stringify(
    EVMAddressActivityRequestMetadata$outboundSchema.parse(
      evmAddressActivityRequestMetadata,
    ),
  );
}

export function evmAddressActivityRequestMetadataFromJSON(
  jsonString: string,
): SafeParseResult<EVMAddressActivityRequestMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EVMAddressActivityRequestMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EVMAddressActivityRequestMetadata' from JSON`,
  );
}

/** @internal */
export const EVMAddressActivityRequest$inboundSchema: z.ZodType<
  EVMAddressActivityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventType: EVMAddressActivityRequestEventType$inboundSchema,
  url: z.string(),
  chainId: z.string(),
  network: PrimaryNetworkType$inboundSchema.optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  includeInternalTxs: z.boolean().optional(),
  includeLogs: z.boolean().optional(),
  metadata: AddressActivityMetadata$inboundSchema,
});

/** @internal */
export type EVMAddressActivityRequest$Outbound = {
  eventType: string;
  url: string;
  chainId: string;
  network?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  includeInternalTxs?: boolean | undefined;
  includeLogs?: boolean | undefined;
  metadata: AddressActivityMetadata$Outbound;
};

/** @internal */
export const EVMAddressActivityRequest$outboundSchema: z.ZodType<
  EVMAddressActivityRequest$Outbound,
  z.ZodTypeDef,
  EVMAddressActivityRequest
> = z.object({
  eventType: EVMAddressActivityRequestEventType$outboundSchema,
  url: z.string(),
  chainId: z.string(),
  network: PrimaryNetworkType$outboundSchema.optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  includeInternalTxs: z.boolean().optional(),
  includeLogs: z.boolean().optional(),
  metadata: AddressActivityMetadata$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EVMAddressActivityRequest$ {
  /** @deprecated use `EVMAddressActivityRequest$inboundSchema` instead. */
  export const inboundSchema = EVMAddressActivityRequest$inboundSchema;
  /** @deprecated use `EVMAddressActivityRequest$outboundSchema` instead. */
  export const outboundSchema = EVMAddressActivityRequest$outboundSchema;
  /** @deprecated use `EVMAddressActivityRequest$Outbound` instead. */
  export type Outbound = EVMAddressActivityRequest$Outbound;
}

export function evmAddressActivityRequestToJSON(
  evmAddressActivityRequest: EVMAddressActivityRequest,
): string {
  return JSON.stringify(
    EVMAddressActivityRequest$outboundSchema.parse(evmAddressActivityRequest),
  );
}

export function evmAddressActivityRequestFromJSON(
  jsonString: string,
): SafeParseResult<EVMAddressActivityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EVMAddressActivityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EVMAddressActivityRequest' from JSON`,
  );
}
