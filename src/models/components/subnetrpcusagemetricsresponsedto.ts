/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  RpcMetrics,
  RpcMetrics$inboundSchema,
  RpcMetrics$Outbound,
  RpcMetrics$outboundSchema,
} from "./rpcmetrics.js";

export type SubnetRpcUsageMetricsResponseDTO = {
  /**
   * Duration in which the metrics value is aggregated
   */
  aggregateDuration: string;
  /**
   * Metrics values
   */
  metrics: Array<RpcMetrics>;
  /**
   * ChainId for which the metrics are aggregated
   */
  chainId: string;
};

/** @internal */
export const SubnetRpcUsageMetricsResponseDTO$inboundSchema: z.ZodType<
  SubnetRpcUsageMetricsResponseDTO,
  z.ZodTypeDef,
  unknown
> = z.object({
  aggregateDuration: z.string(),
  metrics: z.array(RpcMetrics$inboundSchema),
  chainId: z.string(),
});

/** @internal */
export type SubnetRpcUsageMetricsResponseDTO$Outbound = {
  aggregateDuration: string;
  metrics: Array<RpcMetrics$Outbound>;
  chainId: string;
};

/** @internal */
export const SubnetRpcUsageMetricsResponseDTO$outboundSchema: z.ZodType<
  SubnetRpcUsageMetricsResponseDTO$Outbound,
  z.ZodTypeDef,
  SubnetRpcUsageMetricsResponseDTO
> = z.object({
  aggregateDuration: z.string(),
  metrics: z.array(RpcMetrics$outboundSchema),
  chainId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubnetRpcUsageMetricsResponseDTO$ {
  /** @deprecated use `SubnetRpcUsageMetricsResponseDTO$inboundSchema` instead. */
  export const inboundSchema = SubnetRpcUsageMetricsResponseDTO$inboundSchema;
  /** @deprecated use `SubnetRpcUsageMetricsResponseDTO$outboundSchema` instead. */
  export const outboundSchema = SubnetRpcUsageMetricsResponseDTO$outboundSchema;
  /** @deprecated use `SubnetRpcUsageMetricsResponseDTO$Outbound` instead. */
  export type Outbound = SubnetRpcUsageMetricsResponseDTO$Outbound;
}

export function subnetRpcUsageMetricsResponseDTOToJSON(
  subnetRpcUsageMetricsResponseDTO: SubnetRpcUsageMetricsResponseDTO,
): string {
  return JSON.stringify(
    SubnetRpcUsageMetricsResponseDTO$outboundSchema.parse(
      subnetRpcUsageMetricsResponseDTO,
    ),
  );
}

export function subnetRpcUsageMetricsResponseDTOFromJSON(
  jsonString: string,
): SafeParseResult<SubnetRpcUsageMetricsResponseDTO, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SubnetRpcUsageMetricsResponseDTO$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SubnetRpcUsageMetricsResponseDTO' from JSON`,
  );
}
