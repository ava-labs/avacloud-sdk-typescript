/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TeleporterSourceTransaction = {
  txHash: string;
  timestamp: number;
  gasSpent: string;
};

/** @internal */
export const TeleporterSourceTransaction$inboundSchema: z.ZodType<
  TeleporterSourceTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  txHash: z.string(),
  timestamp: z.number(),
  gasSpent: z.string(),
});

/** @internal */
export type TeleporterSourceTransaction$Outbound = {
  txHash: string;
  timestamp: number;
  gasSpent: string;
};

/** @internal */
export const TeleporterSourceTransaction$outboundSchema: z.ZodType<
  TeleporterSourceTransaction$Outbound,
  z.ZodTypeDef,
  TeleporterSourceTransaction
> = z.object({
  txHash: z.string(),
  timestamp: z.number(),
  gasSpent: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TeleporterSourceTransaction$ {
  /** @deprecated use `TeleporterSourceTransaction$inboundSchema` instead. */
  export const inboundSchema = TeleporterSourceTransaction$inboundSchema;
  /** @deprecated use `TeleporterSourceTransaction$outboundSchema` instead. */
  export const outboundSchema = TeleporterSourceTransaction$outboundSchema;
  /** @deprecated use `TeleporterSourceTransaction$Outbound` instead. */
  export type Outbound = TeleporterSourceTransaction$Outbound;
}

export function teleporterSourceTransactionToJSON(
  teleporterSourceTransaction: TeleporterSourceTransaction,
): string {
  return JSON.stringify(
    TeleporterSourceTransaction$outboundSchema.parse(
      teleporterSourceTransaction,
    ),
  );
}

export function teleporterSourceTransactionFromJSON(
  jsonString: string,
): SafeParseResult<TeleporterSourceTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TeleporterSourceTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TeleporterSourceTransaction' from JSON`,
  );
}
