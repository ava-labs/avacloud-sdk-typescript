/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    RpcErrorDto,
    RpcErrorDto$inboundSchema,
    RpcErrorDto$Outbound,
    RpcErrorDto$outboundSchema,
} from "./rpcerrordto.js";
import * as z from "zod";

export type RpcErrorResponseDtoId = string | number;

export type RpcErrorResponseDto = {
    jsonrpc: string;
    id?: string | number | undefined;
    error: RpcErrorDto;
};

/** @internal */
export const RpcErrorResponseDtoId$inboundSchema: z.ZodType<
    RpcErrorResponseDtoId,
    z.ZodTypeDef,
    unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type RpcErrorResponseDtoId$Outbound = string | number;

/** @internal */
export const RpcErrorResponseDtoId$outboundSchema: z.ZodType<
    RpcErrorResponseDtoId$Outbound,
    z.ZodTypeDef,
    RpcErrorResponseDtoId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcErrorResponseDtoId$ {
    /** @deprecated use `RpcErrorResponseDtoId$inboundSchema` instead. */
    export const inboundSchema = RpcErrorResponseDtoId$inboundSchema;
    /** @deprecated use `RpcErrorResponseDtoId$outboundSchema` instead. */
    export const outboundSchema = RpcErrorResponseDtoId$outboundSchema;
    /** @deprecated use `RpcErrorResponseDtoId$Outbound` instead. */
    export type Outbound = RpcErrorResponseDtoId$Outbound;
}

/** @internal */
export const RpcErrorResponseDto$inboundSchema: z.ZodType<
    RpcErrorResponseDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    jsonrpc: z.string(),
    id: z.union([z.string(), z.number()]).optional(),
    error: RpcErrorDto$inboundSchema,
});

/** @internal */
export type RpcErrorResponseDto$Outbound = {
    jsonrpc: string;
    id?: string | number | undefined;
    error: RpcErrorDto$Outbound;
};

/** @internal */
export const RpcErrorResponseDto$outboundSchema: z.ZodType<
    RpcErrorResponseDto$Outbound,
    z.ZodTypeDef,
    RpcErrorResponseDto
> = z.object({
    jsonrpc: z.string(),
    id: z.union([z.string(), z.number()]).optional(),
    error: RpcErrorDto$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcErrorResponseDto$ {
    /** @deprecated use `RpcErrorResponseDto$inboundSchema` instead. */
    export const inboundSchema = RpcErrorResponseDto$inboundSchema;
    /** @deprecated use `RpcErrorResponseDto$outboundSchema` instead. */
    export const outboundSchema = RpcErrorResponseDto$outboundSchema;
    /** @deprecated use `RpcErrorResponseDto$Outbound` instead. */
    export type Outbound = RpcErrorResponseDto$Outbound;
}
