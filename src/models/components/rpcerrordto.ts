/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type Data = {};

export type RpcErrorDto = {
    code: number;
    message: string;
    data?: Data | undefined;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Data$Outbound = {};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
    /** @deprecated use `Data$inboundSchema` instead. */
    export const inboundSchema = Data$inboundSchema;
    /** @deprecated use `Data$outboundSchema` instead. */
    export const outboundSchema = Data$outboundSchema;
    /** @deprecated use `Data$Outbound` instead. */
    export type Outbound = Data$Outbound;
}

/** @internal */
export const RpcErrorDto$inboundSchema: z.ZodType<RpcErrorDto, z.ZodTypeDef, unknown> = z.object({
    code: z.number(),
    message: z.string(),
    data: z.lazy(() => Data$inboundSchema).optional(),
});

/** @internal */
export type RpcErrorDto$Outbound = {
    code: number;
    message: string;
    data?: Data$Outbound | undefined;
};

/** @internal */
export const RpcErrorDto$outboundSchema: z.ZodType<
    RpcErrorDto$Outbound,
    z.ZodTypeDef,
    RpcErrorDto
> = z.object({
    code: z.number(),
    message: z.string(),
    data: z.lazy(() => Data$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcErrorDto$ {
    /** @deprecated use `RpcErrorDto$inboundSchema` instead. */
    export const inboundSchema = RpcErrorDto$inboundSchema;
    /** @deprecated use `RpcErrorDto$outboundSchema` instead. */
    export const outboundSchema = RpcErrorDto$outboundSchema;
    /** @deprecated use `RpcErrorDto$Outbound` instead. */
    export type Outbound = RpcErrorDto$Outbound;
}
