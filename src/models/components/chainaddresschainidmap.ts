/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BlockchainIds,
  BlockchainIds$inboundSchema,
  BlockchainIds$outboundSchema,
} from "./blockchainids.js";

export type ChainAddressChainIdMap = {
  address: string;
  blockchainIds: Array<BlockchainIds>;
};

/** @internal */
export const ChainAddressChainIdMap$inboundSchema: z.ZodType<
  ChainAddressChainIdMap,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  blockchainIds: z.array(BlockchainIds$inboundSchema),
});

/** @internal */
export type ChainAddressChainIdMap$Outbound = {
  address: string;
  blockchainIds: Array<string>;
};

/** @internal */
export const ChainAddressChainIdMap$outboundSchema: z.ZodType<
  ChainAddressChainIdMap$Outbound,
  z.ZodTypeDef,
  ChainAddressChainIdMap
> = z.object({
  address: z.string(),
  blockchainIds: z.array(BlockchainIds$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChainAddressChainIdMap$ {
  /** @deprecated use `ChainAddressChainIdMap$inboundSchema` instead. */
  export const inboundSchema = ChainAddressChainIdMap$inboundSchema;
  /** @deprecated use `ChainAddressChainIdMap$outboundSchema` instead. */
  export const outboundSchema = ChainAddressChainIdMap$outboundSchema;
  /** @deprecated use `ChainAddressChainIdMap$Outbound` instead. */
  export type Outbound = ChainAddressChainIdMap$Outbound;
}

export function chainAddressChainIdMapToJSON(
  chainAddressChainIdMap: ChainAddressChainIdMap,
): string {
  return JSON.stringify(
    ChainAddressChainIdMap$outboundSchema.parse(chainAddressChainIdMap),
  );
}

export function chainAddressChainIdMapFromJSON(
  jsonString: string,
): SafeParseResult<ChainAddressChainIdMap, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChainAddressChainIdMap$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChainAddressChainIdMap' from JSON`,
  );
}
