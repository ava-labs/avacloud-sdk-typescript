/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BalanceOwner,
  BalanceOwner$inboundSchema,
  BalanceOwner$Outbound,
  BalanceOwner$outboundSchema,
} from "./balanceowner.js";

export type L1ValidatorDetailsFullBlsCredentials = {};

export type L1ValidatorDetailsFull = {
  /**
   * Unique L1 validation ID used network-wide to identify L1 validation until its weight is reduced to 0 i.e. removed.
   */
  validationId: string;
  /**
   * Unique L1 validation ID used network-wide to identify L1 validation until its weight is reduced to 0 i.e. removed. In hex format
   */
  validationIdHex: string;
  nodeId: string;
  subnetId: string;
  /**
   * Weight of the L1 validator used while sampling validators within the L1. A zero-weight L1 validator means it has been removed from the L1, and the validationID is no longer valid
   */
  weight: number;
  /**
   * Remaining L1 validator balance in nAVAX until inactive. It can rejoin L1 sampling by increasing balance with IncreaseL1ValidatorBalanceTx
   */
  remainingBalance: number;
  /**
   * The timestamp of the transaction which created this L1 validator
   */
  creationTimestamp: number;
  blsCredentials: L1ValidatorDetailsFullBlsCredentials;
  /**
   * The L1 validator owner's balance, returned after it's disabled or removed
   */
  remainingBalanceOwner: BalanceOwner;
  /**
   * Owner ddresses details which can disable or remove the L1 validator
   */
  deactivationOwner: BalanceOwner;
};

/** @internal */
export const L1ValidatorDetailsFullBlsCredentials$inboundSchema: z.ZodType<
  L1ValidatorDetailsFullBlsCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type L1ValidatorDetailsFullBlsCredentials$Outbound = {};

/** @internal */
export const L1ValidatorDetailsFullBlsCredentials$outboundSchema: z.ZodType<
  L1ValidatorDetailsFullBlsCredentials$Outbound,
  z.ZodTypeDef,
  L1ValidatorDetailsFullBlsCredentials
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace L1ValidatorDetailsFullBlsCredentials$ {
  /** @deprecated use `L1ValidatorDetailsFullBlsCredentials$inboundSchema` instead. */
  export const inboundSchema =
    L1ValidatorDetailsFullBlsCredentials$inboundSchema;
  /** @deprecated use `L1ValidatorDetailsFullBlsCredentials$outboundSchema` instead. */
  export const outboundSchema =
    L1ValidatorDetailsFullBlsCredentials$outboundSchema;
  /** @deprecated use `L1ValidatorDetailsFullBlsCredentials$Outbound` instead. */
  export type Outbound = L1ValidatorDetailsFullBlsCredentials$Outbound;
}

export function l1ValidatorDetailsFullBlsCredentialsToJSON(
  l1ValidatorDetailsFullBlsCredentials: L1ValidatorDetailsFullBlsCredentials,
): string {
  return JSON.stringify(
    L1ValidatorDetailsFullBlsCredentials$outboundSchema.parse(
      l1ValidatorDetailsFullBlsCredentials,
    ),
  );
}

export function l1ValidatorDetailsFullBlsCredentialsFromJSON(
  jsonString: string,
): SafeParseResult<L1ValidatorDetailsFullBlsCredentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      L1ValidatorDetailsFullBlsCredentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'L1ValidatorDetailsFullBlsCredentials' from JSON`,
  );
}

/** @internal */
export const L1ValidatorDetailsFull$inboundSchema: z.ZodType<
  L1ValidatorDetailsFull,
  z.ZodTypeDef,
  unknown
> = z.object({
  validationId: z.string(),
  validationIdHex: z.string(),
  nodeId: z.string(),
  subnetId: z.string(),
  weight: z.number(),
  remainingBalance: z.number(),
  creationTimestamp: z.number(),
  blsCredentials: z.lazy(() =>
    L1ValidatorDetailsFullBlsCredentials$inboundSchema
  ),
  remainingBalanceOwner: BalanceOwner$inboundSchema,
  deactivationOwner: BalanceOwner$inboundSchema,
});

/** @internal */
export type L1ValidatorDetailsFull$Outbound = {
  validationId: string;
  validationIdHex: string;
  nodeId: string;
  subnetId: string;
  weight: number;
  remainingBalance: number;
  creationTimestamp: number;
  blsCredentials: L1ValidatorDetailsFullBlsCredentials$Outbound;
  remainingBalanceOwner: BalanceOwner$Outbound;
  deactivationOwner: BalanceOwner$Outbound;
};

/** @internal */
export const L1ValidatorDetailsFull$outboundSchema: z.ZodType<
  L1ValidatorDetailsFull$Outbound,
  z.ZodTypeDef,
  L1ValidatorDetailsFull
> = z.object({
  validationId: z.string(),
  validationIdHex: z.string(),
  nodeId: z.string(),
  subnetId: z.string(),
  weight: z.number(),
  remainingBalance: z.number(),
  creationTimestamp: z.number(),
  blsCredentials: z.lazy(() =>
    L1ValidatorDetailsFullBlsCredentials$outboundSchema
  ),
  remainingBalanceOwner: BalanceOwner$outboundSchema,
  deactivationOwner: BalanceOwner$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace L1ValidatorDetailsFull$ {
  /** @deprecated use `L1ValidatorDetailsFull$inboundSchema` instead. */
  export const inboundSchema = L1ValidatorDetailsFull$inboundSchema;
  /** @deprecated use `L1ValidatorDetailsFull$outboundSchema` instead. */
  export const outboundSchema = L1ValidatorDetailsFull$outboundSchema;
  /** @deprecated use `L1ValidatorDetailsFull$Outbound` instead. */
  export type Outbound = L1ValidatorDetailsFull$Outbound;
}

export function l1ValidatorDetailsFullToJSON(
  l1ValidatorDetailsFull: L1ValidatorDetailsFull,
): string {
  return JSON.stringify(
    L1ValidatorDetailsFull$outboundSchema.parse(l1ValidatorDetailsFull),
  );
}

export function l1ValidatorDetailsFullFromJSON(
  jsonString: string,
): SafeParseResult<L1ValidatorDetailsFull, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => L1ValidatorDetailsFull$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'L1ValidatorDetailsFull' from JSON`,
  );
}
