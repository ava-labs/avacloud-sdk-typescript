/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WebhookInternalTransaction = {
  /**
   * Sender address
   */
  from: string;
  /**
   * Recipient address
   */
  to: string;
  /**
   * Internal transaction type
   */
  internalTxType: string;
  /**
   * Value transferred
   */
  value: string;
  /**
   * Gas used
   */
  gasUsed: string;
  /**
   * Gas limit
   */
  gasLimit: string;
  /**
   * Transaction hash
   */
  transactionHash: string;
};

/** @internal */
export const WebhookInternalTransaction$inboundSchema: z.ZodType<
  WebhookInternalTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string(),
  to: z.string(),
  internalTxType: z.string(),
  value: z.string(),
  gasUsed: z.string(),
  gasLimit: z.string(),
  transactionHash: z.string(),
});

/** @internal */
export type WebhookInternalTransaction$Outbound = {
  from: string;
  to: string;
  internalTxType: string;
  value: string;
  gasUsed: string;
  gasLimit: string;
  transactionHash: string;
};

/** @internal */
export const WebhookInternalTransaction$outboundSchema: z.ZodType<
  WebhookInternalTransaction$Outbound,
  z.ZodTypeDef,
  WebhookInternalTransaction
> = z.object({
  from: z.string(),
  to: z.string(),
  internalTxType: z.string(),
  value: z.string(),
  gasUsed: z.string(),
  gasLimit: z.string(),
  transactionHash: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookInternalTransaction$ {
  /** @deprecated use `WebhookInternalTransaction$inboundSchema` instead. */
  export const inboundSchema = WebhookInternalTransaction$inboundSchema;
  /** @deprecated use `WebhookInternalTransaction$outboundSchema` instead. */
  export const outboundSchema = WebhookInternalTransaction$outboundSchema;
  /** @deprecated use `WebhookInternalTransaction$Outbound` instead. */
  export type Outbound = WebhookInternalTransaction$Outbound;
}

export function webhookInternalTransactionToJSON(
  webhookInternalTransaction: WebhookInternalTransaction,
): string {
  return JSON.stringify(
    WebhookInternalTransaction$outboundSchema.parse(webhookInternalTransaction),
  );
}

export function webhookInternalTransactionFromJSON(
  jsonString: string,
): SafeParseResult<WebhookInternalTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookInternalTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookInternalTransaction' from JSON`,
  );
}
