/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type Two = {};

export type One = {
    lastHour?: number | undefined;
    lastDay?: number | undefined;
    lastMonth?: number | undefined;
    lastYear?: number | undefined;
    allTime?: number | undefined;
};

export type Result = Two | One;

export type RollingWindowResponse = {
    nextPageStartKey?: string | undefined;
    lastRun?: number | undefined;
    status: number;
    result: Two | One;
};

/** @internal */
export const Two$inboundSchema: z.ZodType<Two, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Two$Outbound = {};

/** @internal */
export const Two$outboundSchema: z.ZodType<Two$Outbound, z.ZodTypeDef, Two> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Two$ {
    /** @deprecated use `Two$inboundSchema` instead. */
    export const inboundSchema = Two$inboundSchema;
    /** @deprecated use `Two$outboundSchema` instead. */
    export const outboundSchema = Two$outboundSchema;
    /** @deprecated use `Two$Outbound` instead. */
    export type Outbound = Two$Outbound;
}

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z
    .object({
        last_hour: z.number().optional(),
        last_day: z.number().optional(),
        last_month: z.number().optional(),
        last_year: z.number().optional(),
        all_time: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            last_hour: "lastHour",
            last_day: "lastDay",
            last_month: "lastMonth",
            last_year: "lastYear",
            all_time: "allTime",
        });
    });

/** @internal */
export type One$Outbound = {
    last_hour?: number | undefined;
    last_day?: number | undefined;
    last_month?: number | undefined;
    last_year?: number | undefined;
    all_time?: number | undefined;
};

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z
    .object({
        lastHour: z.number().optional(),
        lastDay: z.number().optional(),
        lastMonth: z.number().optional(),
        lastYear: z.number().optional(),
        allTime: z.number().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            lastHour: "last_hour",
            lastDay: "last_day",
            lastMonth: "last_month",
            lastYear: "last_year",
            allTime: "all_time",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
    /** @deprecated use `One$inboundSchema` instead. */
    export const inboundSchema = One$inboundSchema;
    /** @deprecated use `One$outboundSchema` instead. */
    export const outboundSchema = One$outboundSchema;
    /** @deprecated use `One$Outbound` instead. */
    export type Outbound = One$Outbound;
}

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => Two$inboundSchema),
    z.lazy(() => One$inboundSchema),
]);

/** @internal */
export type Result$Outbound = Two$Outbound | One$Outbound;

/** @internal */
export const Result$outboundSchema: z.ZodType<Result$Outbound, z.ZodTypeDef, Result> = z.union([
    z.lazy(() => Two$outboundSchema),
    z.lazy(() => One$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
    /** @deprecated use `Result$inboundSchema` instead. */
    export const inboundSchema = Result$inboundSchema;
    /** @deprecated use `Result$outboundSchema` instead. */
    export const outboundSchema = Result$outboundSchema;
    /** @deprecated use `Result$Outbound` instead. */
    export type Outbound = Result$Outbound;
}

/** @internal */
export const RollingWindowResponse$inboundSchema: z.ZodType<
    RollingWindowResponse,
    z.ZodTypeDef,
    unknown
> = z.object({
    nextPageStartKey: z.string().optional(),
    lastRun: z.number().optional(),
    status: z.number(),
    result: z.union([z.lazy(() => Two$inboundSchema), z.lazy(() => One$inboundSchema)]),
});

/** @internal */
export type RollingWindowResponse$Outbound = {
    nextPageStartKey?: string | undefined;
    lastRun?: number | undefined;
    status: number;
    result: Two$Outbound | One$Outbound;
};

/** @internal */
export const RollingWindowResponse$outboundSchema: z.ZodType<
    RollingWindowResponse$Outbound,
    z.ZodTypeDef,
    RollingWindowResponse
> = z.object({
    nextPageStartKey: z.string().optional(),
    lastRun: z.number().optional(),
    status: z.number(),
    result: z.union([z.lazy(() => Two$outboundSchema), z.lazy(() => One$outboundSchema)]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RollingWindowResponse$ {
    /** @deprecated use `RollingWindowResponse$inboundSchema` instead. */
    export const inboundSchema = RollingWindowResponse$inboundSchema;
    /** @deprecated use `RollingWindowResponse$outboundSchema` instead. */
    export const outboundSchema = RollingWindowResponse$outboundSchema;
    /** @deprecated use `RollingWindowResponse$Outbound` instead. */
    export type Outbound = RollingWindowResponse$Outbound;
}
