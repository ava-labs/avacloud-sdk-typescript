/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  BlsCredentials,
  BlsCredentials$inboundSchema,
  BlsCredentials$Outbound,
  BlsCredentials$outboundSchema,
} from "./blscredentials.js";

export const RemovedValidatorDetailsValidationStatus = {
  Removed: "removed",
} as const;
export type RemovedValidatorDetailsValidationStatus = ClosedEnum<
  typeof RemovedValidatorDetailsValidationStatus
>;

export type RemovedValidatorDetails = {
  txHash: string;
  nodeId: string;
  subnetId: string;
  amountStaked: string;
  delegationFee?: string | undefined;
  startTimestamp: number;
  endTimestamp: number;
  /**
   * Present for AddPermissionlessValidatorTx
   */
  blsCredentials?: BlsCredentials | undefined;
  removeTxHash: string;
  removeTimestamp: number;
  validationStatus: RemovedValidatorDetailsValidationStatus;
};

/** @internal */
export const RemovedValidatorDetailsValidationStatus$inboundSchema:
  z.ZodNativeEnum<typeof RemovedValidatorDetailsValidationStatus> = z
    .nativeEnum(RemovedValidatorDetailsValidationStatus);

/** @internal */
export const RemovedValidatorDetailsValidationStatus$outboundSchema:
  z.ZodNativeEnum<typeof RemovedValidatorDetailsValidationStatus> =
    RemovedValidatorDetailsValidationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemovedValidatorDetailsValidationStatus$ {
  /** @deprecated use `RemovedValidatorDetailsValidationStatus$inboundSchema` instead. */
  export const inboundSchema =
    RemovedValidatorDetailsValidationStatus$inboundSchema;
  /** @deprecated use `RemovedValidatorDetailsValidationStatus$outboundSchema` instead. */
  export const outboundSchema =
    RemovedValidatorDetailsValidationStatus$outboundSchema;
}

/** @internal */
export const RemovedValidatorDetails$inboundSchema: z.ZodType<
  RemovedValidatorDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  txHash: z.string(),
  nodeId: z.string(),
  subnetId: z.string(),
  amountStaked: z.string(),
  delegationFee: z.string().optional(),
  startTimestamp: z.number(),
  endTimestamp: z.number(),
  blsCredentials: BlsCredentials$inboundSchema.optional(),
  removeTxHash: z.string(),
  removeTimestamp: z.number(),
  validationStatus: RemovedValidatorDetailsValidationStatus$inboundSchema,
});

/** @internal */
export type RemovedValidatorDetails$Outbound = {
  txHash: string;
  nodeId: string;
  subnetId: string;
  amountStaked: string;
  delegationFee?: string | undefined;
  startTimestamp: number;
  endTimestamp: number;
  blsCredentials?: BlsCredentials$Outbound | undefined;
  removeTxHash: string;
  removeTimestamp: number;
  validationStatus: string;
};

/** @internal */
export const RemovedValidatorDetails$outboundSchema: z.ZodType<
  RemovedValidatorDetails$Outbound,
  z.ZodTypeDef,
  RemovedValidatorDetails
> = z.object({
  txHash: z.string(),
  nodeId: z.string(),
  subnetId: z.string(),
  amountStaked: z.string(),
  delegationFee: z.string().optional(),
  startTimestamp: z.number(),
  endTimestamp: z.number(),
  blsCredentials: BlsCredentials$outboundSchema.optional(),
  removeTxHash: z.string(),
  removeTimestamp: z.number(),
  validationStatus: RemovedValidatorDetailsValidationStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemovedValidatorDetails$ {
  /** @deprecated use `RemovedValidatorDetails$inboundSchema` instead. */
  export const inboundSchema = RemovedValidatorDetails$inboundSchema;
  /** @deprecated use `RemovedValidatorDetails$outboundSchema` instead. */
  export const outboundSchema = RemovedValidatorDetails$outboundSchema;
  /** @deprecated use `RemovedValidatorDetails$Outbound` instead. */
  export type Outbound = RemovedValidatorDetails$Outbound;
}

export function removedValidatorDetailsToJSON(
  removedValidatorDetails: RemovedValidatorDetails,
): string {
  return JSON.stringify(
    RemovedValidatorDetails$outboundSchema.parse(removedValidatorDetails),
  );
}

export function removedValidatorDetailsFromJSON(
  jsonString: string,
): SafeParseResult<RemovedValidatorDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemovedValidatorDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemovedValidatorDetails' from JSON`,
  );
}
