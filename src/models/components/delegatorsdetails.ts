/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DelegatorsDetails = {
  delegatorCount: number;
  totalAmountStaked: string;
};

/** @internal */
export const DelegatorsDetails$inboundSchema: z.ZodType<
  DelegatorsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  delegatorCount: z.number(),
  totalAmountStaked: z.string(),
});

/** @internal */
export type DelegatorsDetails$Outbound = {
  delegatorCount: number;
  totalAmountStaked: string;
};

/** @internal */
export const DelegatorsDetails$outboundSchema: z.ZodType<
  DelegatorsDetails$Outbound,
  z.ZodTypeDef,
  DelegatorsDetails
> = z.object({
  delegatorCount: z.number(),
  totalAmountStaked: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DelegatorsDetails$ {
  /** @deprecated use `DelegatorsDetails$inboundSchema` instead. */
  export const inboundSchema = DelegatorsDetails$inboundSchema;
  /** @deprecated use `DelegatorsDetails$outboundSchema` instead. */
  export const outboundSchema = DelegatorsDetails$outboundSchema;
  /** @deprecated use `DelegatorsDetails$Outbound` instead. */
  export type Outbound = DelegatorsDetails$Outbound;
}

export function delegatorsDetailsToJSON(
  delegatorsDetails: DelegatorsDetails,
): string {
  return JSON.stringify(
    DelegatorsDetails$outboundSchema.parse(delegatorsDetails),
  );
}

export function delegatorsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<DelegatorsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DelegatorsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DelegatorsDetails' from JSON`,
  );
}
