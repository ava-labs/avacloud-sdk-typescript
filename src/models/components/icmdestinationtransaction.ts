/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type IcmDestinationTransaction = {
  txHash: string;
  timestamp: number;
  gasSpent: string;
  rewardRedeemer: string;
  delivererAddress: string;
};

/** @internal */
export const IcmDestinationTransaction$inboundSchema: z.ZodType<
  IcmDestinationTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  txHash: z.string(),
  timestamp: z.number(),
  gasSpent: z.string(),
  rewardRedeemer: z.string(),
  delivererAddress: z.string(),
});

/** @internal */
export type IcmDestinationTransaction$Outbound = {
  txHash: string;
  timestamp: number;
  gasSpent: string;
  rewardRedeemer: string;
  delivererAddress: string;
};

/** @internal */
export const IcmDestinationTransaction$outboundSchema: z.ZodType<
  IcmDestinationTransaction$Outbound,
  z.ZodTypeDef,
  IcmDestinationTransaction
> = z.object({
  txHash: z.string(),
  timestamp: z.number(),
  gasSpent: z.string(),
  rewardRedeemer: z.string(),
  delivererAddress: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IcmDestinationTransaction$ {
  /** @deprecated use `IcmDestinationTransaction$inboundSchema` instead. */
  export const inboundSchema = IcmDestinationTransaction$inboundSchema;
  /** @deprecated use `IcmDestinationTransaction$outboundSchema` instead. */
  export const outboundSchema = IcmDestinationTransaction$outboundSchema;
  /** @deprecated use `IcmDestinationTransaction$Outbound` instead. */
  export type Outbound = IcmDestinationTransaction$Outbound;
}

export function icmDestinationTransactionToJSON(
  icmDestinationTransaction: IcmDestinationTransaction,
): string {
  return JSON.stringify(
    IcmDestinationTransaction$outboundSchema.parse(icmDestinationTransaction),
  );
}

export function icmDestinationTransactionFromJSON(
  jsonString: string,
): SafeParseResult<IcmDestinationTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => IcmDestinationTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'IcmDestinationTransaction' from JSON`,
  );
}
