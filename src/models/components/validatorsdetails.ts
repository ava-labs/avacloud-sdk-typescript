/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  StakingDistribution,
  StakingDistribution$inboundSchema,
  StakingDistribution$Outbound,
  StakingDistribution$outboundSchema,
} from "./stakingdistribution.js";

export type ValidatorsDetails = {
  validatorCount: number;
  totalAmountStaked: string;
  estimatedAnnualStakingReward: string;
  stakingDistributionByVersion: Array<StakingDistribution>;
  stakingRatio: string;
};

/** @internal */
export const ValidatorsDetails$inboundSchema: z.ZodType<
  ValidatorsDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  validatorCount: z.number(),
  totalAmountStaked: z.string(),
  estimatedAnnualStakingReward: z.string(),
  stakingDistributionByVersion: z.array(StakingDistribution$inboundSchema),
  stakingRatio: z.string(),
});

/** @internal */
export type ValidatorsDetails$Outbound = {
  validatorCount: number;
  totalAmountStaked: string;
  estimatedAnnualStakingReward: string;
  stakingDistributionByVersion: Array<StakingDistribution$Outbound>;
  stakingRatio: string;
};

/** @internal */
export const ValidatorsDetails$outboundSchema: z.ZodType<
  ValidatorsDetails$Outbound,
  z.ZodTypeDef,
  ValidatorsDetails
> = z.object({
  validatorCount: z.number(),
  totalAmountStaked: z.string(),
  estimatedAnnualStakingReward: z.string(),
  stakingDistributionByVersion: z.array(StakingDistribution$outboundSchema),
  stakingRatio: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidatorsDetails$ {
  /** @deprecated use `ValidatorsDetails$inboundSchema` instead. */
  export const inboundSchema = ValidatorsDetails$inboundSchema;
  /** @deprecated use `ValidatorsDetails$outboundSchema` instead. */
  export const outboundSchema = ValidatorsDetails$outboundSchema;
  /** @deprecated use `ValidatorsDetails$Outbound` instead. */
  export type Outbound = ValidatorsDetails$Outbound;
}

export function validatorsDetailsToJSON(
  validatorsDetails: ValidatorsDetails,
): string {
  return JSON.stringify(
    ValidatorsDetails$outboundSchema.parse(validatorsDetails),
  );
}

export function validatorsDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ValidatorsDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidatorsDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidatorsDetails' from JSON`,
  );
}
