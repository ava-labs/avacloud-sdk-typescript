/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Erc20TokenBalance,
  Erc20TokenBalance$inboundSchema,
  Erc20TokenBalance$Outbound,
  Erc20TokenBalance$outboundSchema,
} from "./erc20tokenbalance.js";

export type ListErc20BalancesResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  /**
   * The list of ERC-20 token balances for the address.
   */
  erc20TokenBalances: Array<Erc20TokenBalance>;
};

/** @internal */
export const ListErc20BalancesResponse$inboundSchema: z.ZodType<
  ListErc20BalancesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  erc20TokenBalances: z.array(Erc20TokenBalance$inboundSchema),
});

/** @internal */
export type ListErc20BalancesResponse$Outbound = {
  nextPageToken?: string | undefined;
  erc20TokenBalances: Array<Erc20TokenBalance$Outbound>;
};

/** @internal */
export const ListErc20BalancesResponse$outboundSchema: z.ZodType<
  ListErc20BalancesResponse$Outbound,
  z.ZodTypeDef,
  ListErc20BalancesResponse
> = z.object({
  nextPageToken: z.string().optional(),
  erc20TokenBalances: z.array(Erc20TokenBalance$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListErc20BalancesResponse$ {
  /** @deprecated use `ListErc20BalancesResponse$inboundSchema` instead. */
  export const inboundSchema = ListErc20BalancesResponse$inboundSchema;
  /** @deprecated use `ListErc20BalancesResponse$outboundSchema` instead. */
  export const outboundSchema = ListErc20BalancesResponse$outboundSchema;
  /** @deprecated use `ListErc20BalancesResponse$Outbound` instead. */
  export type Outbound = ListErc20BalancesResponse$Outbound;
}

export function listErc20BalancesResponseToJSON(
  listErc20BalancesResponse: ListErc20BalancesResponse,
): string {
  return JSON.stringify(
    ListErc20BalancesResponse$outboundSchema.parse(listErc20BalancesResponse),
  );
}

export function listErc20BalancesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListErc20BalancesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListErc20BalancesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListErc20BalancesResponse' from JSON`,
  );
}
