/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import {
  DateRangeNftHoldersParam,
  DateRangeNftHoldersParam$inboundSchema,
  DateRangeNftHoldersParam$Outbound,
  DateRangeNftHoldersParam$outboundSchema,
} from "./daterangenftholdersparam.js";
import {
  TimestampRangeNftHoldersParam,
  TimestampRangeNftHoldersParam$inboundSchema,
  TimestampRangeNftHoldersParam$Outbound,
  TimestampRangeNftHoldersParam$outboundSchema,
} from "./timestamprangenftholdersparam.js";

export const AllTimeNftHoldersQueryDtoType = {
  AllTimeNftHolders: "AllTimeNftHolders",
} as const;
export type AllTimeNftHoldersQueryDtoType = ClosedEnum<
  typeof AllTimeNftHoldersQueryDtoType
>;

export type Params = TimestampRangeNftHoldersParam | DateRangeNftHoldersParam;

export type AllTimeNftHoldersQueryDto = {
  id: string;
  type: AllTimeNftHoldersQueryDtoType;
  params: TimestampRangeNftHoldersParam | DateRangeNftHoldersParam;
};

/** @internal */
export const AllTimeNftHoldersQueryDtoType$inboundSchema: z.ZodNativeEnum<
  typeof AllTimeNftHoldersQueryDtoType
> = z.nativeEnum(AllTimeNftHoldersQueryDtoType);

/** @internal */
export const AllTimeNftHoldersQueryDtoType$outboundSchema: z.ZodNativeEnum<
  typeof AllTimeNftHoldersQueryDtoType
> = AllTimeNftHoldersQueryDtoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllTimeNftHoldersQueryDtoType$ {
  /** @deprecated use `AllTimeNftHoldersQueryDtoType$inboundSchema` instead. */
  export const inboundSchema = AllTimeNftHoldersQueryDtoType$inboundSchema;
  /** @deprecated use `AllTimeNftHoldersQueryDtoType$outboundSchema` instead. */
  export const outboundSchema = AllTimeNftHoldersQueryDtoType$outboundSchema;
}

/** @internal */
export const Params$inboundSchema: z.ZodType<Params, z.ZodTypeDef, unknown> = z
  .union([
    TimestampRangeNftHoldersParam$inboundSchema,
    DateRangeNftHoldersParam$inboundSchema,
  ]);

/** @internal */
export type Params$Outbound =
  | TimestampRangeNftHoldersParam$Outbound
  | DateRangeNftHoldersParam$Outbound;

/** @internal */
export const Params$outboundSchema: z.ZodType<
  Params$Outbound,
  z.ZodTypeDef,
  Params
> = z.union([
  TimestampRangeNftHoldersParam$outboundSchema,
  DateRangeNftHoldersParam$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Params$ {
  /** @deprecated use `Params$inboundSchema` instead. */
  export const inboundSchema = Params$inboundSchema;
  /** @deprecated use `Params$outboundSchema` instead. */
  export const outboundSchema = Params$outboundSchema;
  /** @deprecated use `Params$Outbound` instead. */
  export type Outbound = Params$Outbound;
}

/** @internal */
export const AllTimeNftHoldersQueryDto$inboundSchema: z.ZodType<
  AllTimeNftHoldersQueryDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: AllTimeNftHoldersQueryDtoType$inboundSchema,
  params: z.union([
    TimestampRangeNftHoldersParam$inboundSchema,
    DateRangeNftHoldersParam$inboundSchema,
  ]),
});

/** @internal */
export type AllTimeNftHoldersQueryDto$Outbound = {
  id: string;
  type: string;
  params:
    | TimestampRangeNftHoldersParam$Outbound
    | DateRangeNftHoldersParam$Outbound;
};

/** @internal */
export const AllTimeNftHoldersQueryDto$outboundSchema: z.ZodType<
  AllTimeNftHoldersQueryDto$Outbound,
  z.ZodTypeDef,
  AllTimeNftHoldersQueryDto
> = z.object({
  id: z.string(),
  type: AllTimeNftHoldersQueryDtoType$outboundSchema,
  params: z.union([
    TimestampRangeNftHoldersParam$outboundSchema,
    DateRangeNftHoldersParam$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllTimeNftHoldersQueryDto$ {
  /** @deprecated use `AllTimeNftHoldersQueryDto$inboundSchema` instead. */
  export const inboundSchema = AllTimeNftHoldersQueryDto$inboundSchema;
  /** @deprecated use `AllTimeNftHoldersQueryDto$outboundSchema` instead. */
  export const outboundSchema = AllTimeNftHoldersQueryDto$outboundSchema;
  /** @deprecated use `AllTimeNftHoldersQueryDto$Outbound` instead. */
  export type Outbound = AllTimeNftHoldersQueryDto$Outbound;
}
