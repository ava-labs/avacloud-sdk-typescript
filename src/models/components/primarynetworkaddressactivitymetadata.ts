/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PlatformAddressActivityKeyType,
  PlatformAddressActivityKeyType$inboundSchema,
  PlatformAddressActivityKeyType$outboundSchema,
} from "./platformaddressactivitykeytype.js";
import {
  PrimaryNetworkAddressActivitySubEvents,
  PrimaryNetworkAddressActivitySubEvents$inboundSchema,
  PrimaryNetworkAddressActivitySubEvents$Outbound,
  PrimaryNetworkAddressActivitySubEvents$outboundSchema,
} from "./primarynetworkaddressactivitysubevents.js";
import {
  PrimaryNetworkBalanceThresholdFilter,
  PrimaryNetworkBalanceThresholdFilter$inboundSchema,
  PrimaryNetworkBalanceThresholdFilter$Outbound,
  PrimaryNetworkBalanceThresholdFilter$outboundSchema,
} from "./primarynetworkbalancethresholdfilter.js";

export type PrimaryNetworkAddressActivityMetadata = {
  /**
   * Array of hexadecimal strings of the event signatures.
   */
  eventSignatures?: Array<string> | undefined;
  /**
   * The type of key to monitor for the address activity event type.
   */
  keyType: PlatformAddressActivityKeyType;
  /**
   * Array of keys like addresses corresponding to the keyType being monitored. For PrimaryNetworkAddressActivity event, an array of multiple addresses can be provided. The maximum number of 'addresses' you can track depends on the Data API plan you are subscribed to.
   */
  keys: Array<string>;
  /**
   * Sub-events to monitor
   */
  subEvents: PrimaryNetworkAddressActivitySubEvents;
  /**
   * Balance threshold filter
   */
  balanceThresholdFilter?: PrimaryNetworkBalanceThresholdFilter | undefined;
};

/** @internal */
export const PrimaryNetworkAddressActivityMetadata$inboundSchema: z.ZodType<
  PrimaryNetworkAddressActivityMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventSignatures: z.array(z.string()).optional(),
  keyType: PlatformAddressActivityKeyType$inboundSchema,
  keys: z.array(z.string()),
  subEvents: PrimaryNetworkAddressActivitySubEvents$inboundSchema,
  balanceThresholdFilter: PrimaryNetworkBalanceThresholdFilter$inboundSchema
    .optional(),
});

/** @internal */
export type PrimaryNetworkAddressActivityMetadata$Outbound = {
  eventSignatures?: Array<string> | undefined;
  keyType: string;
  keys: Array<string>;
  subEvents: PrimaryNetworkAddressActivitySubEvents$Outbound;
  balanceThresholdFilter?:
    | PrimaryNetworkBalanceThresholdFilter$Outbound
    | undefined;
};

/** @internal */
export const PrimaryNetworkAddressActivityMetadata$outboundSchema: z.ZodType<
  PrimaryNetworkAddressActivityMetadata$Outbound,
  z.ZodTypeDef,
  PrimaryNetworkAddressActivityMetadata
> = z.object({
  eventSignatures: z.array(z.string()).optional(),
  keyType: PlatformAddressActivityKeyType$outboundSchema,
  keys: z.array(z.string()),
  subEvents: PrimaryNetworkAddressActivitySubEvents$outboundSchema,
  balanceThresholdFilter: PrimaryNetworkBalanceThresholdFilter$outboundSchema
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrimaryNetworkAddressActivityMetadata$ {
  /** @deprecated use `PrimaryNetworkAddressActivityMetadata$inboundSchema` instead. */
  export const inboundSchema =
    PrimaryNetworkAddressActivityMetadata$inboundSchema;
  /** @deprecated use `PrimaryNetworkAddressActivityMetadata$outboundSchema` instead. */
  export const outboundSchema =
    PrimaryNetworkAddressActivityMetadata$outboundSchema;
  /** @deprecated use `PrimaryNetworkAddressActivityMetadata$Outbound` instead. */
  export type Outbound = PrimaryNetworkAddressActivityMetadata$Outbound;
}

export function primaryNetworkAddressActivityMetadataToJSON(
  primaryNetworkAddressActivityMetadata: PrimaryNetworkAddressActivityMetadata,
): string {
  return JSON.stringify(
    PrimaryNetworkAddressActivityMetadata$outboundSchema.parse(
      primaryNetworkAddressActivityMetadata,
    ),
  );
}

export function primaryNetworkAddressActivityMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PrimaryNetworkAddressActivityMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PrimaryNetworkAddressActivityMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrimaryNetworkAddressActivityMetadata' from JSON`,
  );
}
