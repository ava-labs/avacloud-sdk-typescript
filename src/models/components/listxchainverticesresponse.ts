/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PrimaryNetworkChainInfo,
  PrimaryNetworkChainInfo$inboundSchema,
  PrimaryNetworkChainInfo$Outbound,
  PrimaryNetworkChainInfo$outboundSchema,
} from "./primarynetworkchaininfo.js";
import {
  XChainVertex,
  XChainVertex$inboundSchema,
  XChainVertex$Outbound,
  XChainVertex$outboundSchema,
} from "./xchainvertex.js";

export type ListXChainVerticesResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  vertices: Array<XChainVertex>;
  chainInfo: PrimaryNetworkChainInfo;
};

/** @internal */
export const ListXChainVerticesResponse$inboundSchema: z.ZodType<
  ListXChainVerticesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  vertices: z.array(XChainVertex$inboundSchema),
  chainInfo: PrimaryNetworkChainInfo$inboundSchema,
});

/** @internal */
export type ListXChainVerticesResponse$Outbound = {
  nextPageToken?: string | undefined;
  vertices: Array<XChainVertex$Outbound>;
  chainInfo: PrimaryNetworkChainInfo$Outbound;
};

/** @internal */
export const ListXChainVerticesResponse$outboundSchema: z.ZodType<
  ListXChainVerticesResponse$Outbound,
  z.ZodTypeDef,
  ListXChainVerticesResponse
> = z.object({
  nextPageToken: z.string().optional(),
  vertices: z.array(XChainVertex$outboundSchema),
  chainInfo: PrimaryNetworkChainInfo$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListXChainVerticesResponse$ {
  /** @deprecated use `ListXChainVerticesResponse$inboundSchema` instead. */
  export const inboundSchema = ListXChainVerticesResponse$inboundSchema;
  /** @deprecated use `ListXChainVerticesResponse$outboundSchema` instead. */
  export const outboundSchema = ListXChainVerticesResponse$outboundSchema;
  /** @deprecated use `ListXChainVerticesResponse$Outbound` instead. */
  export type Outbound = ListXChainVerticesResponse$Outbound;
}

export function listXChainVerticesResponseToJSON(
  listXChainVerticesResponse: ListXChainVerticesResponse,
): string {
  return JSON.stringify(
    ListXChainVerticesResponse$outboundSchema.parse(listXChainVerticesResponse),
  );
}

export function listXChainVerticesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListXChainVerticesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListXChainVerticesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListXChainVerticesResponse' from JSON`,
  );
}
