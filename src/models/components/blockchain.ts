/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Blockchain = {
  createBlockTimestamp: number;
  createBlockNumber: string;
  blockchainId: string;
  vmId: string;
  subnetId: string;
  blockchainName: string;
};

/** @internal */
export const Blockchain$inboundSchema: z.ZodType<
  Blockchain,
  z.ZodTypeDef,
  unknown
> = z.object({
  createBlockTimestamp: z.number(),
  createBlockNumber: z.string(),
  blockchainId: z.string(),
  vmId: z.string(),
  subnetId: z.string(),
  blockchainName: z.string(),
});

/** @internal */
export type Blockchain$Outbound = {
  createBlockTimestamp: number;
  createBlockNumber: string;
  blockchainId: string;
  vmId: string;
  subnetId: string;
  blockchainName: string;
};

/** @internal */
export const Blockchain$outboundSchema: z.ZodType<
  Blockchain$Outbound,
  z.ZodTypeDef,
  Blockchain
> = z.object({
  createBlockTimestamp: z.number(),
  createBlockNumber: z.string(),
  blockchainId: z.string(),
  vmId: z.string(),
  subnetId: z.string(),
  blockchainName: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Blockchain$ {
  /** @deprecated use `Blockchain$inboundSchema` instead. */
  export const inboundSchema = Blockchain$inboundSchema;
  /** @deprecated use `Blockchain$outboundSchema` instead. */
  export const outboundSchema = Blockchain$outboundSchema;
  /** @deprecated use `Blockchain$Outbound` instead. */
  export type Outbound = Blockchain$Outbound;
}

export function blockchainToJSON(blockchain: Blockchain): string {
  return JSON.stringify(Blockchain$outboundSchema.parse(blockchain));
}

export function blockchainFromJSON(
  jsonString: string,
): SafeParseResult<Blockchain, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Blockchain$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Blockchain' from JSON`,
  );
}
