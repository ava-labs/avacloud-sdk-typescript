/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Erc1155TransferDetails,
  Erc1155TransferDetails$inboundSchema,
  Erc1155TransferDetails$Outbound,
  Erc1155TransferDetails$outboundSchema,
} from "./erc1155transferdetails.js";
import {
  Erc20TransferDetails,
  Erc20TransferDetails$inboundSchema,
  Erc20TransferDetails$Outbound,
  Erc20TransferDetails$outboundSchema,
} from "./erc20transferdetails.js";
import {
  Erc721TransferDetails,
  Erc721TransferDetails$inboundSchema,
  Erc721TransferDetails$Outbound,
  Erc721TransferDetails$outboundSchema,
} from "./erc721transferdetails.js";
import {
  FullNativeTransactionDetails,
  FullNativeTransactionDetails$inboundSchema,
  FullNativeTransactionDetails$Outbound,
  FullNativeTransactionDetails$outboundSchema,
} from "./fullnativetransactiondetails.js";
import {
  InternalTransactionDetails,
  InternalTransactionDetails$inboundSchema,
  InternalTransactionDetails$Outbound,
  InternalTransactionDetails$outboundSchema,
} from "./internaltransactiondetails.js";
import {
  NetworkTokenDetails,
  NetworkTokenDetails$inboundSchema,
  NetworkTokenDetails$Outbound,
  NetworkTokenDetails$outboundSchema,
} from "./networktokendetails.js";
import {
  TeleporterMessageInfo,
  TeleporterMessageInfo$inboundSchema,
  TeleporterMessageInfo$Outbound,
  TeleporterMessageInfo$outboundSchema,
} from "./teleportermessageinfo.js";

export type GetTransactionResponse = {
  /**
   * The list of ERC-20 transfers.
   */
  erc20Transfers?: Array<Erc20TransferDetails> | undefined;
  /**
   * The list of ERC-721 transfers.
   */
  erc721Transfers?: Array<Erc721TransferDetails> | undefined;
  /**
   * The list of ERC-1155 transfers.
   */
  erc1155Transfers?: Array<Erc1155TransferDetails> | undefined;
  /**
   * The list of internal transactions. Note that this list only includes CALL and CALLCODE internal transactions that had a non-zero value and CREATE/CREATE2/CREATE3  calls. Use a client provider to recieve a full debug trace of the transaction.
   */
  internalTransactions?: Array<InternalTransactionDetails> | undefined;
  networkTokenDetails: NetworkTokenDetails;
  nativeTransaction: FullNativeTransactionDetails;
  /**
   * Corresponding teleporter message info if available.
   */
  teleporterMessageInfo?: TeleporterMessageInfo | undefined;
};

/** @internal */
export const GetTransactionResponse$inboundSchema: z.ZodType<
  GetTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  erc20Transfers: z.array(Erc20TransferDetails$inboundSchema).optional(),
  erc721Transfers: z.array(Erc721TransferDetails$inboundSchema).optional(),
  erc1155Transfers: z.array(Erc1155TransferDetails$inboundSchema).optional(),
  internalTransactions: z.array(InternalTransactionDetails$inboundSchema)
    .optional(),
  networkTokenDetails: NetworkTokenDetails$inboundSchema,
  nativeTransaction: FullNativeTransactionDetails$inboundSchema,
  teleporterMessageInfo: TeleporterMessageInfo$inboundSchema.optional(),
});

/** @internal */
export type GetTransactionResponse$Outbound = {
  erc20Transfers?: Array<Erc20TransferDetails$Outbound> | undefined;
  erc721Transfers?: Array<Erc721TransferDetails$Outbound> | undefined;
  erc1155Transfers?: Array<Erc1155TransferDetails$Outbound> | undefined;
  internalTransactions?: Array<InternalTransactionDetails$Outbound> | undefined;
  networkTokenDetails: NetworkTokenDetails$Outbound;
  nativeTransaction: FullNativeTransactionDetails$Outbound;
  teleporterMessageInfo?: TeleporterMessageInfo$Outbound | undefined;
};

/** @internal */
export const GetTransactionResponse$outboundSchema: z.ZodType<
  GetTransactionResponse$Outbound,
  z.ZodTypeDef,
  GetTransactionResponse
> = z.object({
  erc20Transfers: z.array(Erc20TransferDetails$outboundSchema).optional(),
  erc721Transfers: z.array(Erc721TransferDetails$outboundSchema).optional(),
  erc1155Transfers: z.array(Erc1155TransferDetails$outboundSchema).optional(),
  internalTransactions: z.array(InternalTransactionDetails$outboundSchema)
    .optional(),
  networkTokenDetails: NetworkTokenDetails$outboundSchema,
  nativeTransaction: FullNativeTransactionDetails$outboundSchema,
  teleporterMessageInfo: TeleporterMessageInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTransactionResponse$ {
  /** @deprecated use `GetTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = GetTransactionResponse$inboundSchema;
  /** @deprecated use `GetTransactionResponse$outboundSchema` instead. */
  export const outboundSchema = GetTransactionResponse$outboundSchema;
  /** @deprecated use `GetTransactionResponse$Outbound` instead. */
  export type Outbound = GetTransactionResponse$Outbound;
}

export function getTransactionResponseToJSON(
  getTransactionResponse: GetTransactionResponse,
): string {
  return JSON.stringify(
    GetTransactionResponse$outboundSchema.parse(getTransactionResponse),
  );
}

export function getTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTransactionResponse' from JSON`,
  );
}
