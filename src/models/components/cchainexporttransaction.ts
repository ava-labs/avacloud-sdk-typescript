/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AssetAmount,
  AssetAmount$inboundSchema,
  AssetAmount$Outbound,
  AssetAmount$outboundSchema,
} from "./assetamount.js";
import {
  EVMInput,
  EVMInput$inboundSchema,
  EVMInput$Outbound,
  EVMInput$outboundSchema,
} from "./evminput.js";
import {
  Utxo,
  Utxo$inboundSchema,
  Utxo$Outbound,
  Utxo$outboundSchema,
} from "./utxo.js";

/**
 * Type of transaction.
 */
export const TxType = {
  ExportTx: "ExportTx",
} as const;
/**
 * Type of transaction.
 */
export type TxType = ClosedEnum<typeof TxType>;

export type CChainExportTransaction = {
  /**
   * Unique ID for this transaction.
   */
  txHash: string;
  /**
   * Height of the block this transaction belongs to.
   */
  blockHeight: number;
  /**
   * Hash of the block this transaction belongs to.
   */
  blockHash: string;
  /**
   * Latest timestamp in seconds this transaction was accepted.
   */
  timestamp: number;
  /**
   * Hex encoded memo bytes for this transaction.
   */
  memo: string;
  /**
   * Assets unlocked by inputs of this transaction.
   */
  amountUnlocked: Array<AssetAmount>;
  /**
   * Assets created by outputs of this transaction.
   */
  amountCreated: Array<AssetAmount>;
  /**
   * Source chain for an atomic transaction.
   */
  sourceChain: string;
  /**
   * Destination chain for an atomic transaction.
   */
  destinationChain: string;
  /**
   * Type of transaction.
   */
  txType: TxType;
  evmInputs: Array<EVMInput>;
  emittedUtxos: Array<Utxo>;
};

/** @internal */
export const TxType$inboundSchema: z.ZodNativeEnum<typeof TxType> = z
  .nativeEnum(TxType);

/** @internal */
export const TxType$outboundSchema: z.ZodNativeEnum<typeof TxType> =
  TxType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TxType$ {
  /** @deprecated use `TxType$inboundSchema` instead. */
  export const inboundSchema = TxType$inboundSchema;
  /** @deprecated use `TxType$outboundSchema` instead. */
  export const outboundSchema = TxType$outboundSchema;
}

/** @internal */
export const CChainExportTransaction$inboundSchema: z.ZodType<
  CChainExportTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  txHash: z.string(),
  blockHeight: z.number(),
  blockHash: z.string(),
  timestamp: z.number(),
  memo: z.string(),
  amountUnlocked: z.array(AssetAmount$inboundSchema),
  amountCreated: z.array(AssetAmount$inboundSchema),
  sourceChain: z.string(),
  destinationChain: z.string(),
  txType: TxType$inboundSchema,
  evmInputs: z.array(EVMInput$inboundSchema),
  emittedUtxos: z.array(Utxo$inboundSchema),
});

/** @internal */
export type CChainExportTransaction$Outbound = {
  txHash: string;
  blockHeight: number;
  blockHash: string;
  timestamp: number;
  memo: string;
  amountUnlocked: Array<AssetAmount$Outbound>;
  amountCreated: Array<AssetAmount$Outbound>;
  sourceChain: string;
  destinationChain: string;
  txType: string;
  evmInputs: Array<EVMInput$Outbound>;
  emittedUtxos: Array<Utxo$Outbound>;
};

/** @internal */
export const CChainExportTransaction$outboundSchema: z.ZodType<
  CChainExportTransaction$Outbound,
  z.ZodTypeDef,
  CChainExportTransaction
> = z.object({
  txHash: z.string(),
  blockHeight: z.number(),
  blockHash: z.string(),
  timestamp: z.number(),
  memo: z.string(),
  amountUnlocked: z.array(AssetAmount$outboundSchema),
  amountCreated: z.array(AssetAmount$outboundSchema),
  sourceChain: z.string(),
  destinationChain: z.string(),
  txType: TxType$outboundSchema,
  evmInputs: z.array(EVMInput$outboundSchema),
  emittedUtxos: z.array(Utxo$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CChainExportTransaction$ {
  /** @deprecated use `CChainExportTransaction$inboundSchema` instead. */
  export const inboundSchema = CChainExportTransaction$inboundSchema;
  /** @deprecated use `CChainExportTransaction$outboundSchema` instead. */
  export const outboundSchema = CChainExportTransaction$outboundSchema;
  /** @deprecated use `CChainExportTransaction$Outbound` instead. */
  export type Outbound = CChainExportTransaction$Outbound;
}

export function cChainExportTransactionToJSON(
  cChainExportTransaction: CChainExportTransaction,
): string {
  return JSON.stringify(
    CChainExportTransaction$outboundSchema.parse(cChainExportTransaction),
  );
}

export function cChainExportTransactionFromJSON(
  jsonString: string,
): SafeParseResult<CChainExportTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CChainExportTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CChainExportTransaction' from JSON`,
  );
}
