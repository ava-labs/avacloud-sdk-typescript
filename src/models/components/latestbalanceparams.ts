/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TokenType,
  TokenType$inboundSchema,
  TokenType$outboundSchema,
} from "./tokentype.js";

export type LatestBalanceParams = {
  minBalance: string;
  evmChainId: string;
  tokenType: TokenType;
  contractAddress?: string | undefined;
};

/** @internal */
export const LatestBalanceParams$inboundSchema: z.ZodType<
  LatestBalanceParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  minBalance: z.string(),
  evmChainId: z.string(),
  tokenType: TokenType$inboundSchema,
  contractAddress: z.string().optional(),
});

/** @internal */
export type LatestBalanceParams$Outbound = {
  minBalance: string;
  evmChainId: string;
  tokenType: string;
  contractAddress?: string | undefined;
};

/** @internal */
export const LatestBalanceParams$outboundSchema: z.ZodType<
  LatestBalanceParams$Outbound,
  z.ZodTypeDef,
  LatestBalanceParams
> = z.object({
  minBalance: z.string(),
  evmChainId: z.string(),
  tokenType: TokenType$outboundSchema,
  contractAddress: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LatestBalanceParams$ {
  /** @deprecated use `LatestBalanceParams$inboundSchema` instead. */
  export const inboundSchema = LatestBalanceParams$inboundSchema;
  /** @deprecated use `LatestBalanceParams$outboundSchema` instead. */
  export const outboundSchema = LatestBalanceParams$outboundSchema;
  /** @deprecated use `LatestBalanceParams$Outbound` instead. */
  export type Outbound = LatestBalanceParams$Outbound;
}

export function latestBalanceParamsToJSON(
  latestBalanceParams: LatestBalanceParams,
): string {
  return JSON.stringify(
    LatestBalanceParams$outboundSchema.parse(latestBalanceParams),
  );
}

export function latestBalanceParamsFromJSON(
  jsonString: string,
): SafeParseResult<LatestBalanceParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LatestBalanceParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LatestBalanceParams' from JSON`,
  );
}
