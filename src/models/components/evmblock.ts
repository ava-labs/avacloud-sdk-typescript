/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EvmBlock = {
  /**
   * The block number on the chain.
   */
  blockNumber: string;
  /**
   * The block finality timestamp.
   */
  blockTimestamp: number;
  /**
   * The block hash identifier.
   */
  blockHash: string;
  /**
   * The number of evm transactions in the block.
   */
  txCount: number;
  /**
   * The base gas fee for a transaction to be included in the block.
   */
  baseFee: string;
  /**
   * The gas used for transactions in the block.
   */
  gasUsed: string;
  /**
   * The total gas limit set for transactions in the block.
   */
  gasLimit: string;
  gasCost: string;
  /**
   * The hash of the parent block.
   */
  parentHash: string;
  /**
   * The amount of fees spent/burned for transactions in the block.
   */
  feesSpent: string;
  /**
   * The cumulative number of transactions for the chain including this block.
   */
  cumulativeTransactions: string;
};

/** @internal */
export const EvmBlock$inboundSchema: z.ZodType<
  EvmBlock,
  z.ZodTypeDef,
  unknown
> = z.object({
  blockNumber: z.string(),
  blockTimestamp: z.number(),
  blockHash: z.string(),
  txCount: z.number(),
  baseFee: z.string(),
  gasUsed: z.string(),
  gasLimit: z.string(),
  gasCost: z.string(),
  parentHash: z.string(),
  feesSpent: z.string(),
  cumulativeTransactions: z.string(),
});

/** @internal */
export type EvmBlock$Outbound = {
  blockNumber: string;
  blockTimestamp: number;
  blockHash: string;
  txCount: number;
  baseFee: string;
  gasUsed: string;
  gasLimit: string;
  gasCost: string;
  parentHash: string;
  feesSpent: string;
  cumulativeTransactions: string;
};

/** @internal */
export const EvmBlock$outboundSchema: z.ZodType<
  EvmBlock$Outbound,
  z.ZodTypeDef,
  EvmBlock
> = z.object({
  blockNumber: z.string(),
  blockTimestamp: z.number(),
  blockHash: z.string(),
  txCount: z.number(),
  baseFee: z.string(),
  gasUsed: z.string(),
  gasLimit: z.string(),
  gasCost: z.string(),
  parentHash: z.string(),
  feesSpent: z.string(),
  cumulativeTransactions: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvmBlock$ {
  /** @deprecated use `EvmBlock$inboundSchema` instead. */
  export const inboundSchema = EvmBlock$inboundSchema;
  /** @deprecated use `EvmBlock$outboundSchema` instead. */
  export const outboundSchema = EvmBlock$outboundSchema;
  /** @deprecated use `EvmBlock$Outbound` instead. */
  export type Outbound = EvmBlock$Outbound;
}

export function evmBlockToJSON(evmBlock: EvmBlock): string {
  return JSON.stringify(EvmBlock$outboundSchema.parse(evmBlock));
}

export function evmBlockFromJSON(
  jsonString: string,
): SafeParseResult<EvmBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvmBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvmBlock' from JSON`,
  );
}
