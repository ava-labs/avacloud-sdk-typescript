/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    AssetAmount,
    AssetAmount$inboundSchema,
    AssetAmount$Outbound,
    AssetAmount$outboundSchema,
} from "./assetamount.js";
import {
    UtxoCredential,
    UtxoCredential$inboundSchema,
    UtxoCredential$Outbound,
    UtxoCredential$outboundSchema,
} from "./utxocredential.js";
import * as z from "zod";

export type Utxo = {
    /**
     * Addresses that are eligible to sign the consumption of this output.
     */
    addresses: Array<string>;
    asset: AssetAmount;
    /**
     * Blockchain ID on which this output is consumed on.
     */
    consumedOnChainId: string;
    /**
     * Transaction ID that consumed this output.
     */
    consumingTxHash?: string | undefined;
    /**
     * Blockchain ID on which this output is created on.
     */
    createdOnChainId: string;
    /**
     * UTXO ID for this output.
     */
    utxoId: string;
    /**
     * Unix timestamp in seconds at which this output was consumed.
     */
    consumingTxTimestamp?: number | undefined;
    /**
     * Transaction ID that created this output.
     */
    creationTxHash: string;
    /**
     * Credentials that signed the transaction to consume this utxo
     */
    credentials?: Array<UtxoCredential> | undefined;
    /**
     * Index representing the minting set for the NFT mint output.
     */
    groupId?: number | undefined;
    /**
     * Locktime in seconds after which this output can be consumed.
     */
    locktime: number;
    /**
     * Postion of this output in a list of lexiographically sorted outputs of a transaction.
     */
    outputIndex: string;
    /**
     * Hex encoded data for NFT assets.
     */
    payload?: string | undefined;
    /**
     * Minimum number of signatures required to consume this output.
     */
    threshold: number;
    /**
     * Unix timestamp in seconds at which this outptut was created.
     */
    timestamp: number;
    /**
     * Type of output.
     */
    utxoType: string;
};

/** @internal */
export const Utxo$inboundSchema: z.ZodType<Utxo, z.ZodTypeDef, unknown> = z.object({
    addresses: z.array(z.string()),
    asset: AssetAmount$inboundSchema,
    consumedOnChainId: z.string(),
    consumingTxHash: z.string().optional(),
    createdOnChainId: z.string(),
    utxoId: z.string(),
    consumingTxTimestamp: z.number().optional(),
    creationTxHash: z.string(),
    credentials: z.array(UtxoCredential$inboundSchema).optional(),
    groupId: z.number().optional(),
    locktime: z.number(),
    outputIndex: z.string(),
    payload: z.string().optional(),
    threshold: z.number(),
    timestamp: z.number(),
    utxoType: z.string(),
});

/** @internal */
export type Utxo$Outbound = {
    addresses: Array<string>;
    asset: AssetAmount$Outbound;
    consumedOnChainId: string;
    consumingTxHash?: string | undefined;
    createdOnChainId: string;
    utxoId: string;
    consumingTxTimestamp?: number | undefined;
    creationTxHash: string;
    credentials?: Array<UtxoCredential$Outbound> | undefined;
    groupId?: number | undefined;
    locktime: number;
    outputIndex: string;
    payload?: string | undefined;
    threshold: number;
    timestamp: number;
    utxoType: string;
};

/** @internal */
export const Utxo$outboundSchema: z.ZodType<Utxo$Outbound, z.ZodTypeDef, Utxo> = z.object({
    addresses: z.array(z.string()),
    asset: AssetAmount$outboundSchema,
    consumedOnChainId: z.string(),
    consumingTxHash: z.string().optional(),
    createdOnChainId: z.string(),
    utxoId: z.string(),
    consumingTxTimestamp: z.number().optional(),
    creationTxHash: z.string(),
    credentials: z.array(UtxoCredential$outboundSchema).optional(),
    groupId: z.number().optional(),
    locktime: z.number(),
    outputIndex: z.string(),
    payload: z.string().optional(),
    threshold: z.number(),
    timestamp: z.number(),
    utxoType: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Utxo$ {
    /** @deprecated use `Utxo$inboundSchema` instead. */
    export const inboundSchema = Utxo$inboundSchema;
    /** @deprecated use `Utxo$outboundSchema` instead. */
    export const outboundSchema = Utxo$outboundSchema;
    /** @deprecated use `Utxo$Outbound` instead. */
    export type Outbound = Utxo$Outbound;
}
