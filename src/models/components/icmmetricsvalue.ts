/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ICMMetricsValue = {
  /**
   * Aggregated value for the current metrics.
   */
  value: number;
  /**
   * Unix Epoch timestamp for which metrics are aggregated. Depending on the interval of the metric this can be at the start of the relevant hour, day, month, year, etc.
   */
  timestamp: number;
  /**
   * Source blockchainId.
   */
  srcBlockchainId: string;
  /**
   * Destination blockchainId.
   */
  destBlockchainId: string;
};

/** @internal */
export const ICMMetricsValue$inboundSchema: z.ZodType<
  ICMMetricsValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.number(),
  timestamp: z.number(),
  srcBlockchainId: z.string(),
  destBlockchainId: z.string(),
});

/** @internal */
export type ICMMetricsValue$Outbound = {
  value: number;
  timestamp: number;
  srcBlockchainId: string;
  destBlockchainId: string;
};

/** @internal */
export const ICMMetricsValue$outboundSchema: z.ZodType<
  ICMMetricsValue$Outbound,
  z.ZodTypeDef,
  ICMMetricsValue
> = z.object({
  value: z.number(),
  timestamp: z.number(),
  srcBlockchainId: z.string(),
  destBlockchainId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ICMMetricsValue$ {
  /** @deprecated use `ICMMetricsValue$inboundSchema` instead. */
  export const inboundSchema = ICMMetricsValue$inboundSchema;
  /** @deprecated use `ICMMetricsValue$outboundSchema` instead. */
  export const outboundSchema = ICMMetricsValue$outboundSchema;
  /** @deprecated use `ICMMetricsValue$Outbound` instead. */
  export type Outbound = ICMMetricsValue$Outbound;
}

export function icmMetricsValueToJSON(
  icmMetricsValue: ICMMetricsValue,
): string {
  return JSON.stringify(ICMMetricsValue$outboundSchema.parse(icmMetricsValue));
}

export function icmMetricsValueFromJSON(
  jsonString: string,
): SafeParseResult<ICMMetricsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ICMMetricsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ICMMetricsValue' from JSON`,
  );
}
