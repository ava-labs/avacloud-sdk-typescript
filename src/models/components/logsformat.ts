/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LogsFormatMetadata,
  LogsFormatMetadata$inboundSchema,
  LogsFormatMetadata$Outbound,
  LogsFormatMetadata$outboundSchema,
} from "./logsformatmetadata.js";
import {
  RequestType,
  RequestType$inboundSchema,
  RequestType$outboundSchema,
} from "./requesttype.js";

export type LogsFormat = {
  /**
   * The organization id of the request.
   */
  orgId: string;
  /**
   * The unique log id of the request.
   */
  logId: string;
  /**
   * The timestamp of the request.
   */
  eventTimestamp: number;
  /**
   * The apiKey used to make the request.
   */
  apiKeyId: string;
  /**
   * The alias of the apiKey used to make the request.
   */
  apiKeyAlias: string;
  /**
   * The region of the host for the request made by the client.
   */
  hostRegion: string;
  /**
   * The type of request made by the client.
   */
  requestType: RequestType;
  /**
   * The path of the request made by the client.
   */
  requestPath: string;
  /**
   * The number of API credits consumed by the request.
   */
  apiCreditsConsumed: number;
  /**
   * The duration of the request in milliseconds.
   */
  requestDurationMsecs: number;
  /**
   * The response code of the request.
   */
  responseCode: number;
  /**
   * The chain id of the request.
   */
  chainId?: string | undefined;
  /**
   * The rpc method of the request.
   */
  rpcMethod?: string | undefined;
  /**
   * The metadata of the request.
   */
  metadata: LogsFormatMetadata;
};

/** @internal */
export const LogsFormat$inboundSchema: z.ZodType<
  LogsFormat,
  z.ZodTypeDef,
  unknown
> = z.object({
  orgId: z.string(),
  logId: z.string(),
  eventTimestamp: z.number(),
  apiKeyId: z.string(),
  apiKeyAlias: z.string(),
  hostRegion: z.string(),
  requestType: RequestType$inboundSchema,
  requestPath: z.string(),
  apiCreditsConsumed: z.number(),
  requestDurationMsecs: z.number(),
  responseCode: z.number(),
  chainId: z.string().optional(),
  rpcMethod: z.string().optional(),
  metadata: LogsFormatMetadata$inboundSchema,
});

/** @internal */
export type LogsFormat$Outbound = {
  orgId: string;
  logId: string;
  eventTimestamp: number;
  apiKeyId: string;
  apiKeyAlias: string;
  hostRegion: string;
  requestType: string;
  requestPath: string;
  apiCreditsConsumed: number;
  requestDurationMsecs: number;
  responseCode: number;
  chainId?: string | undefined;
  rpcMethod?: string | undefined;
  metadata: LogsFormatMetadata$Outbound;
};

/** @internal */
export const LogsFormat$outboundSchema: z.ZodType<
  LogsFormat$Outbound,
  z.ZodTypeDef,
  LogsFormat
> = z.object({
  orgId: z.string(),
  logId: z.string(),
  eventTimestamp: z.number(),
  apiKeyId: z.string(),
  apiKeyAlias: z.string(),
  hostRegion: z.string(),
  requestType: RequestType$outboundSchema,
  requestPath: z.string(),
  apiCreditsConsumed: z.number(),
  requestDurationMsecs: z.number(),
  responseCode: z.number(),
  chainId: z.string().optional(),
  rpcMethod: z.string().optional(),
  metadata: LogsFormatMetadata$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LogsFormat$ {
  /** @deprecated use `LogsFormat$inboundSchema` instead. */
  export const inboundSchema = LogsFormat$inboundSchema;
  /** @deprecated use `LogsFormat$outboundSchema` instead. */
  export const outboundSchema = LogsFormat$outboundSchema;
  /** @deprecated use `LogsFormat$Outbound` instead. */
  export type Outbound = LogsFormat$Outbound;
}

export function logsFormatToJSON(logsFormat: LogsFormat): string {
  return JSON.stringify(LogsFormat$outboundSchema.parse(logsFormat));
}

export function logsFormatFromJSON(
  jsonString: string,
): SafeParseResult<LogsFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LogsFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LogsFormat' from JSON`,
  );
}
