/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AddressActivityMetadata,
  AddressActivityMetadata$inboundSchema,
  AddressActivityMetadata$Outbound,
  AddressActivityMetadata$outboundSchema,
} from "./addressactivitymetadata.js";
import {
  EventType,
  EventType$inboundSchema,
  EventType$outboundSchema,
} from "./eventtype.js";
import {
  WebhookStatusType,
  WebhookStatusType$inboundSchema,
  WebhookStatusType$outboundSchema,
} from "./webhookstatustype.js";

export type EVMAddressActivityResponseMetadata = AddressActivityMetadata;

export type EVMAddressActivityResponse = {
  id: string;
  eventType: EventType;
  url: string;
  chainId: string;
  status: WebhookStatusType;
  createdAt: number;
  name: string;
  description: string;
  metadata: AddressActivityMetadata;
  /**
   * Whether to include traces in the webhook payload.
   */
  includeInternalTxs?: boolean | undefined;
  /**
   * Whether to include logs in the webhook payload.
   */
  includeLogs?: boolean | undefined;
};

/** @internal */
export const EVMAddressActivityResponseMetadata$inboundSchema: z.ZodType<
  EVMAddressActivityResponseMetadata,
  z.ZodTypeDef,
  unknown
> = AddressActivityMetadata$inboundSchema;

/** @internal */
export type EVMAddressActivityResponseMetadata$Outbound =
  AddressActivityMetadata$Outbound;

/** @internal */
export const EVMAddressActivityResponseMetadata$outboundSchema: z.ZodType<
  EVMAddressActivityResponseMetadata$Outbound,
  z.ZodTypeDef,
  EVMAddressActivityResponseMetadata
> = AddressActivityMetadata$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EVMAddressActivityResponseMetadata$ {
  /** @deprecated use `EVMAddressActivityResponseMetadata$inboundSchema` instead. */
  export const inboundSchema = EVMAddressActivityResponseMetadata$inboundSchema;
  /** @deprecated use `EVMAddressActivityResponseMetadata$outboundSchema` instead. */
  export const outboundSchema =
    EVMAddressActivityResponseMetadata$outboundSchema;
  /** @deprecated use `EVMAddressActivityResponseMetadata$Outbound` instead. */
  export type Outbound = EVMAddressActivityResponseMetadata$Outbound;
}

export function evmAddressActivityResponseMetadataToJSON(
  evmAddressActivityResponseMetadata: EVMAddressActivityResponseMetadata,
): string {
  return JSON.stringify(
    EVMAddressActivityResponseMetadata$outboundSchema.parse(
      evmAddressActivityResponseMetadata,
    ),
  );
}

export function evmAddressActivityResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<EVMAddressActivityResponseMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EVMAddressActivityResponseMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EVMAddressActivityResponseMetadata' from JSON`,
  );
}

/** @internal */
export const EVMAddressActivityResponse$inboundSchema: z.ZodType<
  EVMAddressActivityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  eventType: EventType$inboundSchema,
  url: z.string(),
  chainId: z.string(),
  status: WebhookStatusType$inboundSchema,
  createdAt: z.number(),
  name: z.string(),
  description: z.string(),
  metadata: AddressActivityMetadata$inboundSchema,
  includeInternalTxs: z.boolean().optional(),
  includeLogs: z.boolean().optional(),
});

/** @internal */
export type EVMAddressActivityResponse$Outbound = {
  id: string;
  eventType: string;
  url: string;
  chainId: string;
  status: string;
  createdAt: number;
  name: string;
  description: string;
  metadata: AddressActivityMetadata$Outbound;
  includeInternalTxs?: boolean | undefined;
  includeLogs?: boolean | undefined;
};

/** @internal */
export const EVMAddressActivityResponse$outboundSchema: z.ZodType<
  EVMAddressActivityResponse$Outbound,
  z.ZodTypeDef,
  EVMAddressActivityResponse
> = z.object({
  id: z.string(),
  eventType: EventType$outboundSchema,
  url: z.string(),
  chainId: z.string(),
  status: WebhookStatusType$outboundSchema,
  createdAt: z.number(),
  name: z.string(),
  description: z.string(),
  metadata: AddressActivityMetadata$outboundSchema,
  includeInternalTxs: z.boolean().optional(),
  includeLogs: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EVMAddressActivityResponse$ {
  /** @deprecated use `EVMAddressActivityResponse$inboundSchema` instead. */
  export const inboundSchema = EVMAddressActivityResponse$inboundSchema;
  /** @deprecated use `EVMAddressActivityResponse$outboundSchema` instead. */
  export const outboundSchema = EVMAddressActivityResponse$outboundSchema;
  /** @deprecated use `EVMAddressActivityResponse$Outbound` instead. */
  export type Outbound = EVMAddressActivityResponse$Outbound;
}

export function evmAddressActivityResponseToJSON(
  evmAddressActivityResponse: EVMAddressActivityResponse,
): string {
  return JSON.stringify(
    EVMAddressActivityResponse$outboundSchema.parse(evmAddressActivityResponse),
  );
}

export function evmAddressActivityResponseFromJSON(
  jsonString: string,
): SafeParseResult<EVMAddressActivityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EVMAddressActivityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EVMAddressActivityResponse' from JSON`,
  );
}
