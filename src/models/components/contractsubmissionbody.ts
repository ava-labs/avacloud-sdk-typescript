/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    ContractSubmissionErc1155,
    ContractSubmissionErc1155$inboundSchema,
    ContractSubmissionErc1155$Outbound,
    ContractSubmissionErc1155$outboundSchema,
} from "./contractsubmissionerc1155.js";
import {
    ContractSubmissionErc20,
    ContractSubmissionErc20$inboundSchema,
    ContractSubmissionErc20$Outbound,
    ContractSubmissionErc20$outboundSchema,
} from "./contractsubmissionerc20.js";
import {
    ContractSubmissionErc721,
    ContractSubmissionErc721$inboundSchema,
    ContractSubmissionErc721$Outbound,
    ContractSubmissionErc721$outboundSchema,
} from "./contractsubmissionerc721.js";
import {
    ContractSubmissionUnknown,
    ContractSubmissionUnknown$inboundSchema,
    ContractSubmissionUnknown$Outbound,
    ContractSubmissionUnknown$outboundSchema,
} from "./contractsubmissionunknown.js";
import * as z from "zod";

export type Contract =
    | (ContractSubmissionUnknown & { ercType: "UNKNOWN" })
    | (ContractSubmissionErc721 & { ercType: "ERC-721" })
    | (ContractSubmissionErc1155 & { ercType: "ERC-1155" })
    | (ContractSubmissionErc20 & { ercType: "ERC-20" });

export type ContractSubmissionBody = {
    contract:
        | (ContractSubmissionUnknown & { ercType: "UNKNOWN" })
        | (ContractSubmissionErc721 & { ercType: "ERC-721" })
        | (ContractSubmissionErc1155 & { ercType: "ERC-1155" })
        | (ContractSubmissionErc20 & { ercType: "ERC-20" });
};

/** @internal */
export const Contract$inboundSchema: z.ZodType<Contract, z.ZodTypeDef, unknown> = z.union([
    ContractSubmissionUnknown$inboundSchema.and(
        z.object({ ercType: z.literal("UNKNOWN") }).transform((v) => ({ ercType: v.ercType }))
    ),
    ContractSubmissionErc721$inboundSchema.and(
        z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({ ercType: v.ercType }))
    ),
    ContractSubmissionErc1155$inboundSchema.and(
        z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({ ercType: v.ercType }))
    ),
    ContractSubmissionErc20$inboundSchema.and(
        z.object({ ercType: z.literal("ERC-20") }).transform((v) => ({ ercType: v.ercType }))
    ),
]);

/** @internal */
export type Contract$Outbound =
    | (ContractSubmissionUnknown$Outbound & { ercType: "UNKNOWN" })
    | (ContractSubmissionErc721$Outbound & { ercType: "ERC-721" })
    | (ContractSubmissionErc1155$Outbound & { ercType: "ERC-1155" })
    | (ContractSubmissionErc20$Outbound & { ercType: "ERC-20" });

/** @internal */
export const Contract$outboundSchema: z.ZodType<Contract$Outbound, z.ZodTypeDef, Contract> =
    z.union([
        ContractSubmissionUnknown$outboundSchema.and(
            z.object({ ercType: z.literal("UNKNOWN") }).transform((v) => ({ ercType: v.ercType }))
        ),
        ContractSubmissionErc721$outboundSchema.and(
            z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({ ercType: v.ercType }))
        ),
        ContractSubmissionErc1155$outboundSchema.and(
            z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({ ercType: v.ercType }))
        ),
        ContractSubmissionErc20$outboundSchema.and(
            z.object({ ercType: z.literal("ERC-20") }).transform((v) => ({ ercType: v.ercType }))
        ),
    ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contract$ {
    /** @deprecated use `Contract$inboundSchema` instead. */
    export const inboundSchema = Contract$inboundSchema;
    /** @deprecated use `Contract$outboundSchema` instead. */
    export const outboundSchema = Contract$outboundSchema;
    /** @deprecated use `Contract$Outbound` instead. */
    export type Outbound = Contract$Outbound;
}

/** @internal */
export const ContractSubmissionBody$inboundSchema: z.ZodType<
    ContractSubmissionBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    contract: z.union([
        ContractSubmissionUnknown$inboundSchema.and(
            z.object({ ercType: z.literal("UNKNOWN") }).transform((v) => ({ ercType: v.ercType }))
        ),
        ContractSubmissionErc721$inboundSchema.and(
            z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({ ercType: v.ercType }))
        ),
        ContractSubmissionErc1155$inboundSchema.and(
            z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({ ercType: v.ercType }))
        ),
        ContractSubmissionErc20$inboundSchema.and(
            z.object({ ercType: z.literal("ERC-20") }).transform((v) => ({ ercType: v.ercType }))
        ),
    ]),
});

/** @internal */
export type ContractSubmissionBody$Outbound = {
    contract:
        | (ContractSubmissionUnknown$Outbound & { ercType: "UNKNOWN" })
        | (ContractSubmissionErc721$Outbound & { ercType: "ERC-721" })
        | (ContractSubmissionErc1155$Outbound & { ercType: "ERC-1155" })
        | (ContractSubmissionErc20$Outbound & { ercType: "ERC-20" });
};

/** @internal */
export const ContractSubmissionBody$outboundSchema: z.ZodType<
    ContractSubmissionBody$Outbound,
    z.ZodTypeDef,
    ContractSubmissionBody
> = z.object({
    contract: z.union([
        ContractSubmissionUnknown$outboundSchema.and(
            z.object({ ercType: z.literal("UNKNOWN") }).transform((v) => ({ ercType: v.ercType }))
        ),
        ContractSubmissionErc721$outboundSchema.and(
            z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({ ercType: v.ercType }))
        ),
        ContractSubmissionErc1155$outboundSchema.and(
            z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({ ercType: v.ercType }))
        ),
        ContractSubmissionErc20$outboundSchema.and(
            z.object({ ercType: z.literal("ERC-20") }).transform((v) => ({ ercType: v.ercType }))
        ),
    ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractSubmissionBody$ {
    /** @deprecated use `ContractSubmissionBody$inboundSchema` instead. */
    export const inboundSchema = ContractSubmissionBody$inboundSchema;
    /** @deprecated use `ContractSubmissionBody$outboundSchema` instead. */
    export const outboundSchema = ContractSubmissionBody$outboundSchema;
    /** @deprecated use `ContractSubmissionBody$Outbound` instead. */
    export type Outbound = ContractSubmissionBody$Outbound;
}
