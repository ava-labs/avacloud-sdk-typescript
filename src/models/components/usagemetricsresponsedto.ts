/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Metric,
  Metric$inboundSchema,
  Metric$Outbound,
  Metric$outboundSchema,
} from "./metric.js";

export type UsageMetricsResponseDTO = {
  /**
   * Duration in which the metrics value is aggregated
   */
  aggregateDuration: string;
  /**
   * Org ID for which the metrics are aggregated
   */
  orgId: string;
  /**
   * Metrics values
   */
  metrics: Array<Metric>;
};

/** @internal */
export const UsageMetricsResponseDTO$inboundSchema: z.ZodType<
  UsageMetricsResponseDTO,
  z.ZodTypeDef,
  unknown
> = z.object({
  aggregateDuration: z.string(),
  orgId: z.string(),
  metrics: z.array(Metric$inboundSchema),
});

/** @internal */
export type UsageMetricsResponseDTO$Outbound = {
  aggregateDuration: string;
  orgId: string;
  metrics: Array<Metric$Outbound>;
};

/** @internal */
export const UsageMetricsResponseDTO$outboundSchema: z.ZodType<
  UsageMetricsResponseDTO$Outbound,
  z.ZodTypeDef,
  UsageMetricsResponseDTO
> = z.object({
  aggregateDuration: z.string(),
  orgId: z.string(),
  metrics: z.array(Metric$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageMetricsResponseDTO$ {
  /** @deprecated use `UsageMetricsResponseDTO$inboundSchema` instead. */
  export const inboundSchema = UsageMetricsResponseDTO$inboundSchema;
  /** @deprecated use `UsageMetricsResponseDTO$outboundSchema` instead. */
  export const outboundSchema = UsageMetricsResponseDTO$outboundSchema;
  /** @deprecated use `UsageMetricsResponseDTO$Outbound` instead. */
  export type Outbound = UsageMetricsResponseDTO$Outbound;
}

export function usageMetricsResponseDTOToJSON(
  usageMetricsResponseDTO: UsageMetricsResponseDTO,
): string {
  return JSON.stringify(
    UsageMetricsResponseDTO$outboundSchema.parse(usageMetricsResponseDTO),
  );
}

export function usageMetricsResponseDTOFromJSON(
  jsonString: string,
): SafeParseResult<UsageMetricsResponseDTO, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsageMetricsResponseDTO$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsageMetricsResponseDTO' from JSON`,
  );
}
