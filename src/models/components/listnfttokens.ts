/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    Erc1155Token,
    Erc1155Token$inboundSchema,
    Erc1155Token$Outbound,
    Erc1155Token$outboundSchema,
} from "./erc1155token.js";
import {
    Erc721Token,
    Erc721Token$inboundSchema,
    Erc721Token$Outbound,
    Erc721Token$outboundSchema,
} from "./erc721token.js";
import * as z from "zod";

export type Tokens = Erc1155Token | Erc721Token;

export type ListNftTokens = {
    /**
     * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
     */
    nextPageToken?: string | undefined;
    tokens: Array<Erc1155Token | Erc721Token>;
};

/** @internal */
export const Tokens$inboundSchema: z.ZodType<Tokens, z.ZodTypeDef, unknown> = z.union([
    Erc1155Token$inboundSchema,
    Erc721Token$inboundSchema,
]);

/** @internal */
export type Tokens$Outbound = Erc1155Token$Outbound | Erc721Token$Outbound;

/** @internal */
export const Tokens$outboundSchema: z.ZodType<Tokens$Outbound, z.ZodTypeDef, Tokens> = z.union([
    Erc1155Token$outboundSchema,
    Erc721Token$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tokens$ {
    /** @deprecated use `Tokens$inboundSchema` instead. */
    export const inboundSchema = Tokens$inboundSchema;
    /** @deprecated use `Tokens$outboundSchema` instead. */
    export const outboundSchema = Tokens$outboundSchema;
    /** @deprecated use `Tokens$Outbound` instead. */
    export type Outbound = Tokens$Outbound;
}

/** @internal */
export const ListNftTokens$inboundSchema: z.ZodType<ListNftTokens, z.ZodTypeDef, unknown> =
    z.object({
        nextPageToken: z.string().optional(),
        tokens: z.array(z.union([Erc1155Token$inboundSchema, Erc721Token$inboundSchema])),
    });

/** @internal */
export type ListNftTokens$Outbound = {
    nextPageToken?: string | undefined;
    tokens: Array<Erc1155Token$Outbound | Erc721Token$Outbound>;
};

/** @internal */
export const ListNftTokens$outboundSchema: z.ZodType<
    ListNftTokens$Outbound,
    z.ZodTypeDef,
    ListNftTokens
> = z.object({
    nextPageToken: z.string().optional(),
    tokens: z.array(z.union([Erc1155Token$outboundSchema, Erc721Token$outboundSchema])),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListNftTokens$ {
    /** @deprecated use `ListNftTokens$inboundSchema` instead. */
    export const inboundSchema = ListNftTokens$inboundSchema;
    /** @deprecated use `ListNftTokens$outboundSchema` instead. */
    export const outboundSchema = ListNftTokens$outboundSchema;
    /** @deprecated use `ListNftTokens$Outbound` instead. */
    export type Outbound = ListNftTokens$Outbound;
}
