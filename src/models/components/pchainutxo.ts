/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    AssetAmount,
    AssetAmount$inboundSchema,
    AssetAmount$Outbound,
    AssetAmount$outboundSchema,
} from "./assetamount.js";
import { RewardType, RewardType$inboundSchema, RewardType$outboundSchema } from "./rewardtype.js";
import { UtxoType, UtxoType$inboundSchema, UtxoType$outboundSchema } from "./utxotype.js";
import * as z from "zod";

export type PChainUtxo = {
    /**
     * Addresses that are eligible to sign the consumption of this output.
     */
    addresses: Array<string>;
    asset: AssetAmount;
    /**
     * Blockchain ID on which this output is consumed on.
     */
    consumedOnChainId: string;
    /**
     * Transaction ID that consumed this output.
     */
    consumingTxHash?: string | undefined;
    /**
     * Blockchain ID on which this output is created on.
     */
    createdOnChainId: string;
    /**
     * UTXO ID for this output.
     */
    utxoId: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    amount: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    assetId: string;
    blockNumber: string;
    blockTimestamp: number;
    consumingBlockNumber?: string | undefined;
    consumingBlockTimestamp?: number | undefined;
    platformLocktime?: number | undefined;
    outputIndex: number;
    rewardType?: RewardType | undefined;
    stakeableLocktime?: number | undefined;
    staked?: boolean | undefined;
    threshold?: number | undefined;
    txHash: string;
    utxoEndTimestamp?: number | undefined;
    utxoStartTimestamp?: number | undefined;
    utxoType: UtxoType;
};

/** @internal */
export const PChainUtxo$inboundSchema: z.ZodType<PChainUtxo, z.ZodTypeDef, unknown> = z.object({
    addresses: z.array(z.string()),
    asset: AssetAmount$inboundSchema,
    consumedOnChainId: z.string(),
    consumingTxHash: z.string().optional(),
    createdOnChainId: z.string(),
    utxoId: z.string(),
    amount: z.string(),
    assetId: z.string(),
    blockNumber: z.string(),
    blockTimestamp: z.number(),
    consumingBlockNumber: z.string().optional(),
    consumingBlockTimestamp: z.number().optional(),
    platformLocktime: z.number().optional(),
    outputIndex: z.number(),
    rewardType: RewardType$inboundSchema.optional(),
    stakeableLocktime: z.number().optional(),
    staked: z.boolean().optional(),
    threshold: z.number().optional(),
    txHash: z.string(),
    utxoEndTimestamp: z.number().optional(),
    utxoStartTimestamp: z.number().optional(),
    utxoType: UtxoType$inboundSchema,
});

/** @internal */
export type PChainUtxo$Outbound = {
    addresses: Array<string>;
    asset: AssetAmount$Outbound;
    consumedOnChainId: string;
    consumingTxHash?: string | undefined;
    createdOnChainId: string;
    utxoId: string;
    amount: string;
    assetId: string;
    blockNumber: string;
    blockTimestamp: number;
    consumingBlockNumber?: string | undefined;
    consumingBlockTimestamp?: number | undefined;
    platformLocktime?: number | undefined;
    outputIndex: number;
    rewardType?: string | undefined;
    stakeableLocktime?: number | undefined;
    staked?: boolean | undefined;
    threshold?: number | undefined;
    txHash: string;
    utxoEndTimestamp?: number | undefined;
    utxoStartTimestamp?: number | undefined;
    utxoType: string;
};

/** @internal */
export const PChainUtxo$outboundSchema: z.ZodType<PChainUtxo$Outbound, z.ZodTypeDef, PChainUtxo> =
    z.object({
        addresses: z.array(z.string()),
        asset: AssetAmount$outboundSchema,
        consumedOnChainId: z.string(),
        consumingTxHash: z.string().optional(),
        createdOnChainId: z.string(),
        utxoId: z.string(),
        amount: z.string(),
        assetId: z.string(),
        blockNumber: z.string(),
        blockTimestamp: z.number(),
        consumingBlockNumber: z.string().optional(),
        consumingBlockTimestamp: z.number().optional(),
        platformLocktime: z.number().optional(),
        outputIndex: z.number(),
        rewardType: RewardType$outboundSchema.optional(),
        stakeableLocktime: z.number().optional(),
        staked: z.boolean().optional(),
        threshold: z.number().optional(),
        txHash: z.string(),
        utxoEndTimestamp: z.number().optional(),
        utxoStartTimestamp: z.number().optional(),
        utxoType: UtxoType$outboundSchema,
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PChainUtxo$ {
    /** @deprecated use `PChainUtxo$inboundSchema` instead. */
    export const inboundSchema = PChainUtxo$inboundSchema;
    /** @deprecated use `PChainUtxo$outboundSchema` instead. */
    export const outboundSchema = PChainUtxo$outboundSchema;
    /** @deprecated use `PChainUtxo$Outbound` instead. */
    export type Outbound = PChainUtxo$Outbound;
}
