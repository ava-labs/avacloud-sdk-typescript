/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TransactionDetails,
  TransactionDetails$inboundSchema,
  TransactionDetails$Outbound,
  TransactionDetails$outboundSchema,
} from "./transactiondetails.js";

export type ListTransactionDetailsResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  transactions: Array<TransactionDetails>;
};

/** @internal */
export const ListTransactionDetailsResponse$inboundSchema: z.ZodType<
  ListTransactionDetailsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  transactions: z.array(TransactionDetails$inboundSchema),
});

/** @internal */
export type ListTransactionDetailsResponse$Outbound = {
  nextPageToken?: string | undefined;
  transactions: Array<TransactionDetails$Outbound>;
};

/** @internal */
export const ListTransactionDetailsResponse$outboundSchema: z.ZodType<
  ListTransactionDetailsResponse$Outbound,
  z.ZodTypeDef,
  ListTransactionDetailsResponse
> = z.object({
  nextPageToken: z.string().optional(),
  transactions: z.array(TransactionDetails$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransactionDetailsResponse$ {
  /** @deprecated use `ListTransactionDetailsResponse$inboundSchema` instead. */
  export const inboundSchema = ListTransactionDetailsResponse$inboundSchema;
  /** @deprecated use `ListTransactionDetailsResponse$outboundSchema` instead. */
  export const outboundSchema = ListTransactionDetailsResponse$outboundSchema;
  /** @deprecated use `ListTransactionDetailsResponse$Outbound` instead. */
  export type Outbound = ListTransactionDetailsResponse$Outbound;
}

export function listTransactionDetailsResponseToJSON(
  listTransactionDetailsResponse: ListTransactionDetailsResponse,
): string {
  return JSON.stringify(
    ListTransactionDetailsResponse$outboundSchema.parse(
      listTransactionDetailsResponse,
    ),
  );
}

export function listTransactionDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTransactionDetailsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransactionDetailsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransactionDetailsResponse' from JSON`,
  );
}
