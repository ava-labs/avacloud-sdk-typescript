/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type XChainVertex = {
  vertexHash: string;
  parentHashes: Array<string>;
  vertexHeight: number;
  vertexIndex: number;
  vertexTimestamp: number;
  txCount: number;
  transactions: Array<string>;
  vertexSizeBytes: number;
};

/** @internal */
export const XChainVertex$inboundSchema: z.ZodType<
  XChainVertex,
  z.ZodTypeDef,
  unknown
> = z.object({
  vertexHash: z.string(),
  parentHashes: z.array(z.string()),
  vertexHeight: z.number(),
  vertexIndex: z.number(),
  vertexTimestamp: z.number(),
  txCount: z.number(),
  transactions: z.array(z.string()),
  vertexSizeBytes: z.number(),
});

/** @internal */
export type XChainVertex$Outbound = {
  vertexHash: string;
  parentHashes: Array<string>;
  vertexHeight: number;
  vertexIndex: number;
  vertexTimestamp: number;
  txCount: number;
  transactions: Array<string>;
  vertexSizeBytes: number;
};

/** @internal */
export const XChainVertex$outboundSchema: z.ZodType<
  XChainVertex$Outbound,
  z.ZodTypeDef,
  XChainVertex
> = z.object({
  vertexHash: z.string(),
  parentHashes: z.array(z.string()),
  vertexHeight: z.number(),
  vertexIndex: z.number(),
  vertexTimestamp: z.number(),
  txCount: z.number(),
  transactions: z.array(z.string()),
  vertexSizeBytes: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace XChainVertex$ {
  /** @deprecated use `XChainVertex$inboundSchema` instead. */
  export const inboundSchema = XChainVertex$inboundSchema;
  /** @deprecated use `XChainVertex$outboundSchema` instead. */
  export const outboundSchema = XChainVertex$outboundSchema;
  /** @deprecated use `XChainVertex$Outbound` instead. */
  export type Outbound = XChainVertex$Outbound;
}

export function xChainVertexToJSON(xChainVertex: XChainVertex): string {
  return JSON.stringify(XChainVertex$outboundSchema.parse(xChainVertex));
}

export function xChainVertexFromJSON(
  jsonString: string,
): SafeParseResult<XChainVertex, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => XChainVertex$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'XChainVertex' from JSON`,
  );
}
