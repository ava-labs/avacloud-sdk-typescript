/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HealthIndicatorResultDto,
  HealthIndicatorResultDto$inboundSchema,
  HealthIndicatorResultDto$Outbound,
  HealthIndicatorResultDto$outboundSchema,
} from "./healthindicatorresultdto.js";

export const Status = {
  Error: "error",
  Ok: "ok",
  ShuttingDown: "shutting_down",
} as const;
export type Status = ClosedEnum<typeof Status>;

export type HealthCheckResultDto = {
  status?: Status | undefined;
  info?: { [k: string]: HealthIndicatorResultDto } | null | undefined;
  error?: { [k: string]: HealthIndicatorResultDto } | null | undefined;
  details?: { [k: string]: HealthIndicatorResultDto } | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const HealthCheckResultDto$inboundSchema: z.ZodType<
  HealthCheckResultDto,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: Status$inboundSchema.optional(),
  info: z.nullable(z.record(HealthIndicatorResultDto$inboundSchema)).optional(),
  error: z.nullable(z.record(HealthIndicatorResultDto$inboundSchema))
    .optional(),
  details: z.record(HealthIndicatorResultDto$inboundSchema).optional(),
});

/** @internal */
export type HealthCheckResultDto$Outbound = {
  status?: string | undefined;
  info?: { [k: string]: HealthIndicatorResultDto$Outbound } | null | undefined;
  error?: { [k: string]: HealthIndicatorResultDto$Outbound } | null | undefined;
  details?: { [k: string]: HealthIndicatorResultDto$Outbound } | undefined;
};

/** @internal */
export const HealthCheckResultDto$outboundSchema: z.ZodType<
  HealthCheckResultDto$Outbound,
  z.ZodTypeDef,
  HealthCheckResultDto
> = z.object({
  status: Status$outboundSchema.optional(),
  info: z.nullable(z.record(HealthIndicatorResultDto$outboundSchema))
    .optional(),
  error: z.nullable(z.record(HealthIndicatorResultDto$outboundSchema))
    .optional(),
  details: z.record(HealthIndicatorResultDto$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HealthCheckResultDto$ {
  /** @deprecated use `HealthCheckResultDto$inboundSchema` instead. */
  export const inboundSchema = HealthCheckResultDto$inboundSchema;
  /** @deprecated use `HealthCheckResultDto$outboundSchema` instead. */
  export const outboundSchema = HealthCheckResultDto$outboundSchema;
  /** @deprecated use `HealthCheckResultDto$Outbound` instead. */
  export type Outbound = HealthCheckResultDto$Outbound;
}

export function healthCheckResultDtoToJSON(
  healthCheckResultDto: HealthCheckResultDto,
): string {
  return JSON.stringify(
    HealthCheckResultDto$outboundSchema.parse(healthCheckResultDto),
  );
}

export function healthCheckResultDtoFromJSON(
  jsonString: string,
): SafeParseResult<HealthCheckResultDto, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HealthCheckResultDto$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HealthCheckResultDto' from JSON`,
  );
}
