/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PrimaryNetworkType,
  PrimaryNetworkType$inboundSchema,
  PrimaryNetworkType$outboundSchema,
} from "./primarynetworktype.js";
import {
  ValidatorActivityMetadata,
  ValidatorActivityMetadata$inboundSchema,
  ValidatorActivityMetadata$Outbound,
  ValidatorActivityMetadata$outboundSchema,
} from "./validatoractivitymetadata.js";

export const ValidatorActivityRequestEventType = {
  ValidatorActivity: "validator_activity",
} as const;
export type ValidatorActivityRequestEventType = ClosedEnum<
  typeof ValidatorActivityRequestEventType
>;

/**
 * Metadata for platform validator activity event
 */
export type ValidatorActivityRequestMetadata = ValidatorActivityMetadata;

export type ValidatorActivityRequest = {
  eventType: ValidatorActivityRequestEventType;
  url: string;
  name?: string | undefined;
  description?: string | undefined;
  network: PrimaryNetworkType;
  /**
   * Metadata for platform validator activity event
   */
  metadata: ValidatorActivityMetadata;
};

/** @internal */
export const ValidatorActivityRequestEventType$inboundSchema: z.ZodNativeEnum<
  typeof ValidatorActivityRequestEventType
> = z.nativeEnum(ValidatorActivityRequestEventType);

/** @internal */
export const ValidatorActivityRequestEventType$outboundSchema: z.ZodNativeEnum<
  typeof ValidatorActivityRequestEventType
> = ValidatorActivityRequestEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidatorActivityRequestEventType$ {
  /** @deprecated use `ValidatorActivityRequestEventType$inboundSchema` instead. */
  export const inboundSchema = ValidatorActivityRequestEventType$inboundSchema;
  /** @deprecated use `ValidatorActivityRequestEventType$outboundSchema` instead. */
  export const outboundSchema =
    ValidatorActivityRequestEventType$outboundSchema;
}

/** @internal */
export const ValidatorActivityRequestMetadata$inboundSchema: z.ZodType<
  ValidatorActivityRequestMetadata,
  z.ZodTypeDef,
  unknown
> = ValidatorActivityMetadata$inboundSchema;

/** @internal */
export type ValidatorActivityRequestMetadata$Outbound =
  ValidatorActivityMetadata$Outbound;

/** @internal */
export const ValidatorActivityRequestMetadata$outboundSchema: z.ZodType<
  ValidatorActivityRequestMetadata$Outbound,
  z.ZodTypeDef,
  ValidatorActivityRequestMetadata
> = ValidatorActivityMetadata$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidatorActivityRequestMetadata$ {
  /** @deprecated use `ValidatorActivityRequestMetadata$inboundSchema` instead. */
  export const inboundSchema = ValidatorActivityRequestMetadata$inboundSchema;
  /** @deprecated use `ValidatorActivityRequestMetadata$outboundSchema` instead. */
  export const outboundSchema = ValidatorActivityRequestMetadata$outboundSchema;
  /** @deprecated use `ValidatorActivityRequestMetadata$Outbound` instead. */
  export type Outbound = ValidatorActivityRequestMetadata$Outbound;
}

export function validatorActivityRequestMetadataToJSON(
  validatorActivityRequestMetadata: ValidatorActivityRequestMetadata,
): string {
  return JSON.stringify(
    ValidatorActivityRequestMetadata$outboundSchema.parse(
      validatorActivityRequestMetadata,
    ),
  );
}

export function validatorActivityRequestMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ValidatorActivityRequestMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidatorActivityRequestMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidatorActivityRequestMetadata' from JSON`,
  );
}

/** @internal */
export const ValidatorActivityRequest$inboundSchema: z.ZodType<
  ValidatorActivityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventType: ValidatorActivityRequestEventType$inboundSchema,
  url: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  network: PrimaryNetworkType$inboundSchema,
  metadata: ValidatorActivityMetadata$inboundSchema,
});

/** @internal */
export type ValidatorActivityRequest$Outbound = {
  eventType: string;
  url: string;
  name?: string | undefined;
  description?: string | undefined;
  network: string;
  metadata: ValidatorActivityMetadata$Outbound;
};

/** @internal */
export const ValidatorActivityRequest$outboundSchema: z.ZodType<
  ValidatorActivityRequest$Outbound,
  z.ZodTypeDef,
  ValidatorActivityRequest
> = z.object({
  eventType: ValidatorActivityRequestEventType$outboundSchema,
  url: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  network: PrimaryNetworkType$outboundSchema,
  metadata: ValidatorActivityMetadata$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidatorActivityRequest$ {
  /** @deprecated use `ValidatorActivityRequest$inboundSchema` instead. */
  export const inboundSchema = ValidatorActivityRequest$inboundSchema;
  /** @deprecated use `ValidatorActivityRequest$outboundSchema` instead. */
  export const outboundSchema = ValidatorActivityRequest$outboundSchema;
  /** @deprecated use `ValidatorActivityRequest$Outbound` instead. */
  export type Outbound = ValidatorActivityRequest$Outbound;
}

export function validatorActivityRequestToJSON(
  validatorActivityRequest: ValidatorActivityRequest,
): string {
  return JSON.stringify(
    ValidatorActivityRequest$outboundSchema.parse(validatorActivityRequest),
  );
}

export function validatorActivityRequestFromJSON(
  jsonString: string,
): SafeParseResult<ValidatorActivityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidatorActivityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidatorActivityRequest' from JSON`,
  );
}
