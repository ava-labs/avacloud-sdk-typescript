/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddressActivityMetadata = {
  /**
   * Array of hexadecimal strings of the event signatures.
   */
  eventSignatures?: Array<string> | undefined;
  /**
   * Ethereum address(es) for the address_activity event type
   */
  addresses: Array<string>;
};

/** @internal */
export const AddressActivityMetadata$inboundSchema: z.ZodType<
  AddressActivityMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventSignatures: z.array(z.string()).optional(),
  addresses: z.array(z.string()),
});

/** @internal */
export type AddressActivityMetadata$Outbound = {
  eventSignatures?: Array<string> | undefined;
  addresses: Array<string>;
};

/** @internal */
export const AddressActivityMetadata$outboundSchema: z.ZodType<
  AddressActivityMetadata$Outbound,
  z.ZodTypeDef,
  AddressActivityMetadata
> = z.object({
  eventSignatures: z.array(z.string()).optional(),
  addresses: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressActivityMetadata$ {
  /** @deprecated use `AddressActivityMetadata$inboundSchema` instead. */
  export const inboundSchema = AddressActivityMetadata$inboundSchema;
  /** @deprecated use `AddressActivityMetadata$outboundSchema` instead. */
  export const outboundSchema = AddressActivityMetadata$outboundSchema;
  /** @deprecated use `AddressActivityMetadata$Outbound` instead. */
  export type Outbound = AddressActivityMetadata$Outbound;
}

export function addressActivityMetadataToJSON(
  addressActivityMetadata: AddressActivityMetadata,
): string {
  return JSON.stringify(
    AddressActivityMetadata$outboundSchema.parse(addressActivityMetadata),
  );
}

export function addressActivityMetadataFromJSON(
  jsonString: string,
): SafeParseResult<AddressActivityMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressActivityMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressActivityMetadata' from JSON`,
  );
}
