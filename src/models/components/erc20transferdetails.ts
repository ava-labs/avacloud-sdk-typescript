/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Erc20Token,
  Erc20Token$inboundSchema,
  Erc20Token$Outbound,
  Erc20Token$outboundSchema,
} from "./erc20token.js";
import {
  RichAddress,
  RichAddress$inboundSchema,
  RichAddress$Outbound,
  RichAddress$outboundSchema,
} from "./richaddress.js";

export type Erc20TransferDetails = {
  from: RichAddress;
  to: RichAddress;
  logIndex: number;
  value: string;
  erc20Token: Erc20Token;
};

/** @internal */
export const Erc20TransferDetails$inboundSchema: z.ZodType<
  Erc20TransferDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: RichAddress$inboundSchema,
  to: RichAddress$inboundSchema,
  logIndex: z.number(),
  value: z.string(),
  erc20Token: Erc20Token$inboundSchema,
});

/** @internal */
export type Erc20TransferDetails$Outbound = {
  from: RichAddress$Outbound;
  to: RichAddress$Outbound;
  logIndex: number;
  value: string;
  erc20Token: Erc20Token$Outbound;
};

/** @internal */
export const Erc20TransferDetails$outboundSchema: z.ZodType<
  Erc20TransferDetails$Outbound,
  z.ZodTypeDef,
  Erc20TransferDetails
> = z.object({
  from: RichAddress$outboundSchema,
  to: RichAddress$outboundSchema,
  logIndex: z.number(),
  value: z.string(),
  erc20Token: Erc20Token$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Erc20TransferDetails$ {
  /** @deprecated use `Erc20TransferDetails$inboundSchema` instead. */
  export const inboundSchema = Erc20TransferDetails$inboundSchema;
  /** @deprecated use `Erc20TransferDetails$outboundSchema` instead. */
  export const outboundSchema = Erc20TransferDetails$outboundSchema;
  /** @deprecated use `Erc20TransferDetails$Outbound` instead. */
  export type Outbound = Erc20TransferDetails$Outbound;
}

export function erc20TransferDetailsToJSON(
  erc20TransferDetails: Erc20TransferDetails,
): string {
  return JSON.stringify(
    Erc20TransferDetails$outboundSchema.parse(erc20TransferDetails),
  );
}

export function erc20TransferDetailsFromJSON(
  jsonString: string,
): SafeParseResult<Erc20TransferDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Erc20TransferDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Erc20TransferDetails' from JSON`,
  );
}
