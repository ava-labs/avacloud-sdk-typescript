/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type InternalTransaction = {
  /**
   * Sender address
   */
  from: string;
  /**
   * Recipient address
   */
  to: string;
  /**
   * Internal transaction type
   */
  internalTxType: string;
  /**
   * Value transferred
   */
  value: string;
  /**
   * Gas used
   */
  gasUsed: string;
  /**
   * Gas limit
   */
  gasLimit: string;
  /**
   * Transaction hash
   */
  transactionHash: string;
};

/** @internal */
export const InternalTransaction$inboundSchema: z.ZodType<
  InternalTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.string(),
  to: z.string(),
  internalTxType: z.string(),
  value: z.string(),
  gasUsed: z.string(),
  gasLimit: z.string(),
  transactionHash: z.string(),
});

/** @internal */
export type InternalTransaction$Outbound = {
  from: string;
  to: string;
  internalTxType: string;
  value: string;
  gasUsed: string;
  gasLimit: string;
  transactionHash: string;
};

/** @internal */
export const InternalTransaction$outboundSchema: z.ZodType<
  InternalTransaction$Outbound,
  z.ZodTypeDef,
  InternalTransaction
> = z.object({
  from: z.string(),
  to: z.string(),
  internalTxType: z.string(),
  value: z.string(),
  gasUsed: z.string(),
  gasLimit: z.string(),
  transactionHash: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InternalTransaction$ {
  /** @deprecated use `InternalTransaction$inboundSchema` instead. */
  export const inboundSchema = InternalTransaction$inboundSchema;
  /** @deprecated use `InternalTransaction$outboundSchema` instead. */
  export const outboundSchema = InternalTransaction$outboundSchema;
  /** @deprecated use `InternalTransaction$Outbound` instead. */
  export type Outbound = InternalTransaction$Outbound;
}

export function internalTransactionToJSON(
  internalTransaction: InternalTransaction,
): string {
  return JSON.stringify(
    InternalTransaction$outboundSchema.parse(internalTransaction),
  );
}

export function internalTransactionFromJSON(
  jsonString: string,
): SafeParseResult<InternalTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InternalTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InternalTransaction' from JSON`,
  );
}
