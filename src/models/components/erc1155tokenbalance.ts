/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import {
  Erc1155TokenMetadata,
  Erc1155TokenMetadata$inboundSchema,
  Erc1155TokenMetadata$Outbound,
  Erc1155TokenMetadata$outboundSchema,
} from "./erc1155tokenmetadata.js";

export const Erc1155TokenBalanceErcType = {
  Erc1155: "ERC-1155",
} as const;
export type Erc1155TokenBalanceErcType = ClosedEnum<
  typeof Erc1155TokenBalanceErcType
>;

export type Erc1155TokenBalance = {
  /**
   * A wallet or contract address in mixed-case checksum encoding.
   */
  address: string;
  ercType: Erc1155TokenBalanceErcType;
  tokenId: string;
  tokenUri: string;
  metadata: Erc1155TokenMetadata;
  /**
   * The evm chain id.
   */
  chainId: string;
  /**
   * The address balance for the token, in units specified by the `decimals` value for the contract.
   */
  balance: string;
};

/** @internal */
export const Erc1155TokenBalanceErcType$inboundSchema: z.ZodNativeEnum<
  typeof Erc1155TokenBalanceErcType
> = z.nativeEnum(Erc1155TokenBalanceErcType);

/** @internal */
export const Erc1155TokenBalanceErcType$outboundSchema: z.ZodNativeEnum<
  typeof Erc1155TokenBalanceErcType
> = Erc1155TokenBalanceErcType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Erc1155TokenBalanceErcType$ {
  /** @deprecated use `Erc1155TokenBalanceErcType$inboundSchema` instead. */
  export const inboundSchema = Erc1155TokenBalanceErcType$inboundSchema;
  /** @deprecated use `Erc1155TokenBalanceErcType$outboundSchema` instead. */
  export const outboundSchema = Erc1155TokenBalanceErcType$outboundSchema;
}

/** @internal */
export const Erc1155TokenBalance$inboundSchema: z.ZodType<
  Erc1155TokenBalance,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  ercType: Erc1155TokenBalanceErcType$inboundSchema,
  tokenId: z.string(),
  tokenUri: z.string(),
  metadata: Erc1155TokenMetadata$inboundSchema,
  chainId: z.string(),
  balance: z.string(),
});

/** @internal */
export type Erc1155TokenBalance$Outbound = {
  address: string;
  ercType: string;
  tokenId: string;
  tokenUri: string;
  metadata: Erc1155TokenMetadata$Outbound;
  chainId: string;
  balance: string;
};

/** @internal */
export const Erc1155TokenBalance$outboundSchema: z.ZodType<
  Erc1155TokenBalance$Outbound,
  z.ZodTypeDef,
  Erc1155TokenBalance
> = z.object({
  address: z.string(),
  ercType: Erc1155TokenBalanceErcType$outboundSchema,
  tokenId: z.string(),
  tokenUri: z.string(),
  metadata: Erc1155TokenMetadata$outboundSchema,
  chainId: z.string(),
  balance: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Erc1155TokenBalance$ {
  /** @deprecated use `Erc1155TokenBalance$inboundSchema` instead. */
  export const inboundSchema = Erc1155TokenBalance$inboundSchema;
  /** @deprecated use `Erc1155TokenBalance$outboundSchema` instead. */
  export const outboundSchema = Erc1155TokenBalance$outboundSchema;
  /** @deprecated use `Erc1155TokenBalance$Outbound` instead. */
  export type Outbound = Erc1155TokenBalance$Outbound;
}
