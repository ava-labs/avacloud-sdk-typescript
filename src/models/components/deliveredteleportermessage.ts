/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import {
  TeleporterDestinationTransaction,
  TeleporterDestinationTransaction$inboundSchema,
  TeleporterDestinationTransaction$Outbound,
  TeleporterDestinationTransaction$outboundSchema,
} from "./teleporterdestinationtransaction.js";
import {
  TeleporterReceipt,
  TeleporterReceipt$inboundSchema,
  TeleporterReceipt$Outbound,
  TeleporterReceipt$outboundSchema,
} from "./teleporterreceipt.js";
import {
  TeleporterRewardDetails,
  TeleporterRewardDetails$inboundSchema,
  TeleporterRewardDetails$Outbound,
  TeleporterRewardDetails$outboundSchema,
} from "./teleporterrewarddetails.js";
import {
  TeleporterSourceTransaction,
  TeleporterSourceTransaction$inboundSchema,
  TeleporterSourceTransaction$Outbound,
  TeleporterSourceTransaction$outboundSchema,
} from "./teleportersourcetransaction.js";

export const DeliveredTeleporterMessageStatus = {
  Delivered: "delivered",
} as const;
export type DeliveredTeleporterMessageStatus = ClosedEnum<
  typeof DeliveredTeleporterMessageStatus
>;

export type DeliveredTeleporterMessage = {
  messageId: string;
  teleporterContractAddress: string;
  sourceBlockchainId: string;
  destinationBlockchainId: string;
  sourceEvmChainId: string;
  destinationEvmChainId: string;
  messageNonce: string;
  from: string;
  to: string;
  data?: string | undefined;
  messageExecuted: boolean;
  receipts: Array<TeleporterReceipt>;
  receiptDelivered: boolean;
  rewardDetails: TeleporterRewardDetails;
  sourceTransaction: TeleporterSourceTransaction;
  destinationTransaction: TeleporterDestinationTransaction;
  status: DeliveredTeleporterMessageStatus;
};

/** @internal */
export const DeliveredTeleporterMessageStatus$inboundSchema: z.ZodNativeEnum<
  typeof DeliveredTeleporterMessageStatus
> = z.nativeEnum(DeliveredTeleporterMessageStatus);

/** @internal */
export const DeliveredTeleporterMessageStatus$outboundSchema: z.ZodNativeEnum<
  typeof DeliveredTeleporterMessageStatus
> = DeliveredTeleporterMessageStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveredTeleporterMessageStatus$ {
  /** @deprecated use `DeliveredTeleporterMessageStatus$inboundSchema` instead. */
  export const inboundSchema = DeliveredTeleporterMessageStatus$inboundSchema;
  /** @deprecated use `DeliveredTeleporterMessageStatus$outboundSchema` instead. */
  export const outboundSchema = DeliveredTeleporterMessageStatus$outboundSchema;
}

/** @internal */
export const DeliveredTeleporterMessage$inboundSchema: z.ZodType<
  DeliveredTeleporterMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageId: z.string(),
  teleporterContractAddress: z.string(),
  sourceBlockchainId: z.string(),
  destinationBlockchainId: z.string(),
  sourceEvmChainId: z.string(),
  destinationEvmChainId: z.string(),
  messageNonce: z.string(),
  from: z.string(),
  to: z.string(),
  data: z.string().optional(),
  messageExecuted: z.boolean(),
  receipts: z.array(TeleporterReceipt$inboundSchema),
  receiptDelivered: z.boolean(),
  rewardDetails: TeleporterRewardDetails$inboundSchema,
  sourceTransaction: TeleporterSourceTransaction$inboundSchema,
  destinationTransaction: TeleporterDestinationTransaction$inboundSchema,
  status: DeliveredTeleporterMessageStatus$inboundSchema,
});

/** @internal */
export type DeliveredTeleporterMessage$Outbound = {
  messageId: string;
  teleporterContractAddress: string;
  sourceBlockchainId: string;
  destinationBlockchainId: string;
  sourceEvmChainId: string;
  destinationEvmChainId: string;
  messageNonce: string;
  from: string;
  to: string;
  data?: string | undefined;
  messageExecuted: boolean;
  receipts: Array<TeleporterReceipt$Outbound>;
  receiptDelivered: boolean;
  rewardDetails: TeleporterRewardDetails$Outbound;
  sourceTransaction: TeleporterSourceTransaction$Outbound;
  destinationTransaction: TeleporterDestinationTransaction$Outbound;
  status: string;
};

/** @internal */
export const DeliveredTeleporterMessage$outboundSchema: z.ZodType<
  DeliveredTeleporterMessage$Outbound,
  z.ZodTypeDef,
  DeliveredTeleporterMessage
> = z.object({
  messageId: z.string(),
  teleporterContractAddress: z.string(),
  sourceBlockchainId: z.string(),
  destinationBlockchainId: z.string(),
  sourceEvmChainId: z.string(),
  destinationEvmChainId: z.string(),
  messageNonce: z.string(),
  from: z.string(),
  to: z.string(),
  data: z.string().optional(),
  messageExecuted: z.boolean(),
  receipts: z.array(TeleporterReceipt$outboundSchema),
  receiptDelivered: z.boolean(),
  rewardDetails: TeleporterRewardDetails$outboundSchema,
  sourceTransaction: TeleporterSourceTransaction$outboundSchema,
  destinationTransaction: TeleporterDestinationTransaction$outboundSchema,
  status: DeliveredTeleporterMessageStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveredTeleporterMessage$ {
  /** @deprecated use `DeliveredTeleporterMessage$inboundSchema` instead. */
  export const inboundSchema = DeliveredTeleporterMessage$inboundSchema;
  /** @deprecated use `DeliveredTeleporterMessage$outboundSchema` instead. */
  export const outboundSchema = DeliveredTeleporterMessage$outboundSchema;
  /** @deprecated use `DeliveredTeleporterMessage$Outbound` instead. */
  export type Outbound = DeliveredTeleporterMessage$Outbound;
}
