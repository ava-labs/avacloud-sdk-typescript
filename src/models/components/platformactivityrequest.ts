/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PlatformActivityMetadata,
  PlatformActivityMetadata$inboundSchema,
  PlatformActivityMetadata$Outbound,
  PlatformActivityMetadata$outboundSchema,
} from "./platformactivitymetadata.js";
import {
  PrimaryNetworkType,
  PrimaryNetworkType$inboundSchema,
  PrimaryNetworkType$outboundSchema,
} from "./primarynetworktype.js";

export const PlatformActivityRequestEventType = {
  PlatformAddressActivity: "platform_address_activity",
  ValidatorActivity: "validator_activity",
} as const;
export type PlatformActivityRequestEventType = ClosedEnum<
  typeof PlatformActivityRequestEventType
>;

/**
 * Metadata for platform activity
 */
export type PlatformActivityRequestMetadata = PlatformActivityMetadata;

export type PlatformActivityRequest = {
  eventType: PlatformActivityRequestEventType;
  url: string;
  chainId: string;
  network?: PrimaryNetworkType | undefined;
  name?: string | undefined;
  description?: string | undefined;
  /**
   * Whether to include traces in the webhook payload. Traces are only available for C-Chain on chainId 43113 and 43114.
   */
  includeInternalTxs?: boolean | undefined;
  /**
   * Whether to include logs in the webhook payload.
   */
  includeLogs?: boolean | undefined;
  /**
   * Metadata for platform activity
   */
  metadata: PlatformActivityMetadata;
};

/** @internal */
export const PlatformActivityRequestEventType$inboundSchema: z.ZodNativeEnum<
  typeof PlatformActivityRequestEventType
> = z.nativeEnum(PlatformActivityRequestEventType);

/** @internal */
export const PlatformActivityRequestEventType$outboundSchema: z.ZodNativeEnum<
  typeof PlatformActivityRequestEventType
> = PlatformActivityRequestEventType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlatformActivityRequestEventType$ {
  /** @deprecated use `PlatformActivityRequestEventType$inboundSchema` instead. */
  export const inboundSchema = PlatformActivityRequestEventType$inboundSchema;
  /** @deprecated use `PlatformActivityRequestEventType$outboundSchema` instead. */
  export const outboundSchema = PlatformActivityRequestEventType$outboundSchema;
}

/** @internal */
export const PlatformActivityRequestMetadata$inboundSchema: z.ZodType<
  PlatformActivityRequestMetadata,
  z.ZodTypeDef,
  unknown
> = PlatformActivityMetadata$inboundSchema;

/** @internal */
export type PlatformActivityRequestMetadata$Outbound =
  PlatformActivityMetadata$Outbound;

/** @internal */
export const PlatformActivityRequestMetadata$outboundSchema: z.ZodType<
  PlatformActivityRequestMetadata$Outbound,
  z.ZodTypeDef,
  PlatformActivityRequestMetadata
> = PlatformActivityMetadata$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlatformActivityRequestMetadata$ {
  /** @deprecated use `PlatformActivityRequestMetadata$inboundSchema` instead. */
  export const inboundSchema = PlatformActivityRequestMetadata$inboundSchema;
  /** @deprecated use `PlatformActivityRequestMetadata$outboundSchema` instead. */
  export const outboundSchema = PlatformActivityRequestMetadata$outboundSchema;
  /** @deprecated use `PlatformActivityRequestMetadata$Outbound` instead. */
  export type Outbound = PlatformActivityRequestMetadata$Outbound;
}

export function platformActivityRequestMetadataToJSON(
  platformActivityRequestMetadata: PlatformActivityRequestMetadata,
): string {
  return JSON.stringify(
    PlatformActivityRequestMetadata$outboundSchema.parse(
      platformActivityRequestMetadata,
    ),
  );
}

export function platformActivityRequestMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PlatformActivityRequestMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlatformActivityRequestMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlatformActivityRequestMetadata' from JSON`,
  );
}

/** @internal */
export const PlatformActivityRequest$inboundSchema: z.ZodType<
  PlatformActivityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventType: PlatformActivityRequestEventType$inboundSchema,
  url: z.string(),
  chainId: z.string(),
  network: PrimaryNetworkType$inboundSchema.optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  includeInternalTxs: z.boolean().optional(),
  includeLogs: z.boolean().optional(),
  metadata: PlatformActivityMetadata$inboundSchema,
});

/** @internal */
export type PlatformActivityRequest$Outbound = {
  eventType: string;
  url: string;
  chainId: string;
  network?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  includeInternalTxs?: boolean | undefined;
  includeLogs?: boolean | undefined;
  metadata: PlatformActivityMetadata$Outbound;
};

/** @internal */
export const PlatformActivityRequest$outboundSchema: z.ZodType<
  PlatformActivityRequest$Outbound,
  z.ZodTypeDef,
  PlatformActivityRequest
> = z.object({
  eventType: PlatformActivityRequestEventType$outboundSchema,
  url: z.string(),
  chainId: z.string(),
  network: PrimaryNetworkType$outboundSchema.optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  includeInternalTxs: z.boolean().optional(),
  includeLogs: z.boolean().optional(),
  metadata: PlatformActivityMetadata$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlatformActivityRequest$ {
  /** @deprecated use `PlatformActivityRequest$inboundSchema` instead. */
  export const inboundSchema = PlatformActivityRequest$inboundSchema;
  /** @deprecated use `PlatformActivityRequest$outboundSchema` instead. */
  export const outboundSchema = PlatformActivityRequest$outboundSchema;
  /** @deprecated use `PlatformActivityRequest$Outbound` instead. */
  export type Outbound = PlatformActivityRequest$Outbound;
}

export function platformActivityRequestToJSON(
  platformActivityRequest: PlatformActivityRequest,
): string {
  return JSON.stringify(
    PlatformActivityRequest$outboundSchema.parse(platformActivityRequest),
  );
}

export function platformActivityRequestFromJSON(
  jsonString: string,
): SafeParseResult<PlatformActivityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlatformActivityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlatformActivityRequest' from JSON`,
  );
}
