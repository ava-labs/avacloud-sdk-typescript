/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CChainSharedAssetBalance,
  CChainSharedAssetBalance$inboundSchema,
  CChainSharedAssetBalance$Outbound,
  CChainSharedAssetBalance$outboundSchema,
} from "./cchainsharedassetbalance.js";

export type CChainAtomicBalances = {
  atomicMemoryUnlocked: Array<CChainSharedAssetBalance>;
  atomicMemoryLocked: Array<CChainSharedAssetBalance>;
};

/** @internal */
export const CChainAtomicBalances$inboundSchema: z.ZodType<
  CChainAtomicBalances,
  z.ZodTypeDef,
  unknown
> = z.object({
  atomicMemoryUnlocked: z.array(CChainSharedAssetBalance$inboundSchema),
  atomicMemoryLocked: z.array(CChainSharedAssetBalance$inboundSchema),
});

/** @internal */
export type CChainAtomicBalances$Outbound = {
  atomicMemoryUnlocked: Array<CChainSharedAssetBalance$Outbound>;
  atomicMemoryLocked: Array<CChainSharedAssetBalance$Outbound>;
};

/** @internal */
export const CChainAtomicBalances$outboundSchema: z.ZodType<
  CChainAtomicBalances$Outbound,
  z.ZodTypeDef,
  CChainAtomicBalances
> = z.object({
  atomicMemoryUnlocked: z.array(CChainSharedAssetBalance$outboundSchema),
  atomicMemoryLocked: z.array(CChainSharedAssetBalance$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CChainAtomicBalances$ {
  /** @deprecated use `CChainAtomicBalances$inboundSchema` instead. */
  export const inboundSchema = CChainAtomicBalances$inboundSchema;
  /** @deprecated use `CChainAtomicBalances$outboundSchema` instead. */
  export const outboundSchema = CChainAtomicBalances$outboundSchema;
  /** @deprecated use `CChainAtomicBalances$Outbound` instead. */
  export type Outbound = CChainAtomicBalances$Outbound;
}

export function cChainAtomicBalancesToJSON(
  cChainAtomicBalances: CChainAtomicBalances,
): string {
  return JSON.stringify(
    CChainAtomicBalances$outboundSchema.parse(cChainAtomicBalances),
  );
}

export function cChainAtomicBalancesFromJSON(
  jsonString: string,
): SafeParseResult<CChainAtomicBalances, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CChainAtomicBalances$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CChainAtomicBalances' from JSON`,
  );
}
