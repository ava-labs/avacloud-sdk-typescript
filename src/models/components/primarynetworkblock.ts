/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ProposerDetails,
  ProposerDetails$inboundSchema,
  ProposerDetails$Outbound,
  ProposerDetails$outboundSchema,
} from "./proposerdetails.js";

export type PrimaryNetworkBlock = {
  blockNumber: string;
  blockHash: string;
  parentHash: string;
  blockTimestamp: number;
  blockType: string;
  txCount: number;
  transactions: Array<string>;
  blockSizeBytes: number;
  l1ValidatorsAccruedFees?: number | undefined;
  activeL1Validators?: number | undefined;
  currentSupply?: string | undefined;
  proposerDetails?: ProposerDetails | undefined;
};

/** @internal */
export const PrimaryNetworkBlock$inboundSchema: z.ZodType<
  PrimaryNetworkBlock,
  z.ZodTypeDef,
  unknown
> = z.object({
  blockNumber: z.string(),
  blockHash: z.string(),
  parentHash: z.string(),
  blockTimestamp: z.number(),
  blockType: z.string(),
  txCount: z.number(),
  transactions: z.array(z.string()),
  blockSizeBytes: z.number(),
  l1ValidatorsAccruedFees: z.number().optional(),
  activeL1Validators: z.number().optional(),
  currentSupply: z.string().optional(),
  proposerDetails: ProposerDetails$inboundSchema.optional(),
});

/** @internal */
export type PrimaryNetworkBlock$Outbound = {
  blockNumber: string;
  blockHash: string;
  parentHash: string;
  blockTimestamp: number;
  blockType: string;
  txCount: number;
  transactions: Array<string>;
  blockSizeBytes: number;
  l1ValidatorsAccruedFees?: number | undefined;
  activeL1Validators?: number | undefined;
  currentSupply?: string | undefined;
  proposerDetails?: ProposerDetails$Outbound | undefined;
};

/** @internal */
export const PrimaryNetworkBlock$outboundSchema: z.ZodType<
  PrimaryNetworkBlock$Outbound,
  z.ZodTypeDef,
  PrimaryNetworkBlock
> = z.object({
  blockNumber: z.string(),
  blockHash: z.string(),
  parentHash: z.string(),
  blockTimestamp: z.number(),
  blockType: z.string(),
  txCount: z.number(),
  transactions: z.array(z.string()),
  blockSizeBytes: z.number(),
  l1ValidatorsAccruedFees: z.number().optional(),
  activeL1Validators: z.number().optional(),
  currentSupply: z.string().optional(),
  proposerDetails: ProposerDetails$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrimaryNetworkBlock$ {
  /** @deprecated use `PrimaryNetworkBlock$inboundSchema` instead. */
  export const inboundSchema = PrimaryNetworkBlock$inboundSchema;
  /** @deprecated use `PrimaryNetworkBlock$outboundSchema` instead. */
  export const outboundSchema = PrimaryNetworkBlock$outboundSchema;
  /** @deprecated use `PrimaryNetworkBlock$Outbound` instead. */
  export type Outbound = PrimaryNetworkBlock$Outbound;
}

export function primaryNetworkBlockToJSON(
  primaryNetworkBlock: PrimaryNetworkBlock,
): string {
  return JSON.stringify(
    PrimaryNetworkBlock$outboundSchema.parse(primaryNetworkBlock),
  );
}

export function primaryNetworkBlockFromJSON(
  jsonString: string,
): SafeParseResult<PrimaryNetworkBlock, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PrimaryNetworkBlock$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PrimaryNetworkBlock' from JSON`,
  );
}
