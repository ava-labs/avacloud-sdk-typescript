/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EventType,
  EventType$inboundSchema,
  EventType$outboundSchema,
} from "./eventtype.js";
import {
  PlatformActivityMetadata,
  PlatformActivityMetadata$inboundSchema,
  PlatformActivityMetadata$Outbound,
  PlatformActivityMetadata$outboundSchema,
} from "./platformactivitymetadata.js";
import {
  WebhookStatusType,
  WebhookStatusType$inboundSchema,
  WebhookStatusType$outboundSchema,
} from "./webhookstatustype.js";

export type PlatformActivityResponseMetadata = PlatformActivityMetadata;

export type PlatformActivityResponse = {
  id: string;
  eventType: EventType;
  url: string;
  chainId: string;
  status: WebhookStatusType;
  createdAt: number;
  name: string;
  description: string;
  metadata: PlatformActivityMetadata;
};

/** @internal */
export const PlatformActivityResponseMetadata$inboundSchema: z.ZodType<
  PlatformActivityResponseMetadata,
  z.ZodTypeDef,
  unknown
> = PlatformActivityMetadata$inboundSchema;

/** @internal */
export type PlatformActivityResponseMetadata$Outbound =
  PlatformActivityMetadata$Outbound;

/** @internal */
export const PlatformActivityResponseMetadata$outboundSchema: z.ZodType<
  PlatformActivityResponseMetadata$Outbound,
  z.ZodTypeDef,
  PlatformActivityResponseMetadata
> = PlatformActivityMetadata$outboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlatformActivityResponseMetadata$ {
  /** @deprecated use `PlatformActivityResponseMetadata$inboundSchema` instead. */
  export const inboundSchema = PlatformActivityResponseMetadata$inboundSchema;
  /** @deprecated use `PlatformActivityResponseMetadata$outboundSchema` instead. */
  export const outboundSchema = PlatformActivityResponseMetadata$outboundSchema;
  /** @deprecated use `PlatformActivityResponseMetadata$Outbound` instead. */
  export type Outbound = PlatformActivityResponseMetadata$Outbound;
}

export function platformActivityResponseMetadataToJSON(
  platformActivityResponseMetadata: PlatformActivityResponseMetadata,
): string {
  return JSON.stringify(
    PlatformActivityResponseMetadata$outboundSchema.parse(
      platformActivityResponseMetadata,
    ),
  );
}

export function platformActivityResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PlatformActivityResponseMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlatformActivityResponseMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlatformActivityResponseMetadata' from JSON`,
  );
}

/** @internal */
export const PlatformActivityResponse$inboundSchema: z.ZodType<
  PlatformActivityResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  eventType: EventType$inboundSchema,
  url: z.string(),
  chainId: z.string(),
  status: WebhookStatusType$inboundSchema,
  createdAt: z.number(),
  name: z.string(),
  description: z.string(),
  metadata: PlatformActivityMetadata$inboundSchema,
});

/** @internal */
export type PlatformActivityResponse$Outbound = {
  id: string;
  eventType: string;
  url: string;
  chainId: string;
  status: string;
  createdAt: number;
  name: string;
  description: string;
  metadata: PlatformActivityMetadata$Outbound;
};

/** @internal */
export const PlatformActivityResponse$outboundSchema: z.ZodType<
  PlatformActivityResponse$Outbound,
  z.ZodTypeDef,
  PlatformActivityResponse
> = z.object({
  id: z.string(),
  eventType: EventType$outboundSchema,
  url: z.string(),
  chainId: z.string(),
  status: WebhookStatusType$outboundSchema,
  createdAt: z.number(),
  name: z.string(),
  description: z.string(),
  metadata: PlatformActivityMetadata$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlatformActivityResponse$ {
  /** @deprecated use `PlatformActivityResponse$inboundSchema` instead. */
  export const inboundSchema = PlatformActivityResponse$inboundSchema;
  /** @deprecated use `PlatformActivityResponse$outboundSchema` instead. */
  export const outboundSchema = PlatformActivityResponse$outboundSchema;
  /** @deprecated use `PlatformActivityResponse$Outbound` instead. */
  export type Outbound = PlatformActivityResponse$Outbound;
}

export function platformActivityResponseToJSON(
  platformActivityResponse: PlatformActivityResponse,
): string {
  return JSON.stringify(
    PlatformActivityResponse$outboundSchema.parse(platformActivityResponse),
  );
}

export function platformActivityResponseFromJSON(
  jsonString: string,
): SafeParseResult<PlatformActivityResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlatformActivityResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlatformActivityResponse' from JSON`,
  );
}
