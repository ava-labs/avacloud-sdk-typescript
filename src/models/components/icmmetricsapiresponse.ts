/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ICMMetricsValue,
  ICMMetricsValue$inboundSchema,
  ICMMetricsValue$Outbound,
  ICMMetricsValue$outboundSchema,
} from "./icmmetricsvalue.js";

export type ICMMetricsApiResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  /**
   * Array of current ICM metrics values.
   */
  results: Array<ICMMetricsValue>;
};

/** @internal */
export const ICMMetricsApiResponse$inboundSchema: z.ZodType<
  ICMMetricsApiResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  results: z.array(ICMMetricsValue$inboundSchema),
});

/** @internal */
export type ICMMetricsApiResponse$Outbound = {
  nextPageToken?: string | undefined;
  results: Array<ICMMetricsValue$Outbound>;
};

/** @internal */
export const ICMMetricsApiResponse$outboundSchema: z.ZodType<
  ICMMetricsApiResponse$Outbound,
  z.ZodTypeDef,
  ICMMetricsApiResponse
> = z.object({
  nextPageToken: z.string().optional(),
  results: z.array(ICMMetricsValue$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ICMMetricsApiResponse$ {
  /** @deprecated use `ICMMetricsApiResponse$inboundSchema` instead. */
  export const inboundSchema = ICMMetricsApiResponse$inboundSchema;
  /** @deprecated use `ICMMetricsApiResponse$outboundSchema` instead. */
  export const outboundSchema = ICMMetricsApiResponse$outboundSchema;
  /** @deprecated use `ICMMetricsApiResponse$Outbound` instead. */
  export type Outbound = ICMMetricsApiResponse$Outbound;
}

export function icmMetricsApiResponseToJSON(
  icmMetricsApiResponse: ICMMetricsApiResponse,
): string {
  return JSON.stringify(
    ICMMetricsApiResponse$outboundSchema.parse(icmMetricsApiResponse),
  );
}

export function icmMetricsApiResponseFromJSON(
  jsonString: string,
): SafeParseResult<ICMMetricsApiResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ICMMetricsApiResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ICMMetricsApiResponse' from JSON`,
  );
}
