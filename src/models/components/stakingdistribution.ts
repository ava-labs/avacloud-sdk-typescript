/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StakingDistribution = {
  /**
   * AvalancheGo version for the validator node.
   */
  version: string;
  /**
   * The total amount staked by validators using this version.
   */
  amountStaked: string;
  /**
   * The number of validators using this version.
   */
  validatorCount: number;
};

/** @internal */
export const StakingDistribution$inboundSchema: z.ZodType<
  StakingDistribution,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
  amountStaked: z.string(),
  validatorCount: z.number(),
});

/** @internal */
export type StakingDistribution$Outbound = {
  version: string;
  amountStaked: string;
  validatorCount: number;
};

/** @internal */
export const StakingDistribution$outboundSchema: z.ZodType<
  StakingDistribution$Outbound,
  z.ZodTypeDef,
  StakingDistribution
> = z.object({
  version: z.string(),
  amountStaked: z.string(),
  validatorCount: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StakingDistribution$ {
  /** @deprecated use `StakingDistribution$inboundSchema` instead. */
  export const inboundSchema = StakingDistribution$inboundSchema;
  /** @deprecated use `StakingDistribution$outboundSchema` instead. */
  export const outboundSchema = StakingDistribution$outboundSchema;
  /** @deprecated use `StakingDistribution$Outbound` instead. */
  export type Outbound = StakingDistribution$Outbound;
}

export function stakingDistributionToJSON(
  stakingDistribution: StakingDistribution,
): string {
  return JSON.stringify(
    StakingDistribution$outboundSchema.parse(stakingDistribution),
  );
}

export function stakingDistributionFromJSON(
  jsonString: string,
): SafeParseResult<StakingDistribution, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StakingDistribution$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StakingDistribution' from JSON`,
  );
}
