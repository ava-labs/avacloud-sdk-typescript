/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ERCToken,
  ERCToken$inboundSchema,
  ERCToken$Outbound,
  ERCToken$outboundSchema,
} from "./erctoken.js";

export type ERCTransfer = {
  /**
   * Transaction hash
   */
  transactionHash: string;
  /**
   * Transfer type
   */
  type: string;
  /**
   * Sender address
   */
  from: string;
  /**
   * Recipient address
   */
  to: string;
  /**
   * Amount transferred
   */
  value: string;
  /**
   * Token Id
   */
  tokenId?: string | undefined;
  /**
   * Block timestamp
   */
  blockTimestamp: number;
  /**
   * Log index
   */
  logIndex: number;
  /**
   * erc20 Token details
   */
  erc20Token?: ERCToken | undefined;
  /**
   * erc721 Token details
   */
  erc721Token?: ERCToken | undefined;
  /**
   * erc1155 Token details
   */
  erc1155Token?: ERCToken | undefined;
};

/** @internal */
export const ERCTransfer$inboundSchema: z.ZodType<
  ERCTransfer,
  z.ZodTypeDef,
  unknown
> = z.object({
  transactionHash: z.string(),
  type: z.string(),
  from: z.string(),
  to: z.string(),
  value: z.string(),
  tokenId: z.string().optional(),
  blockTimestamp: z.number(),
  logIndex: z.number(),
  erc20Token: ERCToken$inboundSchema.optional(),
  erc721Token: ERCToken$inboundSchema.optional(),
  erc1155Token: ERCToken$inboundSchema.optional(),
});

/** @internal */
export type ERCTransfer$Outbound = {
  transactionHash: string;
  type: string;
  from: string;
  to: string;
  value: string;
  tokenId?: string | undefined;
  blockTimestamp: number;
  logIndex: number;
  erc20Token?: ERCToken$Outbound | undefined;
  erc721Token?: ERCToken$Outbound | undefined;
  erc1155Token?: ERCToken$Outbound | undefined;
};

/** @internal */
export const ERCTransfer$outboundSchema: z.ZodType<
  ERCTransfer$Outbound,
  z.ZodTypeDef,
  ERCTransfer
> = z.object({
  transactionHash: z.string(),
  type: z.string(),
  from: z.string(),
  to: z.string(),
  value: z.string(),
  tokenId: z.string().optional(),
  blockTimestamp: z.number(),
  logIndex: z.number(),
  erc20Token: ERCToken$outboundSchema.optional(),
  erc721Token: ERCToken$outboundSchema.optional(),
  erc1155Token: ERCToken$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ERCTransfer$ {
  /** @deprecated use `ERCTransfer$inboundSchema` instead. */
  export const inboundSchema = ERCTransfer$inboundSchema;
  /** @deprecated use `ERCTransfer$outboundSchema` instead. */
  export const outboundSchema = ERCTransfer$outboundSchema;
  /** @deprecated use `ERCTransfer$Outbound` instead. */
  export type Outbound = ERCTransfer$Outbound;
}

export function ercTransferToJSON(ercTransfer: ERCTransfer): string {
  return JSON.stringify(ERCTransfer$outboundSchema.parse(ercTransfer));
}

export function ercTransferFromJSON(
  jsonString: string,
): SafeParseResult<ERCTransfer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ERCTransfer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ERCTransfer' from JSON`,
  );
}
