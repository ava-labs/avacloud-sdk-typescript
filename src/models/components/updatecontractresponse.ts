/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    Erc1155Contract,
    Erc1155Contract$inboundSchema,
    Erc1155Contract$Outbound,
    Erc1155Contract$outboundSchema,
} from "./erc1155contract.js";
import {
    Erc20Contract,
    Erc20Contract$inboundSchema,
    Erc20Contract$Outbound,
    Erc20Contract$outboundSchema,
} from "./erc20contract.js";
import {
    Erc721Contract,
    Erc721Contract$inboundSchema,
    Erc721Contract$Outbound,
    Erc721Contract$outboundSchema,
} from "./erc721contract.js";
import {
    UnknownContract,
    UnknownContract$inboundSchema,
    UnknownContract$Outbound,
    UnknownContract$outboundSchema,
} from "./unknowncontract.js";
import * as z from "zod";

export type UpdateContractResponseContract =
    | (UnknownContract & { ercType: "UNKNOWN" })
    | (Erc721Contract & { ercType: "ERC-721" })
    | (Erc1155Contract & { ercType: "ERC-1155" })
    | (Erc20Contract & { ercType: "ERC-20" });

export type UpdateContractResponse = {
    contract:
        | (UnknownContract & { ercType: "UNKNOWN" })
        | (Erc721Contract & { ercType: "ERC-721" })
        | (Erc1155Contract & { ercType: "ERC-1155" })
        | (Erc20Contract & { ercType: "ERC-20" });
};

/** @internal */
export const UpdateContractResponseContract$inboundSchema: z.ZodType<
    UpdateContractResponseContract,
    z.ZodTypeDef,
    unknown
> = z.union([
    UnknownContract$inboundSchema.and(
        z.object({ ercType: z.literal("UNKNOWN") }).transform((v) => ({ ercType: v.ercType }))
    ),
    Erc721Contract$inboundSchema.and(
        z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({ ercType: v.ercType }))
    ),
    Erc1155Contract$inboundSchema.and(
        z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({ ercType: v.ercType }))
    ),
    Erc20Contract$inboundSchema.and(
        z.object({ ercType: z.literal("ERC-20") }).transform((v) => ({ ercType: v.ercType }))
    ),
]);

/** @internal */
export type UpdateContractResponseContract$Outbound =
    | (UnknownContract$Outbound & { ercType: "UNKNOWN" })
    | (Erc721Contract$Outbound & { ercType: "ERC-721" })
    | (Erc1155Contract$Outbound & { ercType: "ERC-1155" })
    | (Erc20Contract$Outbound & { ercType: "ERC-20" });

/** @internal */
export const UpdateContractResponseContract$outboundSchema: z.ZodType<
    UpdateContractResponseContract$Outbound,
    z.ZodTypeDef,
    UpdateContractResponseContract
> = z.union([
    UnknownContract$outboundSchema.and(
        z.object({ ercType: z.literal("UNKNOWN") }).transform((v) => ({ ercType: v.ercType }))
    ),
    Erc721Contract$outboundSchema.and(
        z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({ ercType: v.ercType }))
    ),
    Erc1155Contract$outboundSchema.and(
        z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({ ercType: v.ercType }))
    ),
    Erc20Contract$outboundSchema.and(
        z.object({ ercType: z.literal("ERC-20") }).transform((v) => ({ ercType: v.ercType }))
    ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContractResponseContract$ {
    /** @deprecated use `UpdateContractResponseContract$inboundSchema` instead. */
    export const inboundSchema = UpdateContractResponseContract$inboundSchema;
    /** @deprecated use `UpdateContractResponseContract$outboundSchema` instead. */
    export const outboundSchema = UpdateContractResponseContract$outboundSchema;
    /** @deprecated use `UpdateContractResponseContract$Outbound` instead. */
    export type Outbound = UpdateContractResponseContract$Outbound;
}

/** @internal */
export const UpdateContractResponse$inboundSchema: z.ZodType<
    UpdateContractResponse,
    z.ZodTypeDef,
    unknown
> = z.object({
    contract: z.union([
        UnknownContract$inboundSchema.and(
            z.object({ ercType: z.literal("UNKNOWN") }).transform((v) => ({ ercType: v.ercType }))
        ),
        Erc721Contract$inboundSchema.and(
            z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({ ercType: v.ercType }))
        ),
        Erc1155Contract$inboundSchema.and(
            z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({ ercType: v.ercType }))
        ),
        Erc20Contract$inboundSchema.and(
            z.object({ ercType: z.literal("ERC-20") }).transform((v) => ({ ercType: v.ercType }))
        ),
    ]),
});

/** @internal */
export type UpdateContractResponse$Outbound = {
    contract:
        | (UnknownContract$Outbound & { ercType: "UNKNOWN" })
        | (Erc721Contract$Outbound & { ercType: "ERC-721" })
        | (Erc1155Contract$Outbound & { ercType: "ERC-1155" })
        | (Erc20Contract$Outbound & { ercType: "ERC-20" });
};

/** @internal */
export const UpdateContractResponse$outboundSchema: z.ZodType<
    UpdateContractResponse$Outbound,
    z.ZodTypeDef,
    UpdateContractResponse
> = z.object({
    contract: z.union([
        UnknownContract$outboundSchema.and(
            z.object({ ercType: z.literal("UNKNOWN") }).transform((v) => ({ ercType: v.ercType }))
        ),
        Erc721Contract$outboundSchema.and(
            z.object({ ercType: z.literal("ERC-721") }).transform((v) => ({ ercType: v.ercType }))
        ),
        Erc1155Contract$outboundSchema.and(
            z.object({ ercType: z.literal("ERC-1155") }).transform((v) => ({ ercType: v.ercType }))
        ),
        Erc20Contract$outboundSchema.and(
            z.object({ ercType: z.literal("ERC-20") }).transform((v) => ({ ercType: v.ercType }))
        ),
    ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateContractResponse$ {
    /** @deprecated use `UpdateContractResponse$inboundSchema` instead. */
    export const inboundSchema = UpdateContractResponse$inboundSchema;
    /** @deprecated use `UpdateContractResponse$outboundSchema` instead. */
    export const outboundSchema = UpdateContractResponse$outboundSchema;
    /** @deprecated use `UpdateContractResponse$Outbound` instead. */
    export type Outbound = UpdateContractResponse$Outbound;
}
