/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AccessListData,
  AccessListData$inboundSchema,
  AccessListData$Outbound,
  AccessListData$outboundSchema,
} from "./accesslistdata.js";
import {
  ERCTransfer,
  ERCTransfer$inboundSchema,
  ERCTransfer$Outbound,
  ERCTransfer$outboundSchema,
} from "./erctransfer.js";
import {
  InternalTransaction,
  InternalTransaction$inboundSchema,
  InternalTransaction$Outbound,
  InternalTransaction$outboundSchema,
} from "./internaltransaction.js";
import {
  NetworkTokenInfo,
  NetworkTokenInfo$inboundSchema,
  NetworkTokenInfo$Outbound,
  NetworkTokenInfo$outboundSchema,
} from "./networktokeninfo.js";

export type Transaction = {
  /**
   * Block hash of the transaction
   */
  blockHash: string;
  /**
   * Block number of the transaction
   */
  blockNumber: string;
  /**
   * Sender address
   */
  from: string;
  /**
   * Gas limit for the transaction
   */
  gas: string;
  /**
   * Gas price used
   */
  gasPrice: string;
  /**
   * Maximum fee per gas
   */
  maxFeePerGas: string;
  /**
   * Maximum priority fee per gas
   */
  maxPriorityFeePerGas: string;
  /**
   * Transaction hash
   */
  txHash: string;
  /**
   * Transaction status
   */
  txStatus: string;
  /**
   * Input data
   */
  input: string;
  /**
   * Nonce value
   */
  nonce: string;
  /**
   * Recipient address
   */
  to: string;
  /**
   * Transaction index
   */
  transactionIndex: number;
  /**
   * Value transferred in the transaction
   */
  value: string;
  /**
   * Transaction type
   */
  type: number;
  /**
   * Chain ID of the network
   */
  chainId: string;
  /**
   * Cumulative gas used
   */
  receiptCumulativeGasUsed: string;
  /**
   * Gas used
   */
  receiptGasUsed: string;
  /**
   * Effective gas price
   */
  receiptEffectiveGasPrice: string;
  /**
   * Receipt root
   */
  receiptRoot: string;
  /**
   * Block timestamp
   */
  blockTimestamp: number;
  /**
   * Contract address (optional)
   */
  contractAddress?: string | undefined;
  /**
   * ERC20 transfers
   */
  erc20Transfers: Array<ERCTransfer>;
  /**
   * ERC721 transfers
   */
  erc721Transfers: Array<ERCTransfer>;
  /**
   * ERC1155 transfers
   */
  erc1155Transfers: Array<ERCTransfer>;
  /**
   * Internal transactions (optional)
   */
  internalTransactions?: Array<InternalTransaction> | undefined;
  /**
   * Access list (optional)
   */
  accessList?: Array<AccessListData> | undefined;
  /**
   * Network token info (optional)
   */
  networkToken?: NetworkTokenInfo | undefined;
};

/** @internal */
export const Transaction$inboundSchema: z.ZodType<
  Transaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  blockHash: z.string(),
  blockNumber: z.string(),
  from: z.string(),
  gas: z.string(),
  gasPrice: z.string(),
  maxFeePerGas: z.string(),
  maxPriorityFeePerGas: z.string(),
  txHash: z.string(),
  txStatus: z.string(),
  input: z.string(),
  nonce: z.string(),
  to: z.string(),
  transactionIndex: z.number(),
  value: z.string(),
  type: z.number(),
  chainId: z.string(),
  receiptCumulativeGasUsed: z.string(),
  receiptGasUsed: z.string(),
  receiptEffectiveGasPrice: z.string(),
  receiptRoot: z.string(),
  blockTimestamp: z.number(),
  contractAddress: z.string().optional(),
  erc20Transfers: z.array(ERCTransfer$inboundSchema),
  erc721Transfers: z.array(ERCTransfer$inboundSchema),
  erc1155Transfers: z.array(ERCTransfer$inboundSchema),
  internalTransactions: z.array(InternalTransaction$inboundSchema).optional(),
  accessList: z.array(AccessListData$inboundSchema).optional(),
  networkToken: NetworkTokenInfo$inboundSchema.optional(),
});

/** @internal */
export type Transaction$Outbound = {
  blockHash: string;
  blockNumber: string;
  from: string;
  gas: string;
  gasPrice: string;
  maxFeePerGas: string;
  maxPriorityFeePerGas: string;
  txHash: string;
  txStatus: string;
  input: string;
  nonce: string;
  to: string;
  transactionIndex: number;
  value: string;
  type: number;
  chainId: string;
  receiptCumulativeGasUsed: string;
  receiptGasUsed: string;
  receiptEffectiveGasPrice: string;
  receiptRoot: string;
  blockTimestamp: number;
  contractAddress?: string | undefined;
  erc20Transfers: Array<ERCTransfer$Outbound>;
  erc721Transfers: Array<ERCTransfer$Outbound>;
  erc1155Transfers: Array<ERCTransfer$Outbound>;
  internalTransactions?: Array<InternalTransaction$Outbound> | undefined;
  accessList?: Array<AccessListData$Outbound> | undefined;
  networkToken?: NetworkTokenInfo$Outbound | undefined;
};

/** @internal */
export const Transaction$outboundSchema: z.ZodType<
  Transaction$Outbound,
  z.ZodTypeDef,
  Transaction
> = z.object({
  blockHash: z.string(),
  blockNumber: z.string(),
  from: z.string(),
  gas: z.string(),
  gasPrice: z.string(),
  maxFeePerGas: z.string(),
  maxPriorityFeePerGas: z.string(),
  txHash: z.string(),
  txStatus: z.string(),
  input: z.string(),
  nonce: z.string(),
  to: z.string(),
  transactionIndex: z.number(),
  value: z.string(),
  type: z.number(),
  chainId: z.string(),
  receiptCumulativeGasUsed: z.string(),
  receiptGasUsed: z.string(),
  receiptEffectiveGasPrice: z.string(),
  receiptRoot: z.string(),
  blockTimestamp: z.number(),
  contractAddress: z.string().optional(),
  erc20Transfers: z.array(ERCTransfer$outboundSchema),
  erc721Transfers: z.array(ERCTransfer$outboundSchema),
  erc1155Transfers: z.array(ERCTransfer$outboundSchema),
  internalTransactions: z.array(InternalTransaction$outboundSchema).optional(),
  accessList: z.array(AccessListData$outboundSchema).optional(),
  networkToken: NetworkTokenInfo$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transaction$ {
  /** @deprecated use `Transaction$inboundSchema` instead. */
  export const inboundSchema = Transaction$inboundSchema;
  /** @deprecated use `Transaction$outboundSchema` instead. */
  export const outboundSchema = Transaction$outboundSchema;
  /** @deprecated use `Transaction$Outbound` instead. */
  export type Outbound = Transaction$Outbound;
}

export function transactionToJSON(transaction: Transaction): string {
  return JSON.stringify(Transaction$outboundSchema.parse(transaction));
}

export function transactionFromJSON(
  jsonString: string,
): SafeParseResult<Transaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transaction' from JSON`,
  );
}
