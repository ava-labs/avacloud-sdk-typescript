/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type RpcSuccessResponseDtoId = string | number;

export type Result = {};

export type RpcSuccessResponseDto = {
    jsonrpc: string;
    id?: string | number | undefined;
    result: Result;
};

/** @internal */
export const RpcSuccessResponseDtoId$inboundSchema: z.ZodType<
    RpcSuccessResponseDtoId,
    z.ZodTypeDef,
    unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type RpcSuccessResponseDtoId$Outbound = string | number;

/** @internal */
export const RpcSuccessResponseDtoId$outboundSchema: z.ZodType<
    RpcSuccessResponseDtoId$Outbound,
    z.ZodTypeDef,
    RpcSuccessResponseDtoId
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcSuccessResponseDtoId$ {
    /** @deprecated use `RpcSuccessResponseDtoId$inboundSchema` instead. */
    export const inboundSchema = RpcSuccessResponseDtoId$inboundSchema;
    /** @deprecated use `RpcSuccessResponseDtoId$outboundSchema` instead. */
    export const outboundSchema = RpcSuccessResponseDtoId$outboundSchema;
    /** @deprecated use `RpcSuccessResponseDtoId$Outbound` instead. */
    export type Outbound = RpcSuccessResponseDtoId$Outbound;
}

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Result$Outbound = {};

/** @internal */
export const Result$outboundSchema: z.ZodType<Result$Outbound, z.ZodTypeDef, Result> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
    /** @deprecated use `Result$inboundSchema` instead. */
    export const inboundSchema = Result$inboundSchema;
    /** @deprecated use `Result$outboundSchema` instead. */
    export const outboundSchema = Result$outboundSchema;
    /** @deprecated use `Result$Outbound` instead. */
    export type Outbound = Result$Outbound;
}

/** @internal */
export const RpcSuccessResponseDto$inboundSchema: z.ZodType<
    RpcSuccessResponseDto,
    z.ZodTypeDef,
    unknown
> = z.object({
    jsonrpc: z.string(),
    id: z.union([z.string(), z.number()]).optional(),
    result: z.lazy(() => Result$inboundSchema),
});

/** @internal */
export type RpcSuccessResponseDto$Outbound = {
    jsonrpc: string;
    id?: string | number | undefined;
    result: Result$Outbound;
};

/** @internal */
export const RpcSuccessResponseDto$outboundSchema: z.ZodType<
    RpcSuccessResponseDto$Outbound,
    z.ZodTypeDef,
    RpcSuccessResponseDto
> = z.object({
    jsonrpc: z.string(),
    id: z.union([z.string(), z.number()]).optional(),
    result: z.lazy(() => Result$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcSuccessResponseDto$ {
    /** @deprecated use `RpcSuccessResponseDto$inboundSchema` instead. */
    export const inboundSchema = RpcSuccessResponseDto$inboundSchema;
    /** @deprecated use `RpcSuccessResponseDto$outboundSchema` instead. */
    export const outboundSchema = RpcSuccessResponseDto$outboundSchema;
    /** @deprecated use `RpcSuccessResponseDto$Outbound` instead. */
    export type Outbound = RpcSuccessResponseDto$Outbound;
}
