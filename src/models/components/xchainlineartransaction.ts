/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    AssetAmount,
    AssetAmount$inboundSchema,
    AssetAmount$Outbound,
    AssetAmount$outboundSchema,
} from "./assetamount.js";
import { Utxo, Utxo$inboundSchema, Utxo$Outbound, Utxo$outboundSchema } from "./utxo.js";
import {
    XChainAssetDetails,
    XChainAssetDetails$inboundSchema,
    XChainAssetDetails$Outbound,
    XChainAssetDetails$outboundSchema,
} from "./xchainassetdetails.js";
import {
    XChainTransactionType,
    XChainTransactionType$inboundSchema,
    XChainTransactionType$outboundSchema,
} from "./xchaintransactiontype.js";
import * as z from "zod";

/**
 * Represents chain format this transaction is included in.
 */
export const XChainLinearTransactionChainFormat = {
    NonLinear: "non-linear",
    Linear: "linear",
} as const;
/**
 * Represents chain format this transaction is included in.
 */
export type XChainLinearTransactionChainFormat = ClosedEnum<
    typeof XChainLinearTransactionChainFormat
>;

export type XChainLinearTransaction = {
    /**
     * Unique ID for this transaction.
     */
    txHash: string;
    /**
     * Represents chain format this transaction is included in.
     */
    chainFormat: XChainLinearTransactionChainFormat;
    /**
     * Latest timestamp in seconds this transaction was accepted out of the same transaction accepted in other vertices.
     */
    timestamp: number;
    /**
     * Type of transaction.
     */
    txType: XChainTransactionType;
    /**
     * Hex encoded memo bytes for this transaction.
     */
    memo: string;
    consumedUtxos: Array<Utxo>;
    emittedUtxos: Array<Utxo>;
    /**
     * Assets unlocked by inputs of this transaction.
     */
    amountUnlocked: Array<AssetAmount>;
    /**
     * Assets created by outputs of this transaction.
     */
    amountCreated: Array<AssetAmount>;
    /**
     * Source chain for an atomic transaction.
     */
    sourceChain?: string | undefined;
    /**
     * Destination chain for an atomic transaction.
     */
    destinationChain?: string | undefined;
    /**
     * AssetAmount details of the asset created in CreateAssetTx
     */
    assetCreated?: XChainAssetDetails | undefined;
    /**
     * Height of the block this transaction belongs to.
     */
    blockHeight: number;
    /**
     * Hash of the block this transaction belongs to.
     */
    blockHash: string;
};

/** @internal */
export const XChainLinearTransactionChainFormat$inboundSchema: z.ZodNativeEnum<
    typeof XChainLinearTransactionChainFormat
> = z.nativeEnum(XChainLinearTransactionChainFormat);

/** @internal */
export const XChainLinearTransactionChainFormat$outboundSchema: z.ZodNativeEnum<
    typeof XChainLinearTransactionChainFormat
> = XChainLinearTransactionChainFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace XChainLinearTransactionChainFormat$ {
    /** @deprecated use `XChainLinearTransactionChainFormat$inboundSchema` instead. */
    export const inboundSchema = XChainLinearTransactionChainFormat$inboundSchema;
    /** @deprecated use `XChainLinearTransactionChainFormat$outboundSchema` instead. */
    export const outboundSchema = XChainLinearTransactionChainFormat$outboundSchema;
}

/** @internal */
export const XChainLinearTransaction$inboundSchema: z.ZodType<
    XChainLinearTransaction,
    z.ZodTypeDef,
    unknown
> = z.object({
    txHash: z.string(),
    chainFormat: XChainLinearTransactionChainFormat$inboundSchema,
    timestamp: z.number(),
    txType: XChainTransactionType$inboundSchema,
    memo: z.string(),
    consumedUtxos: z.array(Utxo$inboundSchema),
    emittedUtxos: z.array(Utxo$inboundSchema),
    amountUnlocked: z.array(AssetAmount$inboundSchema),
    amountCreated: z.array(AssetAmount$inboundSchema),
    sourceChain: z.string().optional(),
    destinationChain: z.string().optional(),
    assetCreated: XChainAssetDetails$inboundSchema.optional(),
    blockHeight: z.number(),
    blockHash: z.string(),
});

/** @internal */
export type XChainLinearTransaction$Outbound = {
    txHash: string;
    chainFormat: string;
    timestamp: number;
    txType: string;
    memo: string;
    consumedUtxos: Array<Utxo$Outbound>;
    emittedUtxos: Array<Utxo$Outbound>;
    amountUnlocked: Array<AssetAmount$Outbound>;
    amountCreated: Array<AssetAmount$Outbound>;
    sourceChain?: string | undefined;
    destinationChain?: string | undefined;
    assetCreated?: XChainAssetDetails$Outbound | undefined;
    blockHeight: number;
    blockHash: string;
};

/** @internal */
export const XChainLinearTransaction$outboundSchema: z.ZodType<
    XChainLinearTransaction$Outbound,
    z.ZodTypeDef,
    XChainLinearTransaction
> = z.object({
    txHash: z.string(),
    chainFormat: XChainLinearTransactionChainFormat$outboundSchema,
    timestamp: z.number(),
    txType: XChainTransactionType$outboundSchema,
    memo: z.string(),
    consumedUtxos: z.array(Utxo$outboundSchema),
    emittedUtxos: z.array(Utxo$outboundSchema),
    amountUnlocked: z.array(AssetAmount$outboundSchema),
    amountCreated: z.array(AssetAmount$outboundSchema),
    sourceChain: z.string().optional(),
    destinationChain: z.string().optional(),
    assetCreated: XChainAssetDetails$outboundSchema.optional(),
    blockHeight: z.number(),
    blockHash: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace XChainLinearTransaction$ {
    /** @deprecated use `XChainLinearTransaction$inboundSchema` instead. */
    export const inboundSchema = XChainLinearTransaction$inboundSchema;
    /** @deprecated use `XChainLinearTransaction$outboundSchema` instead. */
    export const outboundSchema = XChainLinearTransaction$outboundSchema;
    /** @deprecated use `XChainLinearTransaction$Outbound` instead. */
    export type Outbound = XChainLinearTransaction$Outbound;
}
