/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type One = string | number | { [k: string]: any };

export type Params = Array<string | number | { [k: string]: any }> | { [k: string]: any };

export type Id = string | number;

export type RpcRequestBodyDto = {
    method: string;
    params?: Array<string | number | { [k: string]: any }> | { [k: string]: any } | undefined;
    id?: string | number | undefined;
    jsonrpc?: string | undefined;
};

/** @internal */
export const One$inboundSchema: z.ZodType<One, z.ZodTypeDef, unknown> = z.union([
    z.string(),
    z.number(),
    z.record(z.any()),
]);

/** @internal */
export type One$Outbound = string | number | { [k: string]: any };

/** @internal */
export const One$outboundSchema: z.ZodType<One$Outbound, z.ZodTypeDef, One> = z.union([
    z.string(),
    z.number(),
    z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One$ {
    /** @deprecated use `One$inboundSchema` instead. */
    export const inboundSchema = One$inboundSchema;
    /** @deprecated use `One$outboundSchema` instead. */
    export const outboundSchema = One$outboundSchema;
    /** @deprecated use `One$Outbound` instead. */
    export type Outbound = One$Outbound;
}

/** @internal */
export const Params$inboundSchema: z.ZodType<Params, z.ZodTypeDef, unknown> = z.union([
    z.array(z.union([z.string(), z.number(), z.record(z.any())])),
    z.record(z.any()),
]);

/** @internal */
export type Params$Outbound = Array<string | number | { [k: string]: any }> | { [k: string]: any };

/** @internal */
export const Params$outboundSchema: z.ZodType<Params$Outbound, z.ZodTypeDef, Params> = z.union([
    z.array(z.union([z.string(), z.number(), z.record(z.any())])),
    z.record(z.any()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Params$ {
    /** @deprecated use `Params$inboundSchema` instead. */
    export const inboundSchema = Params$inboundSchema;
    /** @deprecated use `Params$outboundSchema` instead. */
    export const outboundSchema = Params$outboundSchema;
    /** @deprecated use `Params$Outbound` instead. */
    export type Outbound = Params$Outbound;
}

/** @internal */
export const Id$inboundSchema: z.ZodType<Id, z.ZodTypeDef, unknown> = z.union([
    z.string(),
    z.number(),
]);

/** @internal */
export type Id$Outbound = string | number;

/** @internal */
export const Id$outboundSchema: z.ZodType<Id$Outbound, z.ZodTypeDef, Id> = z.union([
    z.string(),
    z.number(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Id$ {
    /** @deprecated use `Id$inboundSchema` instead. */
    export const inboundSchema = Id$inboundSchema;
    /** @deprecated use `Id$outboundSchema` instead. */
    export const outboundSchema = Id$outboundSchema;
    /** @deprecated use `Id$Outbound` instead. */
    export type Outbound = Id$Outbound;
}

/** @internal */
export const RpcRequestBodyDto$inboundSchema: z.ZodType<RpcRequestBodyDto, z.ZodTypeDef, unknown> =
    z.object({
        method: z.string(),
        params: z
            .union([
                z.array(z.union([z.string(), z.number(), z.record(z.any())])),
                z.record(z.any()),
            ])
            .optional(),
        id: z.union([z.string(), z.number()]).optional(),
        jsonrpc: z.string().optional(),
    });

/** @internal */
export type RpcRequestBodyDto$Outbound = {
    method: string;
    params?: Array<string | number | { [k: string]: any }> | { [k: string]: any } | undefined;
    id?: string | number | undefined;
    jsonrpc?: string | undefined;
};

/** @internal */
export const RpcRequestBodyDto$outboundSchema: z.ZodType<
    RpcRequestBodyDto$Outbound,
    z.ZodTypeDef,
    RpcRequestBodyDto
> = z.object({
    method: z.string(),
    params: z
        .union([z.array(z.union([z.string(), z.number(), z.record(z.any())])), z.record(z.any())])
        .optional(),
    id: z.union([z.string(), z.number()]).optional(),
    jsonrpc: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RpcRequestBodyDto$ {
    /** @deprecated use `RpcRequestBodyDto$inboundSchema` instead. */
    export const inboundSchema = RpcRequestBodyDto$inboundSchema;
    /** @deprecated use `RpcRequestBodyDto$outboundSchema` instead. */
    export const outboundSchema = RpcRequestBodyDto$outboundSchema;
    /** @deprecated use `RpcRequestBodyDto$Outbound` instead. */
    export type Outbound = RpcRequestBodyDto$Outbound;
}
