/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  HistoricalReward,
  HistoricalReward$inboundSchema,
  HistoricalReward$Outbound,
  HistoricalReward$outboundSchema,
} from "./historicalreward.js";

export type ListHistoricalRewardsResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  historicalRewards: Array<HistoricalReward>;
};

/** @internal */
export const ListHistoricalRewardsResponse$inboundSchema: z.ZodType<
  ListHistoricalRewardsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  historicalRewards: z.array(HistoricalReward$inboundSchema),
});

/** @internal */
export type ListHistoricalRewardsResponse$Outbound = {
  nextPageToken?: string | undefined;
  historicalRewards: Array<HistoricalReward$Outbound>;
};

/** @internal */
export const ListHistoricalRewardsResponse$outboundSchema: z.ZodType<
  ListHistoricalRewardsResponse$Outbound,
  z.ZodTypeDef,
  ListHistoricalRewardsResponse
> = z.object({
  nextPageToken: z.string().optional(),
  historicalRewards: z.array(HistoricalReward$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListHistoricalRewardsResponse$ {
  /** @deprecated use `ListHistoricalRewardsResponse$inboundSchema` instead. */
  export const inboundSchema = ListHistoricalRewardsResponse$inboundSchema;
  /** @deprecated use `ListHistoricalRewardsResponse$outboundSchema` instead. */
  export const outboundSchema = ListHistoricalRewardsResponse$outboundSchema;
  /** @deprecated use `ListHistoricalRewardsResponse$Outbound` instead. */
  export type Outbound = ListHistoricalRewardsResponse$Outbound;
}

export function listHistoricalRewardsResponseToJSON(
  listHistoricalRewardsResponse: ListHistoricalRewardsResponse,
): string {
  return JSON.stringify(
    ListHistoricalRewardsResponse$outboundSchema.parse(
      listHistoricalRewardsResponse,
    ),
  );
}

export function listHistoricalRewardsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListHistoricalRewardsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListHistoricalRewardsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListHistoricalRewardsResponse' from JSON`,
  );
}
