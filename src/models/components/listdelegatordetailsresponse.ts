/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ActiveDelegatorDetails,
  ActiveDelegatorDetails$inboundSchema,
  ActiveDelegatorDetails$Outbound,
  ActiveDelegatorDetails$outboundSchema,
} from "./activedelegatordetails.js";
import {
  CompletedDelegatorDetails,
  CompletedDelegatorDetails$inboundSchema,
  CompletedDelegatorDetails$Outbound,
  CompletedDelegatorDetails$outboundSchema,
} from "./completeddelegatordetails.js";
import {
  PendingDelegatorDetails,
  PendingDelegatorDetails$inboundSchema,
  PendingDelegatorDetails$Outbound,
  PendingDelegatorDetails$outboundSchema,
} from "./pendingdelegatordetails.js";

export type Delegators =
  | (ActiveDelegatorDetails & { delegationStatus: "active" })
  | (PendingDelegatorDetails & { delegationStatus: "pending" })
  | (CompletedDelegatorDetails & { delegationStatus: "completed" });

export type ListDelegatorDetailsResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  /**
   * The list of Delegator Details.
   */
  delegators: Array<
    | (ActiveDelegatorDetails & { delegationStatus: "active" })
    | (PendingDelegatorDetails & { delegationStatus: "pending" })
    | (CompletedDelegatorDetails & { delegationStatus: "completed" })
  >;
};

/** @internal */
export const Delegators$inboundSchema: z.ZodType<
  Delegators,
  z.ZodTypeDef,
  unknown
> = z.union([
  ActiveDelegatorDetails$inboundSchema.and(
    z.object({ delegationStatus: z.literal("active") }).transform((v) => ({
      delegationStatus: v.delegationStatus,
    })),
  ),
  PendingDelegatorDetails$inboundSchema.and(
    z.object({ delegationStatus: z.literal("pending") }).transform((v) => ({
      delegationStatus: v.delegationStatus,
    })),
  ),
  CompletedDelegatorDetails$inboundSchema.and(
    z.object({ delegationStatus: z.literal("completed") }).transform((v) => ({
      delegationStatus: v.delegationStatus,
    })),
  ),
]);

/** @internal */
export type Delegators$Outbound =
  | (ActiveDelegatorDetails$Outbound & { delegationStatus: "active" })
  | (PendingDelegatorDetails$Outbound & { delegationStatus: "pending" })
  | (CompletedDelegatorDetails$Outbound & { delegationStatus: "completed" });

/** @internal */
export const Delegators$outboundSchema: z.ZodType<
  Delegators$Outbound,
  z.ZodTypeDef,
  Delegators
> = z.union([
  ActiveDelegatorDetails$outboundSchema.and(
    z.object({ delegationStatus: z.literal("active") }).transform((v) => ({
      delegationStatus: v.delegationStatus,
    })),
  ),
  PendingDelegatorDetails$outboundSchema.and(
    z.object({ delegationStatus: z.literal("pending") }).transform((v) => ({
      delegationStatus: v.delegationStatus,
    })),
  ),
  CompletedDelegatorDetails$outboundSchema.and(
    z.object({ delegationStatus: z.literal("completed") }).transform((v) => ({
      delegationStatus: v.delegationStatus,
    })),
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Delegators$ {
  /** @deprecated use `Delegators$inboundSchema` instead. */
  export const inboundSchema = Delegators$inboundSchema;
  /** @deprecated use `Delegators$outboundSchema` instead. */
  export const outboundSchema = Delegators$outboundSchema;
  /** @deprecated use `Delegators$Outbound` instead. */
  export type Outbound = Delegators$Outbound;
}

export function delegatorsToJSON(delegators: Delegators): string {
  return JSON.stringify(Delegators$outboundSchema.parse(delegators));
}

export function delegatorsFromJSON(
  jsonString: string,
): SafeParseResult<Delegators, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Delegators$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Delegators' from JSON`,
  );
}

/** @internal */
export const ListDelegatorDetailsResponse$inboundSchema: z.ZodType<
  ListDelegatorDetailsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  delegators: z.array(
    z.union([
      ActiveDelegatorDetails$inboundSchema.and(
        z.object({ delegationStatus: z.literal("active") }).transform((v) => ({
          delegationStatus: v.delegationStatus,
        })),
      ),
      PendingDelegatorDetails$inboundSchema.and(
        z.object({ delegationStatus: z.literal("pending") }).transform((v) => ({
          delegationStatus: v.delegationStatus,
        })),
      ),
      CompletedDelegatorDetails$inboundSchema.and(
        z.object({ delegationStatus: z.literal("completed") }).transform((
          v,
        ) => ({ delegationStatus: v.delegationStatus })),
      ),
    ]),
  ),
});

/** @internal */
export type ListDelegatorDetailsResponse$Outbound = {
  nextPageToken?: string | undefined;
  delegators: Array<
    | (ActiveDelegatorDetails$Outbound & { delegationStatus: "active" })
    | (PendingDelegatorDetails$Outbound & { delegationStatus: "pending" })
    | (CompletedDelegatorDetails$Outbound & { delegationStatus: "completed" })
  >;
};

/** @internal */
export const ListDelegatorDetailsResponse$outboundSchema: z.ZodType<
  ListDelegatorDetailsResponse$Outbound,
  z.ZodTypeDef,
  ListDelegatorDetailsResponse
> = z.object({
  nextPageToken: z.string().optional(),
  delegators: z.array(
    z.union([
      ActiveDelegatorDetails$outboundSchema.and(
        z.object({ delegationStatus: z.literal("active") }).transform((v) => ({
          delegationStatus: v.delegationStatus,
        })),
      ),
      PendingDelegatorDetails$outboundSchema.and(
        z.object({ delegationStatus: z.literal("pending") }).transform((v) => ({
          delegationStatus: v.delegationStatus,
        })),
      ),
      CompletedDelegatorDetails$outboundSchema.and(
        z.object({ delegationStatus: z.literal("completed") }).transform((
          v,
        ) => ({ delegationStatus: v.delegationStatus })),
      ),
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListDelegatorDetailsResponse$ {
  /** @deprecated use `ListDelegatorDetailsResponse$inboundSchema` instead. */
  export const inboundSchema = ListDelegatorDetailsResponse$inboundSchema;
  /** @deprecated use `ListDelegatorDetailsResponse$outboundSchema` instead. */
  export const outboundSchema = ListDelegatorDetailsResponse$outboundSchema;
  /** @deprecated use `ListDelegatorDetailsResponse$Outbound` instead. */
  export type Outbound = ListDelegatorDetailsResponse$Outbound;
}

export function listDelegatorDetailsResponseToJSON(
  listDelegatorDetailsResponse: ListDelegatorDetailsResponse,
): string {
  return JSON.stringify(
    ListDelegatorDetailsResponse$outboundSchema.parse(
      listDelegatorDetailsResponse,
    ),
  );
}

export function listDelegatorDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListDelegatorDetailsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListDelegatorDetailsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListDelegatorDetailsResponse' from JSON`,
  );
}
