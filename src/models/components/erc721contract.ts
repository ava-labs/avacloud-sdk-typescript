/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContractDeploymentDetails,
  ContractDeploymentDetails$inboundSchema,
  ContractDeploymentDetails$Outbound,
  ContractDeploymentDetails$outboundSchema,
} from "./contractdeploymentdetails.js";
import {
  ImageAsset,
  ImageAsset$inboundSchema,
  ImageAsset$Outbound,
  ImageAsset$outboundSchema,
} from "./imageasset.js";
import {
  ResourceLink,
  ResourceLink$inboundSchema,
  ResourceLink$Outbound,
  ResourceLink$outboundSchema,
} from "./resourcelink.js";

export const Erc721ContractErcType = {
  Erc721: "ERC-721",
} as const;
export type Erc721ContractErcType = ClosedEnum<typeof Erc721ContractErcType>;

export type Erc721Contract = {
  /**
   * The contract name.
   */
  name?: string | undefined;
  description?: string | undefined;
  officialSite?: string | undefined;
  email?: string | undefined;
  logoAsset?: ImageAsset | undefined;
  bannerAsset?: ImageAsset | undefined;
  color?: string | undefined;
  resourceLinks?: Array<ResourceLink> | undefined;
  tags?: Array<string> | undefined;
  /**
   * A wallet or contract address in mixed-case checksum encoding.
   */
  address: string;
  deploymentDetails?: ContractDeploymentDetails | undefined;
  ercType: Erc721ContractErcType;
  /**
   * The contract symbol.
   */
  symbol?: string | undefined;
};

/** @internal */
export const Erc721ContractErcType$inboundSchema: z.ZodNativeEnum<
  typeof Erc721ContractErcType
> = z.nativeEnum(Erc721ContractErcType);

/** @internal */
export const Erc721ContractErcType$outboundSchema: z.ZodNativeEnum<
  typeof Erc721ContractErcType
> = Erc721ContractErcType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Erc721ContractErcType$ {
  /** @deprecated use `Erc721ContractErcType$inboundSchema` instead. */
  export const inboundSchema = Erc721ContractErcType$inboundSchema;
  /** @deprecated use `Erc721ContractErcType$outboundSchema` instead. */
  export const outboundSchema = Erc721ContractErcType$outboundSchema;
}

/** @internal */
export const Erc721Contract$inboundSchema: z.ZodType<
  Erc721Contract,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  officialSite: z.string().optional(),
  email: z.string().optional(),
  logoAsset: ImageAsset$inboundSchema.optional(),
  bannerAsset: ImageAsset$inboundSchema.optional(),
  color: z.string().optional(),
  resourceLinks: z.array(ResourceLink$inboundSchema).optional(),
  tags: z.array(z.string()).optional(),
  address: z.string(),
  deploymentDetails: ContractDeploymentDetails$inboundSchema.optional(),
  ercType: Erc721ContractErcType$inboundSchema,
  symbol: z.string().optional(),
});

/** @internal */
export type Erc721Contract$Outbound = {
  name?: string | undefined;
  description?: string | undefined;
  officialSite?: string | undefined;
  email?: string | undefined;
  logoAsset?: ImageAsset$Outbound | undefined;
  bannerAsset?: ImageAsset$Outbound | undefined;
  color?: string | undefined;
  resourceLinks?: Array<ResourceLink$Outbound> | undefined;
  tags?: Array<string> | undefined;
  address: string;
  deploymentDetails?: ContractDeploymentDetails$Outbound | undefined;
  ercType: string;
  symbol?: string | undefined;
};

/** @internal */
export const Erc721Contract$outboundSchema: z.ZodType<
  Erc721Contract$Outbound,
  z.ZodTypeDef,
  Erc721Contract
> = z.object({
  name: z.string().optional(),
  description: z.string().optional(),
  officialSite: z.string().optional(),
  email: z.string().optional(),
  logoAsset: ImageAsset$outboundSchema.optional(),
  bannerAsset: ImageAsset$outboundSchema.optional(),
  color: z.string().optional(),
  resourceLinks: z.array(ResourceLink$outboundSchema).optional(),
  tags: z.array(z.string()).optional(),
  address: z.string(),
  deploymentDetails: ContractDeploymentDetails$outboundSchema.optional(),
  ercType: Erc721ContractErcType$outboundSchema,
  symbol: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Erc721Contract$ {
  /** @deprecated use `Erc721Contract$inboundSchema` instead. */
  export const inboundSchema = Erc721Contract$inboundSchema;
  /** @deprecated use `Erc721Contract$outboundSchema` instead. */
  export const outboundSchema = Erc721Contract$outboundSchema;
  /** @deprecated use `Erc721Contract$Outbound` instead. */
  export type Outbound = Erc721Contract$Outbound;
}

export function erc721ContractToJSON(erc721Contract: Erc721Contract): string {
  return JSON.stringify(Erc721Contract$outboundSchema.parse(erc721Contract));
}

export function erc721ContractFromJSON(
  jsonString: string,
): SafeParseResult<Erc721Contract, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Erc721Contract$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Erc721Contract' from JSON`,
  );
}
