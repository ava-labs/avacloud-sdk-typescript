/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Log,
  Log$inboundSchema,
  Log$Outbound,
  Log$outboundSchema,
} from "./log.js";
import {
  Transaction,
  Transaction$inboundSchema,
  Transaction$Outbound,
  Transaction$outboundSchema,
} from "./transaction.js";

export type TransactionEvent = {
  /**
   * Transaction details
   */
  transaction: Transaction;
  /**
   * Array of log events
   */
  logs?: Array<Log> | undefined;
};

/** @internal */
export const TransactionEvent$inboundSchema: z.ZodType<
  TransactionEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction: Transaction$inboundSchema,
  logs: z.array(Log$inboundSchema).optional(),
});

/** @internal */
export type TransactionEvent$Outbound = {
  transaction: Transaction$Outbound;
  logs?: Array<Log$Outbound> | undefined;
};

/** @internal */
export const TransactionEvent$outboundSchema: z.ZodType<
  TransactionEvent$Outbound,
  z.ZodTypeDef,
  TransactionEvent
> = z.object({
  transaction: Transaction$outboundSchema,
  logs: z.array(Log$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionEvent$ {
  /** @deprecated use `TransactionEvent$inboundSchema` instead. */
  export const inboundSchema = TransactionEvent$inboundSchema;
  /** @deprecated use `TransactionEvent$outboundSchema` instead. */
  export const outboundSchema = TransactionEvent$outboundSchema;
  /** @deprecated use `TransactionEvent$Outbound` instead. */
  export type Outbound = TransactionEvent$Outbound;
}

export function transactionEventToJSON(
  transactionEvent: TransactionEvent,
): string {
  return JSON.stringify(
    TransactionEvent$outboundSchema.parse(transactionEvent),
  );
}

export function transactionEventFromJSON(
  jsonString: string,
): SafeParseResult<TransactionEvent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionEvent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionEvent' from JSON`,
  );
}
