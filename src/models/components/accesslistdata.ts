/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AccessListData = {
  /**
   * Access Address
   */
  accessAddresses: string;
  /**
   * Storage keys
   */
  storageKeys: Array<string>;
};

/** @internal */
export const AccessListData$inboundSchema: z.ZodType<
  AccessListData,
  z.ZodTypeDef,
  unknown
> = z.object({
  accessAddresses: z.string(),
  storageKeys: z.array(z.string()),
});

/** @internal */
export type AccessListData$Outbound = {
  accessAddresses: string;
  storageKeys: Array<string>;
};

/** @internal */
export const AccessListData$outboundSchema: z.ZodType<
  AccessListData$Outbound,
  z.ZodTypeDef,
  AccessListData
> = z.object({
  accessAddresses: z.string(),
  storageKeys: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccessListData$ {
  /** @deprecated use `AccessListData$inboundSchema` instead. */
  export const inboundSchema = AccessListData$inboundSchema;
  /** @deprecated use `AccessListData$outboundSchema` instead. */
  export const outboundSchema = AccessListData$outboundSchema;
  /** @deprecated use `AccessListData$Outbound` instead. */
  export type Outbound = AccessListData$Outbound;
}

export function accessListDataToJSON(accessListData: AccessListData): string {
  return JSON.stringify(AccessListData$outboundSchema.parse(accessListData));
}

export function accessListDataFromJSON(
  jsonString: string,
): SafeParseResult<AccessListData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccessListData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccessListData' from JSON`,
  );
}
