/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EvmBlock,
  EvmBlock$inboundSchema,
  EvmBlock$Outbound,
  EvmBlock$outboundSchema,
} from "./evmblock.js";

export type ListEvmBlocksResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  blocks: Array<EvmBlock>;
};

/** @internal */
export const ListEvmBlocksResponse$inboundSchema: z.ZodType<
  ListEvmBlocksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  blocks: z.array(EvmBlock$inboundSchema),
});

/** @internal */
export type ListEvmBlocksResponse$Outbound = {
  nextPageToken?: string | undefined;
  blocks: Array<EvmBlock$Outbound>;
};

/** @internal */
export const ListEvmBlocksResponse$outboundSchema: z.ZodType<
  ListEvmBlocksResponse$Outbound,
  z.ZodTypeDef,
  ListEvmBlocksResponse
> = z.object({
  nextPageToken: z.string().optional(),
  blocks: z.array(EvmBlock$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListEvmBlocksResponse$ {
  /** @deprecated use `ListEvmBlocksResponse$inboundSchema` instead. */
  export const inboundSchema = ListEvmBlocksResponse$inboundSchema;
  /** @deprecated use `ListEvmBlocksResponse$outboundSchema` instead. */
  export const outboundSchema = ListEvmBlocksResponse$outboundSchema;
  /** @deprecated use `ListEvmBlocksResponse$Outbound` instead. */
  export type Outbound = ListEvmBlocksResponse$Outbound;
}

export function listEvmBlocksResponseToJSON(
  listEvmBlocksResponse: ListEvmBlocksResponse,
): string {
  return JSON.stringify(
    ListEvmBlocksResponse$outboundSchema.parse(listEvmBlocksResponse),
  );
}

export function listEvmBlocksResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListEvmBlocksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListEvmBlocksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListEvmBlocksResponse' from JSON`,
  );
}
