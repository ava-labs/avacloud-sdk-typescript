/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  IcmDestinationTransaction,
  IcmDestinationTransaction$inboundSchema,
  IcmDestinationTransaction$Outbound,
  IcmDestinationTransaction$outboundSchema,
} from "./icmdestinationtransaction.js";
import {
  IcmReceipt,
  IcmReceipt$inboundSchema,
  IcmReceipt$Outbound,
  IcmReceipt$outboundSchema,
} from "./icmreceipt.js";
import {
  IcmRewardDetails,
  IcmRewardDetails$inboundSchema,
  IcmRewardDetails$Outbound,
  IcmRewardDetails$outboundSchema,
} from "./icmrewarddetails.js";

export const DeliveredSourceNotIndexedIcmMessageStatus = {
  DeliveredSourceNotIndexed: "delivered_source_not_indexed",
} as const;
export type DeliveredSourceNotIndexedIcmMessageStatus = ClosedEnum<
  typeof DeliveredSourceNotIndexedIcmMessageStatus
>;

export type DeliveredSourceNotIndexedIcmMessage = {
  messageId: string;
  icmContractAddress: string;
  sourceBlockchainId: string;
  destinationBlockchainId: string;
  sourceEvmChainId: string;
  destinationEvmChainId: string;
  messageNonce: string;
  from: string;
  to: string;
  data?: string | undefined;
  messageExecuted: boolean;
  receipts: Array<IcmReceipt>;
  receiptDelivered: boolean;
  rewardDetails: IcmRewardDetails;
  destinationTransaction: IcmDestinationTransaction;
  status: DeliveredSourceNotIndexedIcmMessageStatus;
};

/** @internal */
export const DeliveredSourceNotIndexedIcmMessageStatus$inboundSchema:
  z.ZodNativeEnum<typeof DeliveredSourceNotIndexedIcmMessageStatus> = z
    .nativeEnum(DeliveredSourceNotIndexedIcmMessageStatus);

/** @internal */
export const DeliveredSourceNotIndexedIcmMessageStatus$outboundSchema:
  z.ZodNativeEnum<typeof DeliveredSourceNotIndexedIcmMessageStatus> =
    DeliveredSourceNotIndexedIcmMessageStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveredSourceNotIndexedIcmMessageStatus$ {
  /** @deprecated use `DeliveredSourceNotIndexedIcmMessageStatus$inboundSchema` instead. */
  export const inboundSchema =
    DeliveredSourceNotIndexedIcmMessageStatus$inboundSchema;
  /** @deprecated use `DeliveredSourceNotIndexedIcmMessageStatus$outboundSchema` instead. */
  export const outboundSchema =
    DeliveredSourceNotIndexedIcmMessageStatus$outboundSchema;
}

/** @internal */
export const DeliveredSourceNotIndexedIcmMessage$inboundSchema: z.ZodType<
  DeliveredSourceNotIndexedIcmMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  messageId: z.string(),
  icmContractAddress: z.string(),
  sourceBlockchainId: z.string(),
  destinationBlockchainId: z.string(),
  sourceEvmChainId: z.string(),
  destinationEvmChainId: z.string(),
  messageNonce: z.string(),
  from: z.string(),
  to: z.string(),
  data: z.string().optional(),
  messageExecuted: z.boolean(),
  receipts: z.array(IcmReceipt$inboundSchema),
  receiptDelivered: z.boolean(),
  rewardDetails: IcmRewardDetails$inboundSchema,
  destinationTransaction: IcmDestinationTransaction$inboundSchema,
  status: DeliveredSourceNotIndexedIcmMessageStatus$inboundSchema,
});

/** @internal */
export type DeliveredSourceNotIndexedIcmMessage$Outbound = {
  messageId: string;
  icmContractAddress: string;
  sourceBlockchainId: string;
  destinationBlockchainId: string;
  sourceEvmChainId: string;
  destinationEvmChainId: string;
  messageNonce: string;
  from: string;
  to: string;
  data?: string | undefined;
  messageExecuted: boolean;
  receipts: Array<IcmReceipt$Outbound>;
  receiptDelivered: boolean;
  rewardDetails: IcmRewardDetails$Outbound;
  destinationTransaction: IcmDestinationTransaction$Outbound;
  status: string;
};

/** @internal */
export const DeliveredSourceNotIndexedIcmMessage$outboundSchema: z.ZodType<
  DeliveredSourceNotIndexedIcmMessage$Outbound,
  z.ZodTypeDef,
  DeliveredSourceNotIndexedIcmMessage
> = z.object({
  messageId: z.string(),
  icmContractAddress: z.string(),
  sourceBlockchainId: z.string(),
  destinationBlockchainId: z.string(),
  sourceEvmChainId: z.string(),
  destinationEvmChainId: z.string(),
  messageNonce: z.string(),
  from: z.string(),
  to: z.string(),
  data: z.string().optional(),
  messageExecuted: z.boolean(),
  receipts: z.array(IcmReceipt$outboundSchema),
  receiptDelivered: z.boolean(),
  rewardDetails: IcmRewardDetails$outboundSchema,
  destinationTransaction: IcmDestinationTransaction$outboundSchema,
  status: DeliveredSourceNotIndexedIcmMessageStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveredSourceNotIndexedIcmMessage$ {
  /** @deprecated use `DeliveredSourceNotIndexedIcmMessage$inboundSchema` instead. */
  export const inboundSchema =
    DeliveredSourceNotIndexedIcmMessage$inboundSchema;
  /** @deprecated use `DeliveredSourceNotIndexedIcmMessage$outboundSchema` instead. */
  export const outboundSchema =
    DeliveredSourceNotIndexedIcmMessage$outboundSchema;
  /** @deprecated use `DeliveredSourceNotIndexedIcmMessage$Outbound` instead. */
  export type Outbound = DeliveredSourceNotIndexedIcmMessage$Outbound;
}

export function deliveredSourceNotIndexedIcmMessageToJSON(
  deliveredSourceNotIndexedIcmMessage: DeliveredSourceNotIndexedIcmMessage,
): string {
  return JSON.stringify(
    DeliveredSourceNotIndexedIcmMessage$outboundSchema.parse(
      deliveredSourceNotIndexedIcmMessage,
    ),
  );
}

export function deliveredSourceNotIndexedIcmMessageFromJSON(
  jsonString: string,
): SafeParseResult<DeliveredSourceNotIndexedIcmMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeliveredSourceNotIndexedIcmMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeliveredSourceNotIndexedIcmMessage' from JSON`,
  );
}
