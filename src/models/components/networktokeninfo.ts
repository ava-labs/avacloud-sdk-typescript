/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type NetworkTokenInfo = {
  /**
   * Token name
   */
  tokenName?: string | undefined;
  /**
   * Token symbol
   */
  tokenSymbol?: string | undefined;
  /**
   * Token decimals
   */
  tokenDecimals?: number | undefined;
  /**
   * Value including decimals
   */
  valueWithDecimals?: string | undefined;
};

/** @internal */
export const NetworkTokenInfo$inboundSchema: z.ZodType<
  NetworkTokenInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  tokenName: z.string().optional(),
  tokenSymbol: z.string().optional(),
  tokenDecimals: z.number().optional(),
  valueWithDecimals: z.string().optional(),
});

/** @internal */
export type NetworkTokenInfo$Outbound = {
  tokenName?: string | undefined;
  tokenSymbol?: string | undefined;
  tokenDecimals?: number | undefined;
  valueWithDecimals?: string | undefined;
};

/** @internal */
export const NetworkTokenInfo$outboundSchema: z.ZodType<
  NetworkTokenInfo$Outbound,
  z.ZodTypeDef,
  NetworkTokenInfo
> = z.object({
  tokenName: z.string().optional(),
  tokenSymbol: z.string().optional(),
  tokenDecimals: z.number().optional(),
  valueWithDecimals: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NetworkTokenInfo$ {
  /** @deprecated use `NetworkTokenInfo$inboundSchema` instead. */
  export const inboundSchema = NetworkTokenInfo$inboundSchema;
  /** @deprecated use `NetworkTokenInfo$outboundSchema` instead. */
  export const outboundSchema = NetworkTokenInfo$outboundSchema;
  /** @deprecated use `NetworkTokenInfo$Outbound` instead. */
  export type Outbound = NetworkTokenInfo$Outbound;
}

export function networkTokenInfoToJSON(
  networkTokenInfo: NetworkTokenInfo,
): string {
  return JSON.stringify(
    NetworkTokenInfo$outboundSchema.parse(networkTokenInfo),
  );
}

export function networkTokenInfoFromJSON(
  jsonString: string,
): SafeParseResult<NetworkTokenInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => NetworkTokenInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'NetworkTokenInfo' from JSON`,
  );
}
