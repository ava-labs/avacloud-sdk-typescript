/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PChainAddressDetails = {
  /**
   * A list of P-Chain addresses.
   */
  addresses: Array<string>;
  /**
   * Route dependent value associated with an address at a given point in time.
   */
  sortKey: string;
};

/** @internal */
export const PChainAddressDetails$inboundSchema: z.ZodType<
  PChainAddressDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  addresses: z.array(z.string()),
  sortKey: z.string(),
});

/** @internal */
export type PChainAddressDetails$Outbound = {
  addresses: Array<string>;
  sortKey: string;
};

/** @internal */
export const PChainAddressDetails$outboundSchema: z.ZodType<
  PChainAddressDetails$Outbound,
  z.ZodTypeDef,
  PChainAddressDetails
> = z.object({
  addresses: z.array(z.string()),
  sortKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PChainAddressDetails$ {
  /** @deprecated use `PChainAddressDetails$inboundSchema` instead. */
  export const inboundSchema = PChainAddressDetails$inboundSchema;
  /** @deprecated use `PChainAddressDetails$outboundSchema` instead. */
  export const outboundSchema = PChainAddressDetails$outboundSchema;
  /** @deprecated use `PChainAddressDetails$Outbound` instead. */
  export type Outbound = PChainAddressDetails$Outbound;
}

export function pChainAddressDetailsToJSON(
  pChainAddressDetails: PChainAddressDetails,
): string {
  return JSON.stringify(
    PChainAddressDetails$outboundSchema.parse(pChainAddressDetails),
  );
}

export function pChainAddressDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PChainAddressDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PChainAddressDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PChainAddressDetails' from JSON`,
  );
}
