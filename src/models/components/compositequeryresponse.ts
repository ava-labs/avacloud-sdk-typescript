/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompositeQueryResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  /**
   * The number of results for each subquery by query id.
   */
  subQueryCounts: { [k: string]: number };
  /**
   * The total number of addresses returned by the composite query.
   */
  totalCount: number;
  addresses: Array<string>;
};

/** @internal */
export const CompositeQueryResponse$inboundSchema: z.ZodType<
  CompositeQueryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  subQueryCounts: z.record(z.number()),
  totalCount: z.number(),
  addresses: z.array(z.string()),
});

/** @internal */
export type CompositeQueryResponse$Outbound = {
  nextPageToken?: string | undefined;
  subQueryCounts: { [k: string]: number };
  totalCount: number;
  addresses: Array<string>;
};

/** @internal */
export const CompositeQueryResponse$outboundSchema: z.ZodType<
  CompositeQueryResponse$Outbound,
  z.ZodTypeDef,
  CompositeQueryResponse
> = z.object({
  nextPageToken: z.string().optional(),
  subQueryCounts: z.record(z.number()),
  totalCount: z.number(),
  addresses: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompositeQueryResponse$ {
  /** @deprecated use `CompositeQueryResponse$inboundSchema` instead. */
  export const inboundSchema = CompositeQueryResponse$inboundSchema;
  /** @deprecated use `CompositeQueryResponse$outboundSchema` instead. */
  export const outboundSchema = CompositeQueryResponse$outboundSchema;
  /** @deprecated use `CompositeQueryResponse$Outbound` instead. */
  export type Outbound = CompositeQueryResponse$Outbound;
}

export function compositeQueryResponseToJSON(
  compositeQueryResponse: CompositeQueryResponse,
): string {
  return JSON.stringify(
    CompositeQueryResponse$outboundSchema.parse(compositeQueryResponse),
  );
}

export function compositeQueryResponseFromJSON(
  jsonString: string,
): SafeParseResult<CompositeQueryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompositeQueryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompositeQueryResponse' from JSON`,
  );
}
