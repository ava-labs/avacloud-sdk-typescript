/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CChainExportTransaction,
  CChainExportTransaction$inboundSchema,
  CChainExportTransaction$Outbound,
  CChainExportTransaction$outboundSchema,
} from "./cchainexporttransaction.js";
import {
  CChainImportTransaction,
  CChainImportTransaction$inboundSchema,
  CChainImportTransaction$Outbound,
  CChainImportTransaction$outboundSchema,
} from "./cchainimporttransaction.js";
import {
  PrimaryNetworkChainInfo,
  PrimaryNetworkChainInfo$inboundSchema,
  PrimaryNetworkChainInfo$Outbound,
  PrimaryNetworkChainInfo$outboundSchema,
} from "./primarynetworkchaininfo.js";

export type ListCChainAtomicTransactionsResponseTransactions =
  | CChainExportTransaction
  | CChainImportTransaction;

export type ListCChainAtomicTransactionsResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  transactions: Array<CChainExportTransaction | CChainImportTransaction>;
  chainInfo: PrimaryNetworkChainInfo;
};

/** @internal */
export const ListCChainAtomicTransactionsResponseTransactions$inboundSchema:
  z.ZodType<
    ListCChainAtomicTransactionsResponseTransactions,
    z.ZodTypeDef,
    unknown
  > = z.union([
    CChainExportTransaction$inboundSchema,
    CChainImportTransaction$inboundSchema,
  ]);

/** @internal */
export type ListCChainAtomicTransactionsResponseTransactions$Outbound =
  | CChainExportTransaction$Outbound
  | CChainImportTransaction$Outbound;

/** @internal */
export const ListCChainAtomicTransactionsResponseTransactions$outboundSchema:
  z.ZodType<
    ListCChainAtomicTransactionsResponseTransactions$Outbound,
    z.ZodTypeDef,
    ListCChainAtomicTransactionsResponseTransactions
  > = z.union([
    CChainExportTransaction$outboundSchema,
    CChainImportTransaction$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCChainAtomicTransactionsResponseTransactions$ {
  /** @deprecated use `ListCChainAtomicTransactionsResponseTransactions$inboundSchema` instead. */
  export const inboundSchema =
    ListCChainAtomicTransactionsResponseTransactions$inboundSchema;
  /** @deprecated use `ListCChainAtomicTransactionsResponseTransactions$outboundSchema` instead. */
  export const outboundSchema =
    ListCChainAtomicTransactionsResponseTransactions$outboundSchema;
  /** @deprecated use `ListCChainAtomicTransactionsResponseTransactions$Outbound` instead. */
  export type Outbound =
    ListCChainAtomicTransactionsResponseTransactions$Outbound;
}

export function listCChainAtomicTransactionsResponseTransactionsToJSON(
  listCChainAtomicTransactionsResponseTransactions:
    ListCChainAtomicTransactionsResponseTransactions,
): string {
  return JSON.stringify(
    ListCChainAtomicTransactionsResponseTransactions$outboundSchema.parse(
      listCChainAtomicTransactionsResponseTransactions,
    ),
  );
}

export function listCChainAtomicTransactionsResponseTransactionsFromJSON(
  jsonString: string,
): SafeParseResult<
  ListCChainAtomicTransactionsResponseTransactions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ListCChainAtomicTransactionsResponseTransactions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ListCChainAtomicTransactionsResponseTransactions' from JSON`,
  );
}

/** @internal */
export const ListCChainAtomicTransactionsResponse$inboundSchema: z.ZodType<
  ListCChainAtomicTransactionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  transactions: z.array(
    z.union([
      CChainExportTransaction$inboundSchema,
      CChainImportTransaction$inboundSchema,
    ]),
  ),
  chainInfo: PrimaryNetworkChainInfo$inboundSchema,
});

/** @internal */
export type ListCChainAtomicTransactionsResponse$Outbound = {
  nextPageToken?: string | undefined;
  transactions: Array<
    CChainExportTransaction$Outbound | CChainImportTransaction$Outbound
  >;
  chainInfo: PrimaryNetworkChainInfo$Outbound;
};

/** @internal */
export const ListCChainAtomicTransactionsResponse$outboundSchema: z.ZodType<
  ListCChainAtomicTransactionsResponse$Outbound,
  z.ZodTypeDef,
  ListCChainAtomicTransactionsResponse
> = z.object({
  nextPageToken: z.string().optional(),
  transactions: z.array(
    z.union([
      CChainExportTransaction$outboundSchema,
      CChainImportTransaction$outboundSchema,
    ]),
  ),
  chainInfo: PrimaryNetworkChainInfo$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListCChainAtomicTransactionsResponse$ {
  /** @deprecated use `ListCChainAtomicTransactionsResponse$inboundSchema` instead. */
  export const inboundSchema =
    ListCChainAtomicTransactionsResponse$inboundSchema;
  /** @deprecated use `ListCChainAtomicTransactionsResponse$outboundSchema` instead. */
  export const outboundSchema =
    ListCChainAtomicTransactionsResponse$outboundSchema;
  /** @deprecated use `ListCChainAtomicTransactionsResponse$Outbound` instead. */
  export type Outbound = ListCChainAtomicTransactionsResponse$Outbound;
}

export function listCChainAtomicTransactionsResponseToJSON(
  listCChainAtomicTransactionsResponse: ListCChainAtomicTransactionsResponse,
): string {
  return JSON.stringify(
    ListCChainAtomicTransactionsResponse$outboundSchema.parse(
      listCChainAtomicTransactionsResponse,
    ),
  );
}

export function listCChainAtomicTransactionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListCChainAtomicTransactionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ListCChainAtomicTransactionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListCChainAtomicTransactionsResponse' from JSON`,
  );
}
