/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListWebhookAddressesResponse = {
  /**
   * A token, which can be sent as `pageToken` to retrieve the next page. If this field is omitted or empty, there are no subsequent pages.
   */
  nextPageToken?: string | undefined;
  addresses: Array<string>;
  totalAddresses: number;
};

/** @internal */
export const ListWebhookAddressesResponse$inboundSchema: z.ZodType<
  ListWebhookAddressesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nextPageToken: z.string().optional(),
  addresses: z.array(z.string()),
  totalAddresses: z.number(),
});

/** @internal */
export type ListWebhookAddressesResponse$Outbound = {
  nextPageToken?: string | undefined;
  addresses: Array<string>;
  totalAddresses: number;
};

/** @internal */
export const ListWebhookAddressesResponse$outboundSchema: z.ZodType<
  ListWebhookAddressesResponse$Outbound,
  z.ZodTypeDef,
  ListWebhookAddressesResponse
> = z.object({
  nextPageToken: z.string().optional(),
  addresses: z.array(z.string()),
  totalAddresses: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListWebhookAddressesResponse$ {
  /** @deprecated use `ListWebhookAddressesResponse$inboundSchema` instead. */
  export const inboundSchema = ListWebhookAddressesResponse$inboundSchema;
  /** @deprecated use `ListWebhookAddressesResponse$outboundSchema` instead. */
  export const outboundSchema = ListWebhookAddressesResponse$outboundSchema;
  /** @deprecated use `ListWebhookAddressesResponse$Outbound` instead. */
  export type Outbound = ListWebhookAddressesResponse$Outbound;
}

export function listWebhookAddressesResponseToJSON(
  listWebhookAddressesResponse: ListWebhookAddressesResponse,
): string {
  return JSON.stringify(
    ListWebhookAddressesResponse$outboundSchema.parse(
      listWebhookAddressesResponse,
    ),
  );
}

export function listWebhookAddressesResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListWebhookAddressesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListWebhookAddressesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListWebhookAddressesResponse' from JSON`,
  );
}
