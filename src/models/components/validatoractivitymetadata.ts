/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ValidatorActivityKeyType,
  ValidatorActivityKeyType$inboundSchema,
  ValidatorActivityKeyType$outboundSchema,
} from "./validatoractivitykeytype.js";
import {
  ValidatorActivitySubEvents,
  ValidatorActivitySubEvents$inboundSchema,
  ValidatorActivitySubEvents$Outbound,
  ValidatorActivitySubEvents$outboundSchema,
} from "./validatoractivitysubevents.js";

export type ValidatorActivityMetadata = {
  /**
   * Array of hexadecimal strings of the event signatures.
   */
  eventSignatures?: Array<string> | undefined;
  /**
   * The type of key to monitor for the validator activity event type.
   */
  keyType: ValidatorActivityKeyType;
  /**
   * Array of keys like NodeID or SubnetID corresponding to the keyType being monitored. ValidatorActivity event will only accept a single key
   */
  keys: Array<string>;
  /**
   * Sub-events to monitor
   */
  subEvents: ValidatorActivitySubEvents;
  /**
   * Array of node IDs to filter the events
   */
  nodeIds?: Array<string> | undefined;
  /**
   * Array of subnet IDs to filter the events
   */
  subnetIds?: Array<string> | undefined;
  /**
   * L1 validator fee balance threshold in nAVAX
   */
  l1ValidatorFeeBalanceThreshold?: string | undefined;
};

/** @internal */
export const ValidatorActivityMetadata$inboundSchema: z.ZodType<
  ValidatorActivityMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  eventSignatures: z.array(z.string()).optional(),
  keyType: ValidatorActivityKeyType$inboundSchema,
  keys: z.array(z.string()),
  subEvents: ValidatorActivitySubEvents$inboundSchema,
  nodeIds: z.array(z.string()).optional(),
  subnetIds: z.array(z.string()).optional(),
  l1ValidatorFeeBalanceThreshold: z.string().optional(),
});

/** @internal */
export type ValidatorActivityMetadata$Outbound = {
  eventSignatures?: Array<string> | undefined;
  keyType: string;
  keys: Array<string>;
  subEvents: ValidatorActivitySubEvents$Outbound;
  nodeIds?: Array<string> | undefined;
  subnetIds?: Array<string> | undefined;
  l1ValidatorFeeBalanceThreshold?: string | undefined;
};

/** @internal */
export const ValidatorActivityMetadata$outboundSchema: z.ZodType<
  ValidatorActivityMetadata$Outbound,
  z.ZodTypeDef,
  ValidatorActivityMetadata
> = z.object({
  eventSignatures: z.array(z.string()).optional(),
  keyType: ValidatorActivityKeyType$outboundSchema,
  keys: z.array(z.string()),
  subEvents: ValidatorActivitySubEvents$outboundSchema,
  nodeIds: z.array(z.string()).optional(),
  subnetIds: z.array(z.string()).optional(),
  l1ValidatorFeeBalanceThreshold: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValidatorActivityMetadata$ {
  /** @deprecated use `ValidatorActivityMetadata$inboundSchema` instead. */
  export const inboundSchema = ValidatorActivityMetadata$inboundSchema;
  /** @deprecated use `ValidatorActivityMetadata$outboundSchema` instead. */
  export const outboundSchema = ValidatorActivityMetadata$outboundSchema;
  /** @deprecated use `ValidatorActivityMetadata$Outbound` instead. */
  export type Outbound = ValidatorActivityMetadata$Outbound;
}

export function validatorActivityMetadataToJSON(
  validatorActivityMetadata: ValidatorActivityMetadata,
): string {
  return JSON.stringify(
    ValidatorActivityMetadata$outboundSchema.parse(validatorActivityMetadata),
  );
}

export function validatorActivityMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ValidatorActivityMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValidatorActivityMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValidatorActivityMetadata' from JSON`,
  );
}
