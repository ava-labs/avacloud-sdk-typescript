/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddressDetails = {
  /**
   * An EVM address.
   */
  address: string;
  /**
   * Route dependent value associated with an address at a given point in time.
   */
  sortKey: string;
};

/** @internal */
export const AddressDetails$inboundSchema: z.ZodType<
  AddressDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  sortKey: z.string(),
});

/** @internal */
export type AddressDetails$Outbound = {
  address: string;
  sortKey: string;
};

/** @internal */
export const AddressDetails$outboundSchema: z.ZodType<
  AddressDetails$Outbound,
  z.ZodTypeDef,
  AddressDetails
> = z.object({
  address: z.string(),
  sortKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddressDetails$ {
  /** @deprecated use `AddressDetails$inboundSchema` instead. */
  export const inboundSchema = AddressDetails$inboundSchema;
  /** @deprecated use `AddressDetails$outboundSchema` instead. */
  export const outboundSchema = AddressDetails$outboundSchema;
  /** @deprecated use `AddressDetails$Outbound` instead. */
  export type Outbound = AddressDetails$Outbound;
}

export function addressDetailsToJSON(addressDetails: AddressDetails): string {
  return JSON.stringify(AddressDetails$outboundSchema.parse(addressDetails));
}

export function addressDetailsFromJSON(
  jsonString: string,
): SafeParseResult<AddressDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddressDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddressDetails' from JSON`,
  );
}
